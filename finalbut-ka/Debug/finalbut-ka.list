
finalbut-ka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000236c  0801a750  0801a750  0002a750  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cabc  0801cabc  000302bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801cabc  0801cabc  0002cabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cac4  0801cac4  000302bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801cac4  0801cac4  0002cac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cacc  0801cacc  0002cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0801cad0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302bc  2**0
                  CONTENTS
 10 .bss          0000227c  200002bc  200002bc  000302bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002538  20002538  000302bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00109454  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000108c9  00000000  00000000  00139740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004d88  00000000  00000000  0014a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004ba0  00000000  00000000  0014ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000329a5  00000000  00000000  00153938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00050af7  00000000  00000000  001862dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018d5c2  00000000  00000000  001d6dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00364396  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000171d4  00000000  00000000  003643e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002bc 	.word	0x200002bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a734 	.word	0x0801a734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c0 	.word	0x200002c0
 80001cc:	0801a734 	.word	0x0801a734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f003 fdeb 	bl	8004ca0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f005 fd8d 	bl	8006bf2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f005 fd86 	bl	8006bf2 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f003 fdd8 	bl	8004ca0 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	200002d8 	.word	0x200002d8

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f003 fdbe 	bl	8004ca0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f005 fd60 	bl	8006bf2 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f005 fe94 	bl	8006e6a <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f003 fdaa 	bl	8004ca0 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	200002d8 	.word	0x200002d8

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f018 f91c 	bl	80193d8 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f003 fcdd 	bl	8004ca0 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002d8 	.word	0x200002d8
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	20000330 	.word	0x20000330
 8001484:	20000008 	.word	0x20000008
 8001488:	20000334 	.word	0x20000334
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000338 	.word	0x20000338

08001494 <_Z19LIS3DSH_X_calibrateff>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80014a2:	ed97 7a00 	vldr	s14, [r7]
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014e8 <_Z19LIS3DSH_X_calibrateff+0x54>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <_Z19LIS3DSH_X_calibrateff+0x58>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000330 	.word	0x20000330
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	20000004 	.word	0x20000004

080014f0 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014fa:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80014fe:	ed97 7a00 	vldr	s14, [r7]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001544 <_Z19LIS3DSH_Y_calibrateff+0x54>
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_Z19LIS3DSH_Y_calibrateff+0x58>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000334 	.word	0x20000334
 8001544:	44fa0000 	.word	0x44fa0000
 8001548:	20000008 	.word	0x20000008

0800154c <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800155a:	ed97 7a00 	vldr	s14, [r7]
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001574:	ed97 7a00 	vldr	s14, [r7]
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	eddf 6a07 	vldr	s13, [pc, #28]	; 80015a0 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000338 	.word	0x20000338
 80015a0:	44fa0000 	.word	0x44fa0000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80015de:	2137      	movs	r1, #55	; 0x37
 80015e0:	4817      	ldr	r0, [pc, #92]	; (8001640 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80015e2:	f017 fe83 	bl	80192ec <__assert_func>

	if(align && size)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01f      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f010 fca9 	bl	8011f58 <_Z9ei_callocjj>
 8001606:	60f8      	str	r0, [r7, #12]

		if(p)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00e      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	425b      	negs	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3b02      	subs	r3, #2
 8001628:	b292      	uxth	r2, r2
 800162a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0801a780 	.word	0x0801a780
 800163c:	0801a79c 	.word	0x0801a79c
 8001640:	0801a7d4 	.word	0x0801a7d4

08001644 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001656:	215a      	movs	r1, #90	; 0x5a
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800165a:	f017 fe47 	bl	80192ec <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001664:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	425b      	negs	r3, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f010 fc7f 	bl	8011f74 <_Z7ei_freePv>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0801a858 	.word	0x0801a858
 8001684:	0801a85c 	.word	0x0801a85c
 8001688:	0801a7d4 	.word	0x0801a7d4

0800168c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4798      	blx	r3
    }
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	731a      	strb	r2, [r3, #12]
 800173c:	e00e      	b.n	800175c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f010 fc04 	bl	8011f58 <_Z9ei_callocjj>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f010 fbf0 	bl	8011f74 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	731a      	strb	r2, [r3, #12]
 80017be:	e00d      	b.n	80017dc <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f010 fbc4 	bl	8011f58 <_Z9ei_callocjj>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f010 fbb0 	bl	8011f74 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
 8001822:	e7fe      	b.n	8001822 <_ZSt25__throw_bad_function_callv+0x4>

08001824 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
 800182e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001832:	f016 fbf7 	bl	8018024 <expf>
 8001836:	eef0 7a40 	vmov.f32	s15, s0
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	ed87 0a01 	vstr	s0, [r7, #4]
 800184e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001852:	f016 fb53 	bl	8017efc <roundf>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001870:	edd7 7a00 	vldr	s15, [r7]
 8001874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001878:	eef4 7a47 	vcmp.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d101      	bne.n	8001886 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001882:	2300      	movs	r3, #0
 8001884:	e033      	b.n	80018ee <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188e:	d204      	bcs.n	800189a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d301      	bcc.n	800189e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 800189c:	e027      	b.n	80018ee <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	82bb      	strh	r3, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	82fb      	strh	r3, [r7, #22]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	81bb      	strh	r3, [r7, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80018ca:	f107 020c 	add.w	r2, r7, #12
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4611      	mov	r1, r2
 80018d4:	ed97 0a00 	vldr	s0, [r7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f009 fabf 	bl	800ae5c <arm_mat_scale_f32>
 80018de:	4603      	mov	r3, r0
 80018e0:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	e000      	b.n	80018ee <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80018ec:	2300      	movs	r3, #0
    }
 80018ee:	4618      	mov	r0, r3
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	fffffc0c 	.word	0xfffffc0c

080018fc <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fee4 	bl	80016d4 <_ZNSt14_Function_baseD1Ev>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fec4 	bl	80036ae <_ZNSt8functionIFijjPfEEC1Ev>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN2ei11ei_signal_tD1Ev>:
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ffde 	bl	80018fc <_ZNSt8functionIFijjPfEED1Ev>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    }
#endif
    return EIDSP_NOT_SUPPORTED;
}

__attribute__((unused)) int extract_raw_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b08f      	sub	sp, #60	; 0x3c
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_raw_t config = *((ei_dsp_config_raw_t*)config_ptr);
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	ca07      	ldmia	r2, {r0, r1, r2}
 8001964:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800196e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	461a      	mov	r2, r3
 8001976:	f107 0014 	add.w	r0, r7, #20
 800197a:	2300      	movs	r3, #0
 800197c:	f7ff fece 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001986:	4c1f      	ldr	r4, [pc, #124]	; (8001a04 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>)
 8001988:	e031      	b.n	80019ee <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa2>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2100      	movs	r1, #0
 8001994:	f001 fe5d 	bl	8003652 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    int ret = numpy::scale(&input_matrix, config.scale_axes);
 8001998:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80019aa:	6338      	str	r0, [r7, #48]	; 0x30
    if (ret != EIDSP_OK) {
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
        EIDSP_ERR(ret);
 80019b2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80019b4:	e01b      	b.n	80019ee <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa2>

    // Because of rounding errors during re-sampling the output size of the block might be
    // smaller than the input of the block. Make sure we don't write outside of the bounds
    // of the array:
    // https://forum.edgeimpulse.com/t/using-custom-sensors-on-raspberry-pi-4/3506/7
    size_t els_to_copy = signal->total_length;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
    if (els_to_copy > output_matrix->rows * output_matrix->cols) {
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	6892      	ldr	r2, [r2, #8]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d906      	bls.n	80019dc <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        els_to_copy = output_matrix->rows * output_matrix->cols;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	6892      	ldr	r2, [r2, #8]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
    }

    memcpy(output_matrix->buffer, input_matrix.buffer, els_to_copy * sizeof(float));
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	461a      	mov	r2, r3
 80019e8:	f017 fcf6 	bl	80193d8 <memcpy>

    return EIDSP_OK;
 80019ec:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff febd 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
}
 80019f8:	4623      	mov	r3, r4
 80019fa:	4618      	mov	r0, r3
 80019fc:	373c      	adds	r7, #60	; 0x3c
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	fffffc16 	.word	0xfffffc16

08001a08 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b098      	sub	sp, #96	; 0x60
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	4967      	ldr	r1, [pc, #412]	; (8001bc4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fc21 	bl	8000270 <strcmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8001a38:	2303      	movs	r3, #3
 8001a3a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8001a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f080 80ac 	bcs.w	8001bb6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d803      	bhi.n	8001a6e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e001      	b.n	8001a72 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8001a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	461a      	mov	r2, r3
 8001a78:	f107 0014 	add.w	r0, r7, #20
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a80:	f7ff fe4c 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001a8a:	4d4f      	ldr	r5, [pc, #316]	; (8001bc8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 8001a8c:	2400      	movs	r4, #0
 8001a8e:	e086      	b.n	8001b9e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a98:	f001 fddb 	bl	8003652 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8001aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d275      	bcs.n	8001b94 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab8:	ee17 3a90 	vmov	r3, s15
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001acc:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001bcc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8001ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae6:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001bcc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8001aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8001af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001afe:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001bcc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8001b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b06:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8001b0a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d11b      	bne.n	8001b4a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b18:	1c59      	adds	r1, r3, #1
 8001b1a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b22:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	1c59      	adds	r1, r3, #1
 8001b2c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b34:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	1c59      	adds	r1, r3, #1
 8001b3e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e020      	b.n	8001b8c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001b4a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b4e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001bd0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 8001b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b5a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001bd4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8001b5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b66:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b6a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001bd8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8001b6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	1c59      	adds	r1, r3, #1
 8001b82:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8a:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8e:	3301      	adds	r3, #1
 8001b90:	657b      	str	r3, [r7, #84]	; 0x54
 8001b92:	e785      	b.n	8001aa0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	2401      	movs	r4, #1
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fde5 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8001ba8:	2c01      	cmp	r4, #1
 8001baa:	d105      	bne.n	8001bb8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bb4:	e74d      	b.n	8001a52 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 8001bb6:	2500      	movs	r5, #0
}
 8001bb8:	462b      	mov	r3, r5
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3760      	adds	r7, #96	; 0x60
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	0801ab40 	.word	0x0801ab40
 8001bc8:	fffffc16 	.word	0xfffffc16
 8001bcc:	437f0000 	.word	0x437f0000
 8001bd0:	3e991687 	.word	0x3e991687
 8001bd4:	3f1645a2 	.word	0x3f1645a2
 8001bd8:	3de978d5 	.word	0x3de978d5

08001bdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b0a6      	sub	sp, #152	; 0x98
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6178      	str	r0, [r7, #20]
 8001be4:	6139      	str	r1, [r7, #16]
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	49ab      	ldr	r1, [pc, #684]	; (8001eac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fb36 	bl	8000270 <strcmp>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8001c1a:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8001c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8001c22:	f249 6345 	movw	r3, #38469	; 0x9645
 8001c26:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8001c28:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8001c2c:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8001c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c32:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f080 821d 	bcs.w	8002088 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d803      	bhi.n	8001c5e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8001c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e001      	b.n	8001c62 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	461a      	mov	r2, r3
 8001c68:	f107 0018 	add.w	r0, r7, #24
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c70:	f7ff fd54 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001c7a:	4d8d      	ldr	r5, [pc, #564]	; (8001eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	e1f5      	b.n	800206c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8001c80:	6938      	ldr	r0, [r7, #16]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c8a:	f001 fce2 	bl	8003652 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	f080 81e1 	bcs.w	8002062 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb2:	ee17 3a90 	vmov	r3, s15
 8001cb6:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8001cb8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	f040 8105 	bne.w	8001ecc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001cc8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001eb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8001ccc:	eef4 7a47 	vcmp.f32	s15, s14
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d160      	bne.n	8001d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001cdc:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001eb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8001ce0:	eef4 7a47 	vcmp.f32	s15, s14
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d156      	bne.n	8001d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8001cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8001cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8001cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8001d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d1c:	1c59      	adds	r1, r3, #1
 8001d1e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001d22:	4413      	add	r3, r2
 8001d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d28:	edc7 7a00 	vstr	s15, [r7]
 8001d2c:	783a      	ldrb	r2, [r7, #0]
 8001d2e:	b252      	sxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001d54:	4413      	add	r3, r2
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	edc7 7a00 	vstr	s15, [r7]
 8001d5e:	783a      	ldrb	r2, [r7, #0]
 8001d60:	b252      	sxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8001d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d80:	1c59      	adds	r1, r3, #1
 8001d82:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001d86:	4413      	add	r3, r2
 8001d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8c:	edc7 7a00 	vstr	s15, [r7]
 8001d90:	783a      	ldrb	r2, [r7, #0]
 8001d92:	b252      	sxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e15e      	b.n	8002056 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001ebc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8001daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001ebc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8001dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8001dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd8:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ebc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8001ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001df2:	eeb0 0a66 	vmov.f32	s0, s13
 8001df6:	f7ff fd25 	bl	8001844 <_ZSt5roundf>
 8001dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e16:	4413      	add	r3, r2
 8001e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1c:	edc7 7a00 	vstr	s15, [r7]
 8001e20:	783a      	ldrb	r2, [r7, #0]
 8001e22:	b252      	sxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001e30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e34:	eeb0 0a66 	vmov.f32	s0, s13
 8001e38:	f7ff fd04 	bl	8001844 <_ZSt5roundf>
 8001e3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e52:	1c59      	adds	r1, r3, #1
 8001e54:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e58:	4413      	add	r3, r2
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	edc7 7a00 	vstr	s15, [r7]
 8001e62:	783a      	ldrb	r2, [r7, #0]
 8001e64:	b252      	sxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001e6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e76:	eeb0 0a66 	vmov.f32	s0, s13
 8001e7a:	f7ff fce3 	bl	8001844 <_ZSt5roundf>
 8001e7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e94:	1c59      	adds	r1, r3, #1
 8001e96:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e9a:	4413      	add	r3, r2
 8001e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea0:	edc7 7a00 	vstr	s15, [r7]
 8001ea4:	783a      	ldrb	r2, [r7, #0]
 8001ea6:	b252      	sxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e0d4      	b.n	8002056 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8001eac:	0801ab40 	.word	0x0801ab40
 8001eb0:	fffffc16 	.word	0xfffffc16
 8001eb4:	3b808081 	.word	0x3b808081
 8001eb8:	c3000000 	.word	0xc3000000
 8001ebc:	437f0000 	.word	0x437f0000
 8001ec0:	3e991687 	.word	0x3e991687
 8001ec4:	3f1645a2 	.word	0x3f1645a2
 8001ec8:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001ed2:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8001eb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8001ed6:	eef4 7a47 	vcmp.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	d15b      	bne.n	8001f98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001ee6:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8001eb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8001eea:	eef4 7a47 	vcmp.f32	s15, s14
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	d151      	bne.n	8001f98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8001ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8001efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8001f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8001f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0c:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8001f10:	fb03 f202 	mul.w	r2, r3, r2
 8001f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f16:	f249 6145 	movw	r1, #38469	; 0x9645
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	441a      	add	r2, r3
 8001f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f22:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8001f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f34:	141b      	asrs	r3, r3, #16
 8001f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8001f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f54:	ee17 3a90 	vmov	r3, s15
 8001f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8001f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f60:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001f64:	da04      	bge.n	8001f70 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8001f66:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f6e:	e006      	b.n	8001f7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8001f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f74:	2b7f      	cmp	r3, #127	; 0x7f
 8001f76:	dd02      	ble.n	8001f7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8001f78:	237f      	movs	r3, #127	; 0x7f
 8001f7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f92:	b252      	sxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e05e      	b.n	8002056 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa6:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8001ebc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8001faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc0:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8001ebc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8001fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8001fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd8:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8001ebc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8001fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001fe4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fe8:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8001ec0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8001fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ff4:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8001ec4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8001ff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002000:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002004:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8001ec8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8002008:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800201a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800201e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002022:	eeb0 0a66 	vmov.f32	s0, s13
 8002026:	f7ff fc0d 	bl	8001844 <_ZSt5roundf>
 800202a:	eeb0 7a40 	vmov.f32	s14, s0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002040:	1c59      	adds	r1, r3, #1
 8002042:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002046:	4413      	add	r3, r2
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	edc7 7a00 	vstr	s15, [r7]
 8002050:	783a      	ldrb	r2, [r7, #0]
 8002052:	b252      	sxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800205a:	3301      	adds	r3, #1
 800205c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002060:	e618      	b.n	8001c94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8002062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	2401      	movs	r4, #1
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fb7e 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8002076:	2c01      	cmp	r4, #1
 8002078:	d107      	bne.n	800208a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800207a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800207e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002086:	e5db      	b.n	8001c40 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8002088:	2500      	movs	r5, #0
}
 800208a:	462b      	mov	r3, r5
 800208c:	4618      	mov	r0, r3
 800208e:	3798      	adds	r7, #152	; 0x98
 8002090:	46bd      	mov	sp, r7
 8002092:	bdb0      	pop	{r4, r5, r7, pc}

08002094 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3310      	adds	r3, #16
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc29 	bl	8001916 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	f000 f832 	bl	800214e <_ZN14SignalWithAxes8get_dataEjjPf>
 80020ea:	4603      	mov	r3, r0
        };
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	429a      	cmp	r2, r3
 8002108:	d102      	bne.n	8002110 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	e01a      	b.n	8002146 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6892      	ldr	r2, [r2, #8]
 8002124:	fb03 f202 	mul.w	r2, r3, r2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	621a      	str	r2, [r3, #32]
        };
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0210 	add.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f001 fae3 	bl	8003708 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3310      	adds	r3, #16
    }
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 800214e:	b580      	push	{r7, lr}
 8002150:	b08a      	sub	sp, #40	; 0x28
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	6992      	ldr	r2, [r2, #24]
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	68d2      	ldr	r2, [r2, #12]
 8002180:	6992      	ldr	r2, [r2, #24]
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4413      	add	r3, r2
 8002196:	6a3a      	ldr	r2, [r7, #32]
 8002198:	429a      	cmp	r2, r3
 800219a:	d22b      	bcs.n	80021f4 <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d21d      	bcs.n	80021e6 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	18d1      	adds	r1, r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	627a      	str	r2, [r7, #36]	; 0x24
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	2201      	movs	r2, #1
 80021ce:	f001 fa40 	bl	8003652 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80021d2:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	e00b      	b.n	80021f6 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	e7dc      	b.n	80021a0 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	4413      	add	r3, r2
 80021f0:	623b      	str	r3, [r7, #32]
 80021f2:	e7cd      	b.n	8002190 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 80021f4:	2300      	movs	r3, #0
    }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800220c:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6178      	str	r0, [r7, #20]
 8002224:	6139      	str	r1, [r7, #16]
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	ed87 0a02 	vstr	s0, [r7, #8]
 800222c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8002232:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8002236:	4618      	mov	r0, r3
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6178      	str	r0, [r7, #20]
 800224c:	6139      	str	r1, [r7, #16]
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	ed87 0a02 	vstr	s0, [r7, #8]
 8002254:	edc7 0a01 	vstr	s1, [r7, #4]
 8002258:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002262:	461a      	mov	r2, r3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4293      	cmp	r3, r2
 8002268:	d23f      	bcs.n	80022ea <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f993 3000 	ldrsb.w	r3, [r3]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002284:	ed97 7a01 	vldr	s14, [r7, #4]
 8002288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228c:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d011      	beq.n	80022ba <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	4813      	ldr	r0, [pc, #76]	; (80022f4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80022a8:	f000 feac 	bl	8003004 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80022ac:	ed97 0a06 	vldr	s0, [r7, #24]
 80022b0:	f00f fd42 	bl	8011d38 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80022b4:	4810      	ldr	r0, [pc, #64]	; (80022f8 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80022b6:	f000 fea5 	bl	8003004 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	6819      	ldr	r1, [r3, #0]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	3201      	adds	r2, #1
 80022ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	3301      	adds	r3, #1
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	e7b9      	b.n	800225e <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0801ab4c 	.word	0x0801ab4c
 80022f8:	0801ab54 	.word	0x0801ab54

080022fc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002312:	461a      	mov	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4293      	cmp	r3, r2
 8002318:	d232      	bcs.n	8002380 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	613b      	str	r3, [r7, #16]

        if (debug) {
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d011      	beq.n	8002350 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	4813      	ldr	r0, [pc, #76]	; (800238c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 800233e:	f000 fe61 	bl	8003004 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8002342:	ed97 0a04 	vldr	s0, [r7, #16]
 8002346:	f00f fcf7 	bl	8011d38 <_Z15ei_printf_floatf>
            ei_printf("\n");
 800234a:	4811      	ldr	r0, [pc, #68]	; (8002390 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 800234c:	f000 fe5a 	bl	8003004 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	3201      	adds	r2, #1
 8002364:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e7c6      	b.n	800230e <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	0801ab4c 	.word	0x0801ab4c
 8002390:	0801ab54 	.word	0x0801ab54

08002394 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80023a2:	f00f fcb7 	bl	8011d14 <_Z16ei_read_timer_usv>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80023b0:	486e      	ldr	r0, [pc, #440]	; (800256c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80023b2:	f014 fc67 	bl	8016c84 <_Z18trained_model_initPFPvjjE>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	4619      	mov	r1, r3
 80023c4:	486a      	ldr	r0, [pc, #424]	; (8002570 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80023c6:	f000 fe1d 	bl	8003004 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80023ca:	f06f 0305 	mvn.w	r3, #5
 80023ce:	e0c8      	b.n	8002562 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d6:	2000      	movs	r0, #0
 80023d8:	4798      	blx	r3
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	2000      	movs	r0, #0
 80023e8:	4798      	blx	r3
 80023ea:	4602      	mov	r2, r0
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d115      	bne.n	8002426 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8002406:	4610      	mov	r0, r2
 8002408:	4798      	blx	r3
 800240a:	4602      	mov	r2, r0
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 800241c:	4610      	mov	r0, r2
 800241e:	4798      	blx	r3
 8002420:	4602      	mov	r2, r0
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8098 	beq.w	8002560 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800243c:	429a      	cmp	r2, r3
 800243e:	d005      	beq.n	800244c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 8002442:	4a4e      	ldr	r2, [pc, #312]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8002444:	2159      	movs	r1, #89	; 0x59
 8002446:	484e      	ldr	r0, [pc, #312]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8002448:	f016 ff50 	bl	80192ec <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002458:	429a      	cmp	r2, r3
 800245a:	d005      	beq.n	8002468 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 800245c:	4b49      	ldr	r3, [pc, #292]	; (8002584 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 800245e:	4a47      	ldr	r2, [pc, #284]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8002460:	215a      	movs	r1, #90	; 0x5a
 8002462:	4847      	ldr	r0, [pc, #284]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8002464:	f016 ff42 	bl	80192ec <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800246e:	2b01      	cmp	r3, #1
 8002470:	d11b      	bne.n	80024aa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800247e:	429a      	cmp	r2, r3
 8002480:	d005      	beq.n	800248e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 8002484:	4a3d      	ldr	r2, [pc, #244]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8002486:	215c      	movs	r1, #92	; 0x5c
 8002488:	483d      	ldr	r0, [pc, #244]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800248a:	f016 ff2f 	bl	80192ec <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800249a:	429a      	cmp	r2, r3
 800249c:	d005      	beq.n	80024aa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80024a0:	4a36      	ldr	r2, [pc, #216]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80024a2:	215d      	movs	r1, #93	; 0x5d
 80024a4:	4836      	ldr	r0, [pc, #216]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80024a6:	f016 ff21 	bl	80192ec <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d026      	beq.n	8002502 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80024c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	d005      	beq.n	80024d8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80024ce:	4a2b      	ldr	r2, [pc, #172]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80024d0:	2160      	movs	r1, #96	; 0x60
 80024d2:	482b      	ldr	r0, [pc, #172]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80024d4:	f016 ff0a 	bl	80192ec <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80024ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d005      	beq.n	8002502 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80024fa:	2161      	movs	r1, #97	; 0x61
 80024fc:	4820      	ldr	r0, [pc, #128]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80024fe:	f016 fef5 	bl	80192ec <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002508:	2b00      	cmp	r3, #0
 800250a:	d026      	beq.n	800255a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	ed93 7a03 	vldr	s14, [r3, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800251a:	eeb4 7a67 	vcmp.f32	s14, s15
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d005      	beq.n	8002530 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8002528:	2164      	movs	r1, #100	; 0x64
 800252a:	4815      	ldr	r0, [pc, #84]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800252c:	f016 fede 	bl	80192ec <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002544:	eeb4 7a67 	vcmp.f32	s14, s15
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	d005      	beq.n	800255a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8002552:	2165      	movs	r1, #101	; 0x65
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8002556:	f016 fec9 	bl	80192ec <__assert_func>
        }
        tflite_first_run = false;
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	080015c1 	.word	0x080015c1
 8002570:	0801ab58 	.word	0x0801ab58
 8002574:	20000044 	.word	0x20000044
 8002578:	0801ab8c 	.word	0x0801ab8c
 800257c:	0801abc0 	.word	0x0801abc0
 8002580:	0801ac5c 	.word	0x0801ac5c
 8002584:	0801acec 	.word	0x0801acec
 8002588:	0801ad20 	.word	0x0801ad20
 800258c:	0801ad5c 	.word	0x0801ad5c
 8002590:	0801ad98 	.word	0x0801ad98
 8002594:	0801add0 	.word	0x0801add0
 8002598:	0801ae10 	.word	0x0801ae10
 800259c:	0801ae48 	.word	0x0801ae48

080025a0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80025ac:	f014 fdce 	bl	801714c <_Z20trained_model_invokev>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80025c0:	f06f 0302 	mvn.w	r3, #2
 80025c4:	e0ea      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80025c6:	f00f fba5 	bl	8011d14 <_Z16ei_read_timer_usv>
 80025ca:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80025ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d6:	1a84      	subs	r4, r0, r2
 80025d8:	eb61 0503 	sbc.w	r5, r1, r3
 80025dc:	4622      	mov	r2, r4
 80025de:	462b      	mov	r3, r5
 80025e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025e2:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80025e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e8:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80025ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f7fe fb52 	bl	8000c9c <__aeabi_ldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8002602:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 800260a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002610:	4619      	mov	r1, r3
 8002612:	4864      	ldr	r0, [pc, #400]	; (80027a4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 8002614:	f000 fcf6 	bl	8003004 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d072      	beq.n	800270e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800262e:	3b01      	subs	r3, #1
 8002630:	2b04      	cmp	r3, #4
 8002632:	d862      	bhi.n	80026fa <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	080026c7 	.word	0x080026c7
 8002640:	08002651 	.word	0x08002651
 8002644:	080026d3 	.word	0x080026d3
 8002648:	080026e7 	.word	0x080026e7
 800264c:	080026d3 	.word	0x080026d3
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b09      	cmp	r3, #9
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 800265e:	7dbb      	ldrb	r3, [r7, #22]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01e      	beq.n	80026a2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002676:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	6899      	ldr	r1, [r3, #8]
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	460b      	mov	r3, r1
 800268a:	eef0 0a47 	vmov.f32	s1, s14
 800268e:	eeb0 0a67 	vmov.f32	s0, s15
 8002692:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff fdc1 	bl	800221c <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80026a0:	e063      	b.n	800276a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	460b      	mov	r3, r1
 80026b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff fda0 	bl	80021fe <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80026c4:	e051      	b.n	800276a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80026c6:	4838      	ldr	r0, [pc, #224]	; (80027a8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80026c8:	f000 fc9c 	bl	8003004 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80026cc:	f06f 0309 	mvn.w	r3, #9
 80026d0:	e064      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 80026d8:	4619      	mov	r1, r3
 80026da:	4834      	ldr	r0, [pc, #208]	; (80027ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 80026dc:	f000 fc92 	bl	8003004 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80026e0:	f06f 0309 	mvn.w	r3, #9
 80026e4:	e05a      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 80026ec:	4619      	mov	r1, r3
 80026ee:	4830      	ldr	r0, [pc, #192]	; (80027b0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 80026f0:	f000 fc88 	bl	8003004 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80026f4:	f06f 0309 	mvn.w	r3, #9
 80026f8:	e050      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8002700:	4619      	mov	r1, r3
 8002702:	482c      	ldr	r0, [pc, #176]	; (80027b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 8002704:	f000 fc7e 	bl	8003004 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002708:	f06f 0309 	mvn.w	r3, #9
 800270c:	e046      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b09      	cmp	r3, #9
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d018      	beq.n	8002754 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	ed93 7a03 	vldr	s14, [r3, #12]
 8002738:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800273c:	eef0 0a47 	vmov.f32	s1, s14
 8002740:	eeb0 0a67 	vmov.f32	s0, s15
 8002744:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fd7c 	bl	8002244 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 800274c:	4603      	mov	r3, r0
 800274e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002752:	e00a      	b.n	800276a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800275c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fdcc 	bl	80022fc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 800276a:	4813      	ldr	r0, [pc, #76]	; (80027b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 800276c:	f014 fd24 	bl	80171b8 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8002770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8002778:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800277c:	e00e      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800277e:	f00f fac1 	bl	8011d04 <_Z29ei_run_impulse_check_canceledv>
 8002782:	4603      	mov	r3, r0
 8002784:	f113 0f02 	cmn.w	r3, #2
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 8002794:	f06f 0301 	mvn.w	r3, #1
 8002798:	e000      	b.n	800279c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdb0      	pop	{r4, r5, r7, pc}
 80027a4:	0801ae8c 	.word	0x0801ae8c
 80027a8:	0801aeac 	.word	0x0801aeac
 80027ac:	0801af04 	.word	0x0801af04
 80027b0:	0801af54 	.word	0x0801af54
 80027b4:	0801afa4 	.word	0x0801afa4
 80027b8:	08001645 	.word	0x08001645

080027bc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80027bc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80027c0:	b09e      	sub	sp, #120	; 0x78
 80027c2:	af06      	add	r7, sp, #24
 80027c4:	6178      	str	r0, [r7, #20]
 80027c6:	6139      	str	r1, [r7, #16]
 80027c8:	60fa      	str	r2, [r7, #12]
 80027ca:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80027cc:	f00f faa2 	bl	8011d14 <_Z16ei_read_timer_usv>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80027d8:	4b7b      	ldr	r3, [pc, #492]	; (80029c8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027e0:	f107 0318 	add.w	r3, r7, #24
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fee4 	bl	80035b4 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80027ec:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80027f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027f4:	f107 0120 	add.w	r1, r7, #32
 80027f8:	f107 0318 	add.w	r3, r7, #24
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4603      	mov	r3, r0
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7ff fdc1 	bl	8002394 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8002818:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8002820:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8002824:	e0c5      	b.n	80029b2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	4618      	mov	r0, r3
 800282c:	f000 ff8b 	bl	8003746 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8002830:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b09      	cmp	r3, #9
 8002838:	d022      	beq.n	8002880 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 800283a:	2b09      	cmp	r3, #9
 800283c:	f300 8083 	bgt.w	8002946 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8002840:	2b01      	cmp	r3, #1
 8002842:	d002      	beq.n	800284a <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 8002844:	2b03      	cmp	r3, #3
 8002846:	d051      	beq.n	80028ec <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8002848:	e07d      	b.n	8002946 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800284a:	2300      	movs	r3, #0
 800284c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	6892      	ldr	r2, [r2, #8]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800285c:	429a      	cmp	r2, r3
 800285e:	d27b      	bcs.n	8002958 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8002878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287a:	3301      	adds	r3, #1
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287e:	e7e6      	b.n	800284e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8002880:	2300      	movs	r3, #0
 8002882:	65bb      	str	r3, [r7, #88]	; 0x58
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002892:	429a      	cmp	r2, r3
 8002894:	d262      	bcs.n	800295c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80028aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80028ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028b2:	eeb0 0a66 	vmov.f32	s0, s13
 80028b6:	f7fe ffc5 	bl	8001844 <_ZSt5roundf>
 80028ba:	eeb0 7a40 	vmov.f32	s14, s0
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d4:	4413      	add	r3, r2
 80028d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028da:	edc7 7a01 	vstr	s15, [r7, #4]
 80028de:	793a      	ldrb	r2, [r7, #4]
 80028e0:	b252      	sxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80028e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e6:	3301      	adds	r3, #1
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028ea:	e7cb      	b.n	8002884 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80028ec:	2300      	movs	r3, #0
 80028ee:	657b      	str	r3, [r7, #84]	; 0x54
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028fe:	429a      	cmp	r2, r3
 8002900:	d221      	bcs.n	8002946 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002916:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800291a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292e:	4413      	add	r3, r2
 8002930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002934:	edc7 7a01 	vstr	s15, [r7, #4]
 8002938:	793a      	ldrb	r2, [r7, #4]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	3301      	adds	r3, #1
 8002942:	657b      	str	r3, [r7, #84]	; 0x54
 8002944:	e7d4      	b.n	80028f0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	481f      	ldr	r0, [pc, #124]	; (80029cc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 800294e:	f000 fb59 	bl	8003004 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8002952:	f06f 040c 	mvn.w	r4, #12
 8002956:	e02c      	b.n	80029b2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 800295c:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 800295e:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 8002962:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002966:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002968:	7afb      	ldrb	r3, [r7, #11]
 800296a:	9305      	str	r3, [sp, #20]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	9304      	str	r3, [sp, #16]
 8002970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002972:	9303      	str	r3, [sp, #12]
 8002974:	9602      	str	r6, [sp, #8]
 8002976:	9001      	str	r0, [sp, #4]
 8002978:	9100      	str	r1, [sp, #0]
 800297a:	465a      	mov	r2, fp
 800297c:	4663      	mov	r3, ip
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff fe0e 	bl	80025a0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8002984:	4603      	mov	r3, r0
 8002986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 800298a:	f00f f9c3 	bl	8011d14 <_Z16ei_read_timer_usv>
 800298e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002992:	1a84      	subs	r4, r0, r2
 8002994:	eb61 0503 	sbc.w	r5, r1, r3
 8002998:	4622      	mov	r2, r4
 800299a:	462b      	mov	r3, r5
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80029a2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80029aa:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80029ae:	e000      	b.n	80029b2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80029b0:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80029b2:	f107 0318 	add.w	r3, r7, #24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fe11 	bl	80035de <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80029bc:	4623      	mov	r3, r4
 80029be:	4618      	mov	r0, r3
 80029c0:	3760      	adds	r7, #96	; 0x60
 80029c2:	46bd      	mov	sp, r7
 80029c4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80029c8:	08001645 	.word	0x08001645
 80029cc:	0801afd8 	.word	0x0801afd8

080029d0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80029d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029d4:	b0a1      	sub	sp, #132	; 0x84
 80029d6:	af06      	add	r7, sp, #24
 80029d8:	6178      	str	r0, [r7, #20]
 80029da:	6139      	str	r1, [r7, #16]
 80029dc:	60fa      	str	r2, [r7, #12]
 80029de:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 80029e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e4:	2100      	movs	r1, #0
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f016 fd1e 	bl	8019428 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80029f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fdda 	bl	80035b4 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8002a00:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002a04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7ff fcb7 	bl	8002394 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8002a2c:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8002a34:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8002a38:	e0c4      	b.n	8002bc4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8002a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b09      	cmp	r3, #9
 8002a40:	d002      	beq.n	8002a48 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002a42:	f06f 0408 	mvn.w	r4, #8
 8002a46:	e0bd      	b.n	8002bc4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8002a48:	f00f f964 	bl	8011d14 <_Z16ei_read_timer_usv>
 8002a4c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f107 0018 	add.w	r0, r7, #24
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	f7fe fe9e 	bl	800179e <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002a6c:	f107 0218 	add.w	r2, r7, #24
 8002a70:	eeb0 0a67 	vmov.f32	s0, s15
 8002a74:	460b      	mov	r3, r1
 8002a76:	6939      	ldr	r1, [r7, #16]
 8002a78:	6978      	ldr	r0, [r7, #20]
 8002a7a:	f7ff f8af 	bl	8001bdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 8002a7e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8002a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002a86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a88:	4856      	ldr	r0, [pc, #344]	; (8002be4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 8002a8a:	f000 fabb 	bl	8003004 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8002a8e:	f06f 0404 	mvn.w	r4, #4
 8002a92:	e092      	b.n	8002bba <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002a94:	f00f f936 	bl	8011d04 <_Z29ei_run_impulse_check_canceledv>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f113 0f02 	cmn.w	r3, #2
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 8002aaa:	f06f 0401 	mvn.w	r4, #1
 8002aae:	e084      	b.n	8002bba <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002ab0:	f00f f930 	bl	8011d14 <_Z16ei_read_timer_usv>
 8002ab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ab8:	ebb0 0802 	subs.w	r8, r0, r2
 8002abc:	eb61 0903 	sbc.w	r9, r1, r3
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f7fe f8e0 	bl	8000c9c <__aeabi_ldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02d      	beq.n	8002b48 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002af2:	4619      	mov	r1, r3
 8002af4:	483c      	ldr	r0, [pc, #240]	; (8002be8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8002af6:	f000 fa85 	bl	8003004 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	667b      	str	r3, [r7, #100]	; 0x64
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d21d      	bcs.n	8002b42 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b30:	f00f f902 	bl	8011d38 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8002b34:	482d      	ldr	r0, [pc, #180]	; (8002bec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 8002b36:	f000 fa65 	bl	8003004 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b40:	e7dd      	b.n	8002afe <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 8002b42:	482b      	ldr	r0, [pc, #172]	; (8002bf0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 8002b44:	f000 fa5e 	bl	8003004 <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8002b48:	f00f f8e4 	bl	8011d14 <_Z16ei_read_timer_usv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8002b54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b58:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b60:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8002b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fded 	bl	8003746 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8002b6c:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	9305      	str	r3, [sp, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	9304      	str	r3, [sp, #16]
 8002b76:	9203      	str	r2, [sp, #12]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	9202      	str	r2, [sp, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	9600      	str	r6, [sp, #0]
 8002b82:	4642      	mov	r2, r8
 8002b84:	464b      	mov	r3, r9
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff fd0a 	bl	80025a0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8002b92:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 8002b9a:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8002b9e:	e00c      	b.n	8002bba <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8002ba0:	f00f f8b8 	bl	8011d14 <_Z16ei_read_timer_usv>
 8002ba4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ba8:	1a84      	subs	r4, r0, r2
 8002baa:	eb61 0503 	sbc.w	r5, r1, r3
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 8002bb8:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8002bba:	f107 0318 	add.w	r3, r7, #24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fe17 	bl	80017f2 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8002bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fd08 	bl	80035de <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8002bce:	4623      	mov	r3, r4
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	376c      	adds	r7, #108	; 0x6c
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bda:	bf00      	nop
 8002bdc:	08001645 	.word	0x08001645
 8002be0:	20000030 	.word	0x20000030
 8002be4:	0801affc 	.word	0x0801affc
 8002be8:	0801b024 	.word	0x0801b024
 8002bec:	0801b038 	.word	0x0801b038
 8002bf0:	0801ab54 	.word	0x0801ab54

08002bf4 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff fdd7 	bl	80027bc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8002c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <run_inference+0x2c>
        return nn_res;
 8002c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1e:	e00e      	b.n	8002c3e <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002c20:	f00f f870 	bl	8011d04 <_Z29ei_run_impulse_check_canceledv>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f113 0f02 	cmn.w	r3, #2
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8002c36:	f06f 0301 	mvn.w	r3, #1
 8002c3a:	e000      	b.n	8002c3e <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3310      	adds	r3, #16
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fe6c 	bl	8001930 <_ZN2ei11ei_signal_tD1Ev>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8002c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c68:	b0a5      	sub	sp, #148	; 0x94
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	70fb      	strb	r3, [r7, #3]
 8002c74:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f928 	bl	8002ecc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f954 	bl	8002f40 <run_classifier_image_quantized>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461e      	mov	r6, r3
 8002c9c:	e0ef      	b.n	8002e7e <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8002c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f016 fbbf 	bl	8019428 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	f7fe fd31 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8002cba:	f00f f82b 	bl	8011d14 <_Z16ei_read_timer_usv>
 8002cbe:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d27c      	bcs.n	8002dd4 <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8002cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d00:	441a      	add	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d905      	bls.n	8002d16 <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8002d0a:	4860      	ldr	r0, [pc, #384]	; (8002e8c <process_impulse+0x228>)
 8002d0c:	f000 f97a 	bl	8003004 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8002d10:	f06f 0604 	mvn.w	r6, #4
 8002d14:	e0ad      	b.n	8002e72 <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8002d16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002d26:	460a      	mov	r2, r1
 8002d28:	2101      	movs	r1, #1
 8002d2a:	f7fe fcf7 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8002d2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d32:	f107 0014 	add.w	r0, r7, #20
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	f7ff f9a9 	bl	8002094 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8002d42:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f9d3 	bl	80020f4 <_ZN14SignalWithAxes10get_signalEv>
 8002d4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5e:	4619      	mov	r1, r3
 8002d60:	47a0      	blx	r4
 8002d62:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002d6a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002d6c:	4848      	ldr	r0, [pc, #288]	; (8002e90 <process_impulse+0x22c>)
 8002d6e:	f000 f949 	bl	8003004 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8002d72:	f06f 0604 	mvn.w	r6, #4
 8002d76:	2400      	movs	r4, #0
 8002d78:	e015      	b.n	8002da6 <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002d7a:	f00e ffc3 	bl	8011d04 <_Z29ei_run_impulse_check_canceledv>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f113 0f02 	cmn.w	r3, #2
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8002d90:	f06f 0601 	mvn.w	r6, #1
 8002d94:	2400      	movs	r4, #0
 8002d96:	e006      	b.n	8002da6 <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8002d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d9e:	4413      	add	r3, r2
 8002da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002da4:	2401      	movs	r4, #1
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff4b 	bl	8002c46 <_ZN14SignalWithAxesD1Ev>
 8002db0:	2c01      	cmp	r4, #1
 8002db2:	d001      	beq.n	8002db8 <process_impulse+0x154>
 8002db4:	2400      	movs	r4, #0
 8002db6:	e000      	b.n	8002dba <process_impulse+0x156>
 8002db8:	2401      	movs	r4, #1
 8002dba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fcd7 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8002dc4:	2c01      	cmp	r4, #1
 8002dc6:	d154      	bne.n	8002e72 <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd2:	e77c      	b.n	8002cce <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002dd4:	f00e ff9e 	bl	8011d14 <_Z16ei_read_timer_usv>
 8002dd8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ddc:	ebb0 0802 	subs.w	r8, r0, r2
 8002de0:	eb61 0903 	sbc.w	r9, r1, r3
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f7fd ff4e 	bl	8000c9c <__aeabi_ldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e16:	4619      	mov	r1, r3
 8002e18:	481e      	ldr	r0, [pc, #120]	; (8002e94 <process_impulse+0x230>)
 8002e1a:	f000 f8f3 	bl	8003004 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002e1e:	2300      	movs	r3, #0
 8002e20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d210      	bcs.n	8002e4c <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8002e2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	f00e ff7d 	bl	8011d38 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8002e3e:	4816      	ldr	r0, [pc, #88]	; (8002e98 <process_impulse+0x234>)
 8002e40:	f000 f8e0 	bl	8003004 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002e44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e46:	3301      	adds	r3, #1
 8002e48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e4a:	e7ea      	b.n	8002e22 <process_impulse+0x1be>
        }
        ei_printf("\n");
 8002e4c:	4813      	ldr	r0, [pc, #76]	; (8002e9c <process_impulse+0x238>)
 8002e4e:	f000 f8d9 	bl	8003004 <_Z9ei_printfPKcz>
    }

    if (debug) {
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8002e58:	4811      	ldr	r0, [pc, #68]	; (8002ea0 <process_impulse+0x23c>)
 8002e5a:	f000 f8d3 	bl	8003004 <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fec4 	bl	8002bf4 <run_inference>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461e      	mov	r6, r3
 8002e70:	e000      	b.n	8002e74 <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8002e72:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8002e74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fc7a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>

}
 8002e7e:	4633      	mov	r3, r6
 8002e80:	4618      	mov	r0, r3
 8002e82:	378c      	adds	r7, #140	; 0x8c
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	0801b03c 	.word	0x0801b03c
 8002e90:	0801affc 	.word	0x0801affc
 8002e94:	0801b024 	.word	0x0801b024
 8002e98:	0801b038 	.word	0x0801b038
 8002e9c:	0801ab54 	.word	0x0801ab54
 8002ea0:	0801b068 	.word	0x0801b068

08002ea4 <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <ei_construct_impulse+0x24>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	23a4      	movs	r3, #164	; 0xa4
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f016 fa8e 	bl	80193d8 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8002ebc:	bf00      	nop
}
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	0801b0e0 	.word	0x0801b0e0

08002ecc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d00a      	beq.n	8002ef2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d006      	beq.n	8002ef2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d002      	beq.n	8002ef2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002eec:	f06f 0309 	mvn.w	r3, #9
 8002ef0:	e01d      	b.n	8002f2e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002efc:	f06f 0308 	mvn.w	r3, #8
 8002f00:	e015      	b.n	8002f2e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d002      	beq.n	8002f12 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002f0c:	f06f 0308 	mvn.w	r3, #8
 8002f10:	e00d      	b.n	8002f2e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d002      	beq.n	8002f2c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002f26:	f06f 0308 	mvn.w	r3, #8
 8002f2a:	e000      	b.n	8002f2e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	08001a09 	.word	0x08001a09

08002f40 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff ffbc 	bl	8002ecc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8002f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <run_classifier_image_quantized+0x26>
        return verify_res;
 8002f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f64:	e00d      	b.n	8002f82 <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8002f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f016 fa5b 	bl	8019428 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fd29 	bl	80029d0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	bf00      	nop

}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b0ae      	sub	sp, #184	; 0xb8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff81 	bl	8002ea4 <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f107 0014 	add.w	r0, r7, #20
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	f7ff fe5a 	bl	8002c64 <process_impulse>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	37b8      	adds	r7, #184	; 0xb8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_Z6vprintPKcSt9__va_list>:
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void vprint(const char *fmt, va_list argp)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b0b4      	sub	sp, #208	; 0xd0
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp))
 8002fc4:	f107 0308 	add.w	r3, r7, #8
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f016 fe81 	bl	8019cd4 <vsiprintf>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bfcc      	ite	gt
 8002fd8:	2301      	movgt	r3, #1
 8002fda:	2300      	movle	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <_Z6vprintPKcSt9__va_list+0x42>
    {
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd f94c 	bl	8000284 <strlen>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f014 fa04 	bl	8017404 <CDC_Transmit_FS>
    }
}
 8002ffc:	bf00      	nop
 8002ffe:	37d0      	adds	r7, #208	; 0xd0
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8003004:	b40f      	push	{r0, r1, r2, r3}
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	6938      	ldr	r0, [r7, #16]
 8003016:	f7ff ffd0 	bl	8002fba <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003024:	b004      	add	sp, #16
 8003026:	4770      	bx	lr

08003028 <_Z16get_feature_datajjPf>:
using namespace ei;

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE];// make feature size equal to input frame size

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <_Z16get_feature_datajjPf+0x2c>)
 800303a:	1899      	adds	r1, r3, r2
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	461a      	mov	r2, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f016 f9c8 	bl	80193d8 <memcpy>
    return 0;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000039c 	.word	0x2000039c

08003058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b0ca      	sub	sp, #296	; 0x128
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800305e:	f001 fabf 	bl	80045e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003062:	f000 f913 	bl	800328c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003066:	f000 f9db 	bl	8003420 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800306a:	f000 f99d 	bl	80033a8 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 800306e:	f014 f90b 	bl	8017288 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8003072:	f000 f981 	bl	8003378 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 800307c:	2308      	movs	r3, #8
 800307e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8003082:	2307      	movs	r3, #7
 8003084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8003094:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003098:	4619      	mov	r1, r3
 800309a:	486b      	ldr	r0, [pc, #428]	; (8003248 <main+0x1f0>)
 800309c:	f7fe f874 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 80030a0:	eddf 0a6a 	vldr	s1, [pc, #424]	; 800324c <main+0x1f4>
 80030a4:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8003250 <main+0x1f8>
 80030a8:	f7fe f9f4 	bl	8001494 <_Z19LIS3DSH_X_calibrateff>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 80030ac:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003254 <main+0x1fc>
 80030b0:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8003258 <main+0x200>
 80030b4:	f7fe fa1c 	bl	80014f0 <_Z19LIS3DSH_Y_calibrateff>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 80030b8:	eddf 0a66 	vldr	s1, [pc, #408]	; 8003254 <main+0x1fc>
 80030bc:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800325c <main+0x204>
 80030c0:	f7fe fa44 	bl	800154c <_Z19LIS3DSH_Z_calibrateff>
	signal_t signal;
 80030c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fc24 	bl	8001916 <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 80030ce:	231e      	movs	r3, #30
 80030d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 80030d4:	4b62      	ldr	r3, [pc, #392]	; (8003260 <main+0x208>)
 80030d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030da:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80030de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 faef 	bl	80036c8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  do {
	    if (drdyFlag == 1) {
 80030ea:	4b5e      	ldr	r3, [pc, #376]	; (8003264 <main+0x20c>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d143      	bne.n	800317a <main+0x122>
	      drdyFlag = 0;
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <main+0x20c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
	      myData = LIS3DSH_GetDataScaled();
 80030f8:	f7fe f94a 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 80030fc:	eef0 6a40 	vmov.f32	s13, s0
 8003100:	eeb0 7a60 	vmov.f32	s14, s1
 8003104:	eef0 7a41 	vmov.f32	s15, s2
 8003108:	4b57      	ldr	r3, [pc, #348]	; (8003268 <main+0x210>)
 800310a:	edc3 6a00 	vstr	s13, [r3]
 800310e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003112:	edc3 7a02 	vstr	s15, [r3, #8]
	      features[3 * countt] = myData.x;
 8003116:	4b55      	ldr	r3, [pc, #340]	; (800326c <main+0x214>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	4a51      	ldr	r2, [pc, #324]	; (8003268 <main+0x210>)
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4952      	ldr	r1, [pc, #328]	; (8003270 <main+0x218>)
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	601a      	str	r2, [r3, #0]
	      features[3 * countt + 1] = myData.y;
 800312c:	4b4f      	ldr	r3, [pc, #316]	; (800326c <main+0x214>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	3301      	adds	r3, #1
 8003138:	4a4b      	ldr	r2, [pc, #300]	; (8003268 <main+0x210>)
 800313a:	6852      	ldr	r2, [r2, #4]
 800313c:	494c      	ldr	r1, [pc, #304]	; (8003270 <main+0x218>)
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	601a      	str	r2, [r3, #0]
	      features[3 * countt + 2] = myData.z;
 8003144:	4b49      	ldr	r3, [pc, #292]	; (800326c <main+0x214>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	3302      	adds	r3, #2
 8003150:	4a45      	ldr	r2, [pc, #276]	; (8003268 <main+0x210>)
 8003152:	6892      	ldr	r2, [r2, #8]
 8003154:	4946      	ldr	r1, [pc, #280]	; (8003270 <main+0x218>)
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	601a      	str	r2, [r3, #0]
	      countt++;
 800315c:	4b43      	ldr	r3, [pc, #268]	; (800326c <main+0x214>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a42      	ldr	r2, [pc, #264]	; (800326c <main+0x214>)
 8003164:	6013      	str	r3, [r2, #0]
	      if (countt == EI_CLASSIFIER_RAW_SAMPLE_COUNT) {
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <main+0x214>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d105      	bne.n	800317a <main+0x122>
	        countt = 0;
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <main+0x214>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
	        featurestate = true;
 8003174:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <main+0x21c>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
	      }
	    }
	  } while (featurestate == false);// fill feature till feature is full
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <main+0x21c>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d100      	bne.n	8003184 <main+0x12c>
	  do {
 8003182:	e7b2      	b.n	80030ea <main+0x92>
	  ei_impulse_result_t result = { 0 };
 8003184:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003188:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800318c:	4618      	mov	r0, r3
 800318e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003192:	461a      	mov	r2, r3
 8003194:	2100      	movs	r1, #0
 8003196:	f016 f947 	bl	8019428 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 800319a:	4639      	mov	r1, r7
 800319c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031a0:	2201      	movs	r2, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fef1 	bl	8002f8a <run_classifier>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("run_classifier returned: %d\n", res);
 80031ae:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 80031b2:	4619      	mov	r1, r3
 80031b4:	4830      	ldr	r0, [pc, #192]	; (8003278 <main+0x220>)
 80031b6:	f7ff ff25 	bl	8003004 <_Z9ei_printfPKcz>

	  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 80031ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80031be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031c2:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80031c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80031ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80031d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031de:	4827      	ldr	r0, [pc, #156]	; (800327c <main+0x224>)
 80031e0:	f7ff ff10 	bl	8003004 <_Z9ei_printfPKcz>
	  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 80031e4:	4826      	ldr	r0, [pc, #152]	; (8003280 <main+0x228>)
 80031e6:	f7ff ff0d 	bl	8003004 <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d81c      	bhi.n	8003232 <main+0x1da>
	  	    	  ei_printf_float(result.classification[ix].value);
 80031f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80031fc:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003200:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003204:	3301      	adds	r3, #1
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eeb0 0a67 	vmov.f32	s0, s15
 8003214:	f00e fd90 	bl	8011d38 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
	  	  #else
	  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8003218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800321c:	2b03      	cmp	r3, #3
 800321e:	d002      	beq.n	8003226 <main+0x1ce>
	  	              ei_printf(", ");
 8003220:	4818      	ldr	r0, [pc, #96]	; (8003284 <main+0x22c>)
 8003222:	f7ff feef 	bl	8003004 <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003226:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800322a:	3301      	adds	r3, #1
 800322c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003230:	e7de      	b.n	80031f0 <main+0x198>
	  	  #endif
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	      ei_printf_float(result.anomaly);
	  	  #endif
	  	      ei_printf("]\n\n\n");
 8003232:	4815      	ldr	r0, [pc, #84]	; (8003288 <main+0x230>)
 8003234:	f7ff fee6 	bl	8003004 <_Z9ei_printfPKcz>

	  HAL_Delay(1500);
 8003238:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800323c:	f001 fa42 	bl	80046c4 <HAL_Delay>
	  featurestate=false;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <main+0x21c>)
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]

  }
 8003246:	e750      	b.n	80030ea <main+0x92>
 8003248:	20000344 	.word	0x20000344
 800324c:	44750000 	.word	0x44750000
 8003250:	c47a0000 	.word	0xc47a0000
 8003254:	44820000 	.word	0x44820000
 8003258:	c47f0000 	.word	0xc47f0000
 800325c:	c4660000 	.word	0xc4660000
 8003260:	08003029 	.word	0x08003029
 8003264:	20000420 	.word	0x20000420
 8003268:	20000414 	.word	0x20000414
 800326c:	20000424 	.word	0x20000424
 8003270:	2000039c 	.word	0x2000039c
 8003274:	20000421 	.word	0x20000421
 8003278:	0801b1b0 	.word	0x0801b1b0
 800327c:	0801b1d0 	.word	0x0801b1d0
 8003280:	0801b218 	.word	0x0801b218
 8003284:	0801b21c 	.word	0x0801b21c
 8003288:	0801b220 	.word	0x0801b220

0800328c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b094      	sub	sp, #80	; 0x50
 8003290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003292:	f107 0320 	add.w	r3, r7, #32
 8003296:	2230      	movs	r2, #48	; 0x30
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f016 f8c4 	bl	8019428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <_Z18SystemClock_Configv+0xe4>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <_Z18SystemClock_Configv+0xe4>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <_Z18SystemClock_Configv+0xe4>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	4b28      	ldr	r3, [pc, #160]	; (8003374 <_Z18SystemClock_Configv+0xe8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a27      	ldr	r2, [pc, #156]	; (8003374 <_Z18SystemClock_Configv+0xe8>)
 80032d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b25      	ldr	r3, [pc, #148]	; (8003374 <_Z18SystemClock_Configv+0xe8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80032e8:	2303      	movs	r3, #3
 80032ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032f2:	2301      	movs	r3, #1
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032f6:	2310      	movs	r3, #16
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032fa:	2302      	movs	r3, #2
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003304:	2304      	movs	r3, #4
 8003306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003308:	2348      	movs	r3, #72	; 0x48
 800330a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800330c:	2302      	movs	r3, #2
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003310:	2303      	movs	r3, #3
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003314:	f107 0320 	add.w	r3, r7, #32
 8003318:	4618      	mov	r0, r3
 800331a:	f002 ff71 	bl	8006200 <HAL_RCC_OscConfig>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800332e:	f000 f92d 	bl	800358c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003332:	230f      	movs	r3, #15
 8003334:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f003 f9cf 	bl	80066f0 <HAL_RCC_ClockConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8003362:	f000 f913 	bl	800358c <Error_Handler>
  }
}
 8003366:	bf00      	nop
 8003368:	3750      	adds	r7, #80	; 0x50
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000

08003378 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <_ZL11MX_CRC_Initv+0x28>)
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <_ZL11MX_CRC_Initv+0x2c>)
 8003380:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <_ZL11MX_CRC_Initv+0x28>)
 8003384:	f001 fad3 	bl	800492e <HAL_CRC_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8003398:	f000 f8f8 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	2000033c 	.word	0x2000033c
 80033a4:	40023000 	.word	0x40023000

080033a8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <_ZL12MX_SPI1_Initv+0x74>)
 80033b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033dc:	2210      	movs	r2, #16
 80033de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033f4:	220a      	movs	r2, #10
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033f8:	4807      	ldr	r0, [pc, #28]	; (8003418 <_ZL12MX_SPI1_Initv+0x70>)
 80033fa:	f003 fb71 	bl	8006ae0 <HAL_SPI_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800340e:	f000 f8bd 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000344 	.word	0x20000344
 800341c:	40013000 	.word	0x40013000

08003420 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b48      	ldr	r3, [pc, #288]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a47      	ldr	r2, [pc, #284]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003440:	f043 0310 	orr.w	r3, r3, #16
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b45      	ldr	r3, [pc, #276]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a40      	ldr	r2, [pc, #256]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a39      	ldr	r2, [pc, #228]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a32      	ldr	r2, [pc, #200]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a2b      	ldr	r2, [pc, #172]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <_ZL12MX_GPIO_Initv+0x13c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2108      	movs	r1, #8
 80034c6:	4826      	ldr	r0, [pc, #152]	; (8003560 <_ZL12MX_GPIO_Initv+0x140>)
 80034c8:	f001 fbea 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80034d2:	4824      	ldr	r0, [pc, #144]	; (8003564 <_ZL12MX_GPIO_Initv+0x144>)
 80034d4:	f001 fbe4 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 80034d8:	2308      	movs	r3, #8
 80034da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034dc:	2301      	movs	r3, #1
 80034de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4619      	mov	r1, r3
 80034ee:	481c      	ldr	r0, [pc, #112]	; (8003560 <_ZL12MX_GPIO_Initv+0x140>)
 80034f0:	f001 fa3a 	bl	8004968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034f4:	2301      	movs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	4619      	mov	r1, r3
 8003506:	4818      	ldr	r0, [pc, #96]	; (8003568 <_ZL12MX_GPIO_Initv+0x148>)
 8003508:	f001 fa2e 	bl	8004968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800350c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800351e:	f107 0314 	add.w	r3, r7, #20
 8003522:	4619      	mov	r1, r3
 8003524:	480f      	ldr	r0, [pc, #60]	; (8003564 <_ZL12MX_GPIO_Initv+0x144>)
 8003526:	f001 fa1f 	bl	8004968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800352e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4619      	mov	r1, r3
 800353e:	4808      	ldr	r0, [pc, #32]	; (8003560 <_ZL12MX_GPIO_Initv+0x140>)
 8003540:	f001 fa12 	bl	8004968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003544:	2200      	movs	r2, #0
 8003546:	2100      	movs	r1, #0
 8003548:	2006      	movs	r0, #6
 800354a:	f001 f9ba 	bl	80048c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800354e:	2006      	movs	r0, #6
 8003550:	f001 f9d3 	bl	80048fa <HAL_NVIC_EnableIRQ>

}
 8003554:	bf00      	nop
 8003556:	3728      	adds	r7, #40	; 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	40021000 	.word	0x40021000
 8003564:	40020c00 	.word	0x40020c00
 8003568:	40020000 	.word	0x40020000

0800356c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  drdyFlag = 1;
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000420 	.word	0x20000420

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003590:	e7fe      	b.n	8003590 <Error_Handler+0x4>

08003592 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f907 	bl	80037b8 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 80035c0:	68fc      	ldr	r4, [r7, #12]
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8ed 	bl	80037a2 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7ff ffdf 	bl	8003592 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}

080035de <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80035de:	b590      	push	{r4, r7, lr}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f8fb 	bl	80037e4 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80035ee:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f900 	bl	80037fe <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 80035fe:	4603      	mov	r3, r0
 8003600:	681c      	ldr	r4, [r3, #0]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f908 	bl	8003818 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8003608:	4603      	mov	r3, r0
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	47a0      	blx	r4
	__ptr = pointer();
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
      }
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}

08003620 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	ed93 7a00 	vldr	s14, [r3]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363e:	d501      	bpl.n	8003644 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	e000      	b.n	8003646 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8003644:	687b      	ldr	r3, [r7, #4]
    }
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8003652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe f848 	bl	80016fa <_ZNKSt14_Function_base8_M_emptyEv>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8003670:	f7fe f8d5 	bl	800181e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68dc      	ldr	r4, [r3, #12]
 8003678:	68fd      	ldr	r5, [r7, #12]
 800367a:	f107 0308 	add.w	r3, r7, #8
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f8d5 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003684:	4606      	mov	r6, r0
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f8d0 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800368e:	4680      	mov	r8, r0
 8003690:	463b      	mov	r3, r7
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f8d6 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003698:	4603      	mov	r3, r0
 800369a:	4642      	mov	r2, r8
 800369c:	4631      	mov	r1, r6
 800369e:	4628      	mov	r0, r5
 80036a0:	47a0      	blx	r4
 80036a2:	4603      	mov	r3, r0
    }
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036ae <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd fffd 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80036d2:	6838      	ldr	r0, [r7, #0]
 80036d4:	f000 f8c1 	bl	800385a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 80036d8:	4603      	mov	r3, r0
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8c4 	bl	8003870 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f836 	bl	8003760 <_ZNSt8functionIFijjPfEE4swapERS2_>
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe f8ff 	bl	80018fc <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 80036fe:	687b      	ldr	r3, [r7, #4]
	}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f000 f8d6 	bl	80038c4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8003718:	4602      	mov	r2, r0
 800371a:	f107 0308 	add.w	r3, r7, #8
 800371e:	6811      	ldr	r1, [r2, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f8db 	bl	80038dc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f817 	bl	8003760 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe f8e0 	bl	80018fc <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800373c:	687b      	ldr	r3, [r7, #4]
	}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f8ed 	bl	8003930 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8003756:	4603      	mov	r3, r0
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f8f6 	bl	8003962 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f103 0208 	add.w	r2, r3, #8
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	3308      	adds	r3, #8
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 f91f 	bl	80039c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f103 020c 	add.w	r2, r3, #12
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f000 f940 	bl	8003a1a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80037c4:	68fc      	ldr	r4, [r7, #12]
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f946 	bl	8003a58 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	4619      	mov	r1, r3
 80037d4:	4620      	mov	r0, r4
 80037d6:	f000 f94a 	bl	8003a6e <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f956 	bl	8003aa0 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f956 	bl	8003aba <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd ff1b 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f925 	bl	8003ad4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003890:	687c      	ldr	r4, [r7, #4]
 8003892:	463b      	mov	r3, r7
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f92d 	bl	8003af4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800389a:	4603      	mov	r3, r0
 800389c:	4619      	mov	r1, r3
 800389e:	4620      	mov	r0, r4
 80038a0:	f000 f933 	bl	8003b0a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80038a8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80038ae:	609a      	str	r2, [r3, #8]
      }
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08003b2f 	.word	0x08003b2f
 80038c0:	08003b71 	.word	0x08003b71

080038c4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fee5 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80038ee:	463b      	mov	r3, r7
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f95c 	bl	8003bae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80038fc:	687c      	ldr	r4, [r7, #4]
 80038fe:	463b      	mov	r3, r7
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f95f 	bl	8003bc4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8003906:	4603      	mov	r3, r0
 8003908:	4619      	mov	r1, r3
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f965 	bl	8003bda <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8003914:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 800391a:	609a      	str	r2, [r3, #8]
      }
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bd90      	pop	{r4, r7, pc}
 8003926:	bf00      	nop
 8003928:	08003bff 	.word	0x08003bff
 800392c:	08003c41 	.word	0x08003c41

08003930 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f99f 	bl	8003c7e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8003940:	4603      	mov	r3, r0
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ffed 	bl	800394c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003972:	4602      	mov	r2, r0
 8003974:	f107 0308 	add.w	r3, r7, #8
 8003978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800397c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8003980:	6838      	ldr	r0, [r7, #0]
 8003982:	f7ff ffe3 	bl	800394c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800398e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ffd8 	bl	800394c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800399c:	4602      	mov	r2, r0
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ffed 	bl	80039b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f7ff ffe7 	bl	80039b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80039e2:	4603      	mov	r3, r0
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ffde 	bl	80039b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80039f4:	4603      	mov	r3, r0
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	601a      	str	r2, [r3, #0]
    }
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ffed 	bl	8003a04 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003a30:	6838      	ldr	r0, [r7, #0]
 8003a32:	f7ff ffe7 	bl	8003a04 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003a36:	4603      	mov	r3, r0
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ffde 	bl	8003a04 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	601a      	str	r2, [r3, #0]
    }
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8003a6e:	b5b0      	push	{r4, r5, r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8003a7a:	68fc      	ldr	r4, [r7, #12]
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f000 f90b 	bl	8003c98 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a82:	4605      	mov	r5, r0
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ffe7 	bl	8003a58 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4620      	mov	r0, r4
 8003a92:	f000 f90c 	bl	8003cae <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}

08003aa0 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f91d 	bl	8003cea <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f91c 	bl	8003d02 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003b0a:	b590      	push	{r4, r7, lr}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003b14:	6838      	ldr	r0, [r7, #0]
 8003b16:	f7ff ffed 	bl	8003af4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8fb 	bl	8003d1c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd90      	pop	{r4, r7, pc}

08003b2e <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f906 	bl	8003d4e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8003b42:	4604      	mov	r4, r0
 8003b44:	68b8      	ldr	r0, [r7, #8]
 8003b46:	f7ff fe72 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fe6e 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003b52:	4606      	mov	r6, r0
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	f7ff fe75 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	4629      	mov	r1, r5
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 f905 	bl	8003d70 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8003b66:	4603      	mov	r3, r0
      }
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b70 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d109      	bne.n	8003b98 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f918 	bl	8003dba <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	f000 f8de 	bl	8003d4e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8003b92:	4603      	mov	r3, r0
 8003b94:	6023      	str	r3, [r4, #0]
	    break;
 8003b96:	e005      	b.n	8003ba4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f917 	bl	8003dd2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8003ba4:	2300      	movs	r3, #0
      }
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd90      	pop	{r4, r7, pc}

08003bae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
	  { return true; }
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003bda:	b590      	push	{r4, r7, lr}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f7ff ffed 	bl	8003bc4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4622      	mov	r2, r4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f919 	bl	8003e28 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}

08003bfe <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f924 	bl	8003e5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003c12:	4604      	mov	r4, r0
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f7ff fe0a 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe06 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003c22:	4606      	mov	r6, r0
 8003c24:	6838      	ldr	r0, [r7, #0]
 8003c26:	f7ff fe0d 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4620      	mov	r0, r4
 8003c32:	f000 f923 	bl	8003e7c <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8003c36:	4603      	mov	r3, r0
      }
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c40 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d109      	bne.n	8003c68 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f936 	bl	8003ec6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	68b8      	ldr	r0, [r7, #8]
 8003c5e:	f000 f8fc 	bl	8003e5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003c62:	4603      	mov	r3, r0
 8003c64:	6023      	str	r3, [r4, #0]
	    break;
 8003c66:	e005      	b.n	8003c74 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f935 	bl	8003ede <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8003c74:	2300      	movs	r3, #0
      }
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}

08003c7e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f953 	bl	8003f34 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8003cae:	b590      	push	{r4, r7, lr}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8003cba:	68fc      	ldr	r4, [r7, #12]
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fecb 	bl	8003a58 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f000 f940 	bl	8003f4c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1d1c      	adds	r4, r3, #4
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f7ff ffe1 	bl	8003c98 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 f949 	bl	8003f72 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}

08003cea <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f94e 	bl	8003f94 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f94f 	bl	8003fb0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8003d28:	68b8      	ldr	r0, [r7, #8]
 8003d2a:	f7ff fee3 	bl	8003af4 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	681c      	ldr	r4, [r3, #0]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7fd fcaa 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	2004      	movs	r0, #4
 8003d3e:	f7fd fc33 	bl	80015a8 <_ZnwjPv>
 8003d42:	4603      	mov	r3, r0
 8003d44:	601c      	str	r4, [r3, #0]
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}

08003d4e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f936 	bl	8003fc8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8003d5c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f93e 	bl	8003fe0 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8003d64:	4603      	mov	r3, r0
 8003d66:	bf00      	nop
	}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f938 	bl	8003ff6 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003d86:	4604      	mov	r4, r0
 8003d88:	68b8      	ldr	r0, [r7, #8]
 8003d8a:	f7ff fd50 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003d8e:	4605      	mov	r5, r0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fd4c 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003d96:	4606      	mov	r6, r0
 8003d98:	6838      	ldr	r0, [r7, #0]
 8003d9a:	f7ff fd53 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4633      	mov	r3, r6
 8003da4:	462a      	mov	r2, r5
 8003da6:	4621      	mov	r1, r4
 8003da8:	4640      	mov	r0, r8
 8003daa:	f000 f92f 	bl	800400c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8003dae:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003dba <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fc62 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003dd2:	b5b0      	push	{r4, r5, r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d016      	beq.n	8003e14 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	dc19      	bgt.n	8003e1e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d002      	beq.n	8003df4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d00a      	beq.n	8003e08 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8003df2:	e014      	b.n	8003e1e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff ffe0 	bl	8003dba <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	68b8      	ldr	r0, [r7, #8]
 8003dfe:	f7ff ffa6 	bl	8003d4e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8003e02:	4603      	mov	r3, r0
 8003e04:	6023      	str	r3, [r4, #0]
	      break;
 8003e06:	e00a      	b.n	8003e1e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003e08:	462a      	mov	r2, r5
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f921 	bl	8004054 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8003e12:	e004      	b.n	8003e1e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8003e14:	4621      	mov	r1, r4
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f935 	bl	8004086 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003e1c:	bf00      	nop
	  return false;
 8003e1e:	2300      	movs	r3, #0
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bdb0      	pop	{r4, r5, r7, pc}

08003e28 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8003e34:	68b8      	ldr	r0, [r7, #8]
 8003e36:	f7ff fec5 	bl	8003bc4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7fd fc25 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4619      	mov	r1, r3
 8003e46:	2004      	movs	r0, #4
 8003e48:	f7fd fbae 	bl	80015a8 <_ZnwjPv>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}

08003e5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f91b 	bl	800409e <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8003e68:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f923 	bl	80040b6 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8003e70:	4603      	mov	r3, r0
 8003e72:	bf00      	nop
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af02      	add	r7, sp, #8
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f91d 	bl	80040cc <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8003e92:	4604      	mov	r4, r0
 8003e94:	68b8      	ldr	r0, [r7, #8]
 8003e96:	f7ff fcca 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003e9a:	4605      	mov	r5, r0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fcc6 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	6838      	ldr	r0, [r7, #0]
 8003ea6:	f7ff fccd 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4633      	mov	r3, r6
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f000 f914 	bl	80040e2 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8003eba:	4603      	mov	r3, r0
    }
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ec6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fbdc 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003ede:	b5b0      	push	{r4, r5, r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d016      	beq.n	8003f20 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	dc19      	bgt.n	8003f2a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d002      	beq.n	8003f00 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d00a      	beq.n	8003f14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8003efe:	e014      	b.n	8003f2a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff ffe0 	bl	8003ec6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8003f06:	4604      	mov	r4, r0
 8003f08:	68b8      	ldr	r0, [r7, #8]
 8003f0a:	f7ff ffa6 	bl	8003e5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6023      	str	r3, [r4, #0]
	      break;
 8003f12:	e00a      	b.n	8003f2a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003f14:	462a      	mov	r2, r5
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f906 	bl	800412a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8003f1e:	e004      	b.n	8003f2a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8003f20:	4621      	mov	r1, r4
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f91a 	bl	800415c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003f28:	bf00      	nop
	  return false;
 8003f2a:	2300      	movs	r3, #0
	}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bdb0      	pop	{r4, r5, r7, pc}

08003f34 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f919 	bl	8004174 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8003f56:	687c      	ldr	r4, [r7, #4]
 8003f58:	6838      	ldr	r0, [r7, #0]
 8003f5a:	f7ff fd7d 	bl	8003a58 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4619      	mov	r1, r3
 8003f62:	4620      	mov	r0, r4
 8003f64:	f000 f914 	bl	8004190 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd90      	pop	{r4, r7, pc}

08003f72 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003f7c:	6838      	ldr	r0, [r7, #0]
 8003f7e:	f7ff fe8b 	bl	8003c98 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003f82:	4603      	mov	r3, r0
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 f906 	bl	80041b2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f905 	bl	80041c8 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fd fb66 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	7338      	strb	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800401a:	68b8      	ldr	r0, [r7, #8]
 800401c:	f7ff ffeb 	bl	8003ff6 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004020:	4603      	mov	r3, r0
 8004022:	681c      	ldr	r4, [r3, #0]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fc02 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800402a:	4603      	mov	r3, r0
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f7ff fbfd 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004034:	4603      	mov	r3, r0
 8004036:	681e      	ldr	r6, [r3, #0]
 8004038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800403a:	f7ff fc03 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800403e:	4603      	mov	r3, r0
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47a0      	blx	r4
 800404a:	4603      	mov	r3, r0
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004054 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f7ff ffb1 	bl	8003fc8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004066:	4603      	mov	r3, r0
 8004068:	681c      	ldr	r4, [r3, #0]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7fd fb0e 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004070:	4603      	mov	r3, r0
 8004072:	4619      	mov	r1, r3
 8004074:	2004      	movs	r0, #4
 8004076:	f7fd fa97 	bl	80015a8 <_ZnwjPv>
 800407a:	4603      	mov	r3, r0
 800407c:	601c      	str	r4, [r3, #0]
	}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}

08004086 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8a6 	bl	80041e2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd fafb 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80040e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	7338      	strb	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80040f0:	68b8      	ldr	r0, [r7, #8]
 80040f2:	f7ff ffeb 	bl	80040cc <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80040f6:	4606      	mov	r6, r0
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fb98 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80040fe:	4603      	mov	r3, r0
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f7ff fb93 	bl	800382e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004108:	4603      	mov	r3, r0
 800410a:	681d      	ldr	r5, [r3, #0]
 800410c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410e:	f7ff fb99 	bl	8003844 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004112:	4603      	mov	r3, r0
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	462a      	mov	r2, r5
 8004118:	4621      	mov	r1, r4
 800411a:	4630      	mov	r0, r6
 800411c:	f7fd ffd7 	bl	80020ce <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8004120:	4603      	mov	r3, r0
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800412a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800412a:	b590      	push	{r4, r7, lr}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004136:	68b8      	ldr	r0, [r7, #8]
 8004138:	f7ff ffb1 	bl	800409e <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800413c:	4604      	mov	r4, r0
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f7fd faa4 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004144:	4603      	mov	r3, r0
 8004146:	4619      	mov	r1, r3
 8004148:	2004      	movs	r0, #4
 800414a:	f7fd fa2d 	bl	80015a8 <_ZnwjPv>
 800414e:	4602      	mov	r2, r0
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	6013      	str	r3, [r2, #0]
	}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	bd90      	pop	{r4, r7, pc}

0800415c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f847 	bl	80041fa <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f846 	bl	8004212 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8004186:	4603      	mov	r3, r0
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800419a:	6838      	ldr	r0, [r7, #0]
 800419c:	f7ff fc5c 	bl	8003a58 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80041a0:	4603      	mov	r3, r0
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f828 	bl	8004228 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 80041d8:	4603      	mov	r3, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fa4e 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fa42 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004208:	4603      	mov	r3, r0
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_MspInit+0x4c>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a0f      	ldr	r2, [pc, #60]	; (800428c <HAL_MspInit+0x4c>)
 8004250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_MspInit+0x4c>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_MspInit+0x4c>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <HAL_MspInit+0x4c>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_MspInit+0x4c>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800427e:	2007      	movs	r0, #7
 8004280:	f000 fb14 	bl	80048ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800

08004290 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <HAL_CRC_MspInit+0x3c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10d      	bne.n	80042be <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_CRC_MspInit+0x40>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <HAL_CRC_MspInit+0x40>)
 80042ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042b0:	6313      	str	r3, [r2, #48]	; 0x30
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <HAL_CRC_MspInit+0x40>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40023000 	.word	0x40023000
 80042d0:	40023800 	.word	0x40023800

080042d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <HAL_SPI_MspInit+0x84>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d12b      	bne.n	800434e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_SPI_MspInit+0x88>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	4a17      	ldr	r2, [pc, #92]	; (800435c <HAL_SPI_MspInit+0x88>)
 8004300:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004304:	6453      	str	r3, [r2, #68]	; 0x44
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_SPI_MspInit+0x88>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_SPI_MspInit+0x88>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <HAL_SPI_MspInit+0x88>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6313      	str	r3, [r2, #48]	; 0x30
 8004322:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HAL_SPI_MspInit+0x88>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800432e:	23e0      	movs	r3, #224	; 0xe0
 8004330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800433e:	2305      	movs	r3, #5
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004342:	f107 0314 	add.w	r3, r7, #20
 8004346:	4619      	mov	r1, r3
 8004348:	4805      	ldr	r0, [pc, #20]	; (8004360 <HAL_SPI_MspInit+0x8c>)
 800434a:	f000 fb0d 	bl	8004968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800434e:	bf00      	nop
 8004350:	3728      	adds	r7, #40	; 0x28
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40013000 	.word	0x40013000
 800435c:	40023800 	.word	0x40023800
 8004360:	40020000 	.word	0x40020000

08004364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004368:	e7fe      	b.n	8004368 <NMI_Handler+0x4>

0800436a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800436a:	b480      	push	{r7}
 800436c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436e:	e7fe      	b.n	800436e <HardFault_Handler+0x4>

08004370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004374:	e7fe      	b.n	8004374 <MemManage_Handler+0x4>

08004376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800437a:	e7fe      	b.n	800437a <BusFault_Handler+0x4>

0800437c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004380:	e7fe      	b.n	8004380 <UsageFault_Handler+0x4>

08004382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b0:	f000 f968 	bl	8004684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043b4:	bf00      	nop
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80043bc:	2001      	movs	r0, #1
 80043be:	f000 fc89 	bl	8004cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80043cc:	4802      	ldr	r0, [pc, #8]	; (80043d8 <OTG_FS_IRQHandler+0x10>)
 80043ce:	f000 fde9 	bl	8004fa4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20001df8 	.word	0x20001df8

080043dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return 1;
 80043e0:	2301      	movs	r3, #1
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <_kill>:

int _kill(int pid, int sig)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043f6:	f014 ff9f 	bl	8019338 <__errno>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2216      	movs	r2, #22
 80043fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_exit>:

void _exit (int status)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004414:	f04f 31ff 	mov.w	r1, #4294967295
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ffe7 	bl	80043ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800441e:	e7fe      	b.n	800441e <_exit+0x12>

08004420 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e00a      	b.n	8004448 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004432:	f3af 8000 	nop.w
 8004436:	4601      	mov	r1, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	60ba      	str	r2, [r7, #8]
 800443e:	b2ca      	uxtb	r2, r1
 8004440:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	dbf0      	blt.n	8004432 <_read+0x12>
  }

  return len;
 8004450:	687b      	ldr	r3, [r7, #4]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e009      	b.n	8004480 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	60ba      	str	r2, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3301      	adds	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	dbf1      	blt.n	800446c <_write+0x12>
  }
  return len;
 8004488:	687b      	ldr	r3, [r7, #4]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_close>:

int _close(int file)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ba:	605a      	str	r2, [r3, #4]
  return 0;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <_isatty>:

int _isatty(int file)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044d2:	2301      	movs	r3, #1
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <_sbrk+0x5c>)
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <_sbrk+0x60>)
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <_sbrk+0x64>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <_sbrk+0x64>)
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <_sbrk+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <_sbrk+0x64>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d207      	bcs.n	800453c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800452c:	f014 ff04 	bl	8019338 <__errno>
 8004530:	4603      	mov	r3, r0
 8004532:	220c      	movs	r2, #12
 8004534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	e009      	b.n	8004550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800453c:	4b08      	ldr	r3, [pc, #32]	; (8004560 <_sbrk+0x64>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <_sbrk+0x64>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	4a05      	ldr	r2, [pc, #20]	; (8004560 <_sbrk+0x64>)
 800454c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20020000 	.word	0x20020000
 800455c:	00000400 	.word	0x00000400
 8004560:	20000428 	.word	0x20000428
 8004564:	20002538 	.word	0x20002538

08004568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SystemInit+0x20>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <SystemInit+0x20>)
 8004574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800458c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004590:	480d      	ldr	r0, [pc, #52]	; (80045c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004592:	490e      	ldr	r1, [pc, #56]	; (80045cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004594:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004598:	e002      	b.n	80045a0 <LoopCopyDataInit>

0800459a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800459a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800459c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800459e:	3304      	adds	r3, #4

080045a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045a4:	d3f9      	bcc.n	800459a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045a8:	4c0b      	ldr	r4, [pc, #44]	; (80045d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045ac:	e001      	b.n	80045b2 <LoopFillZerobss>

080045ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b0:	3204      	adds	r2, #4

080045b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045b4:	d3fb      	bcc.n	80045ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045b6:	f7ff ffd7 	bl	8004568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ba:	f014 fed5 	bl	8019368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045be:	f7fe fd4b 	bl	8003058 <main>
  bx  lr    
 80045c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045cc:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 80045d0:	0801cad0 	.word	0x0801cad0
  ldr r2, =_sbss
 80045d4:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 80045d8:	20002538 	.word	0x20002538

080045dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC_IRQHandler>
	...

080045e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_Init+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <HAL_Init+0x40>)
 80045ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_Init+0x40>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_Init+0x40>)
 80045f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_Init+0x40>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <HAL_Init+0x40>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004608:	2003      	movs	r0, #3
 800460a:	f000 f94f 	bl	80048ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800460e:	2000      	movs	r0, #0
 8004610:	f000 f808 	bl	8004624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004614:	f7ff fe14 	bl	8004240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00

08004624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_InitTick+0x54>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_InitTick+0x58>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800463a:	fbb3 f3f1 	udiv	r3, r3, r1
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f967 	bl	8004916 <HAL_SYSTICK_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e00e      	b.n	8004670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b0f      	cmp	r3, #15
 8004656:	d80a      	bhi.n	800466e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004658:	2200      	movs	r2, #0
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	f000 f92f 	bl	80048c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004664:	4a06      	ldr	r2, [pc, #24]	; (8004680 <HAL_InitTick+0x5c>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000048 	.word	0x20000048
 800467c:	20000050 	.word	0x20000050
 8004680:	2000004c 	.word	0x2000004c

08004684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_IncTick+0x20>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_IncTick+0x24>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4413      	add	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <HAL_IncTick+0x24>)
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000050 	.word	0x20000050
 80046a8:	2000042c 	.word	0x2000042c

080046ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return uwTick;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_GetTick+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	2000042c 	.word	0x2000042c

080046c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7ff ffee 	bl	80046ac <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d005      	beq.n	80046ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_Delay+0x44>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ea:	bf00      	nop
 80046ec:	f7ff ffde 	bl	80046ac <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d8f7      	bhi.n	80046ec <HAL_Delay+0x28>
  {
  }
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000050 	.word	0x20000050

0800470c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004728:	4013      	ands	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473e:	4a04      	ldr	r2, [pc, #16]	; (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	60d3      	str	r3, [r2, #12]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000ed00 	.word	0xe000ed00

08004754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <__NVIC_GetPriorityGrouping+0x18>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 0307 	and.w	r3, r3, #7
}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	2b00      	cmp	r3, #0
 8004780:	db0b      	blt.n	800479a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	4907      	ldr	r1, [pc, #28]	; (80047a8 <__NVIC_EnableIRQ+0x38>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2001      	movs	r0, #1
 8004792:	fa00 f202 	lsl.w	r2, r0, r2
 8004796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000e100 	.word	0xe000e100

080047ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db0a      	blt.n	80047d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	490c      	ldr	r1, [pc, #48]	; (80047f8 <__NVIC_SetPriority+0x4c>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	440b      	add	r3, r1
 80047d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d4:	e00a      	b.n	80047ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4908      	ldr	r1, [pc, #32]	; (80047fc <__NVIC_SetPriority+0x50>)
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	3b04      	subs	r3, #4
 80047e4:	0112      	lsls	r2, r2, #4
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	440b      	add	r3, r1
 80047ea:	761a      	strb	r2, [r3, #24]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000e100 	.word	0xe000e100
 80047fc:	e000ed00 	.word	0xe000ed00

08004800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f1c3 0307 	rsb	r3, r3, #7
 800481a:	2b04      	cmp	r3, #4
 800481c:	bf28      	it	cs
 800481e:	2304      	movcs	r3, #4
 8004820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3304      	adds	r3, #4
 8004826:	2b06      	cmp	r3, #6
 8004828:	d902      	bls.n	8004830 <NVIC_EncodePriority+0x30>
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3b03      	subs	r3, #3
 800482e:	e000      	b.n	8004832 <NVIC_EncodePriority+0x32>
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	401a      	ands	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004848:	f04f 31ff 	mov.w	r1, #4294967295
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43d9      	mvns	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	4313      	orrs	r3, r2
         );
}
 800485a:	4618      	mov	r0, r3
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004878:	d301      	bcc.n	800487e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800487a:	2301      	movs	r3, #1
 800487c:	e00f      	b.n	800489e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <SysTick_Config+0x40>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004886:	210f      	movs	r1, #15
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f7ff ff8e 	bl	80047ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <SysTick_Config+0x40>)
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <SysTick_Config+0x40>)
 8004898:	2207      	movs	r2, #7
 800489a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	e000e010 	.word	0xe000e010

080048ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff29 	bl	800470c <__NVIC_SetPriorityGrouping>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048d4:	f7ff ff3e 	bl	8004754 <__NVIC_GetPriorityGrouping>
 80048d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff ff8e 	bl	8004800 <NVIC_EncodePriority>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ff5d 	bl	80047ac <__NVIC_SetPriority>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff31 	bl	8004770 <__NVIC_EnableIRQ>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffa2 	bl	8004868 <SysTick_Config>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e00e      	b.n	800495e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	795b      	ldrb	r3, [r3, #5]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fc9d 	bl	8004290 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004968:	b480      	push	{r7}
 800496a:	b089      	sub	sp, #36	; 0x24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e16b      	b.n	8004c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004984:	2201      	movs	r2, #1
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	429a      	cmp	r2, r3
 800499e:	f040 815a 	bne.w	8004c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d005      	beq.n	80049ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d130      	bne.n	8004a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f0:	2201      	movs	r2, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 0201 	and.w	r2, r3, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d017      	beq.n	8004a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2203      	movs	r2, #3
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d123      	bne.n	8004aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	08da      	lsrs	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3208      	adds	r2, #8
 8004a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	08da      	lsrs	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3208      	adds	r2, #8
 8004aa6:	69b9      	ldr	r1, [r7, #24]
 8004aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80b4 	beq.w	8004c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	4b60      	ldr	r3, [pc, #384]	; (8004c74 <HAL_GPIO_Init+0x30c>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	4a5f      	ldr	r2, [pc, #380]	; (8004c74 <HAL_GPIO_Init+0x30c>)
 8004af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004afc:	6453      	str	r3, [r2, #68]	; 0x44
 8004afe:	4b5d      	ldr	r3, [pc, #372]	; (8004c74 <HAL_GPIO_Init+0x30c>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_GPIO_Init+0x310>)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a52      	ldr	r2, [pc, #328]	; (8004c7c <HAL_GPIO_Init+0x314>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02b      	beq.n	8004b8e <HAL_GPIO_Init+0x226>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a51      	ldr	r2, [pc, #324]	; (8004c80 <HAL_GPIO_Init+0x318>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d025      	beq.n	8004b8a <HAL_GPIO_Init+0x222>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a50      	ldr	r2, [pc, #320]	; (8004c84 <HAL_GPIO_Init+0x31c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <HAL_GPIO_Init+0x21e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a4f      	ldr	r2, [pc, #316]	; (8004c88 <HAL_GPIO_Init+0x320>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x21a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4e      	ldr	r2, [pc, #312]	; (8004c8c <HAL_GPIO_Init+0x324>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x216>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4d      	ldr	r2, [pc, #308]	; (8004c90 <HAL_GPIO_Init+0x328>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x212>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4c      	ldr	r2, [pc, #304]	; (8004c94 <HAL_GPIO_Init+0x32c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x20e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4b      	ldr	r2, [pc, #300]	; (8004c98 <HAL_GPIO_Init+0x330>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x20a>
 8004b6e:	2307      	movs	r3, #7
 8004b70:	e00e      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b72:	2308      	movs	r3, #8
 8004b74:	e00c      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b76:	2306      	movs	r3, #6
 8004b78:	e00a      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b7a:	2305      	movs	r3, #5
 8004b7c:	e008      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b7e:	2304      	movs	r3, #4
 8004b80:	e006      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b82:	2303      	movs	r3, #3
 8004b84:	e004      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e002      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_GPIO_Init+0x228>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	f002 0203 	and.w	r2, r2, #3
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	4093      	lsls	r3, r2
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba0:	4935      	ldr	r1, [pc, #212]	; (8004c78 <HAL_GPIO_Init+0x310>)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd2:	4a32      	ldr	r2, [pc, #200]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd8:	4b30      	ldr	r3, [pc, #192]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c26:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c50:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_GPIO_Init+0x334>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	f67f ae90 	bls.w	8004984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	40020000 	.word	0x40020000
 8004c80:	40020400 	.word	0x40020400
 8004c84:	40020800 	.word	0x40020800
 8004c88:	40020c00 	.word	0x40020c00
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40021400 	.word	0x40021400
 8004c94:	40021800 	.word	0x40021800
 8004c98:	40021c00 	.word	0x40021c00
 8004c9c:	40013c00 	.word	0x40013c00

08004ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
 8004cac:	4613      	mov	r3, r2
 8004cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb0:	787b      	ldrb	r3, [r7, #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cbc:	e003      	b.n	8004cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	041a      	lsls	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	619a      	str	r2, [r3, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cea:	4a05      	ldr	r2, [pc, #20]	; (8004d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fc3a 	bl	800356c <HAL_GPIO_EXTI_Callback>
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40013c00 	.word	0x40013c00

08004d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d06:	b08f      	sub	sp, #60	; 0x3c
 8004d08:	af0a      	add	r7, sp, #40	; 0x28
 8004d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e10f      	b.n	8004f36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f012 fcaf 	bl	8017694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 fd80 	bl	800785a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	687e      	ldr	r6, [r7, #4]
 8004d62:	466d      	mov	r5, sp
 8004d64:	f106 0410 	add.w	r4, r6, #16
 8004d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d78:	1d33      	adds	r3, r6, #4
 8004d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f002 fc57 	bl	8007630 <USB_CoreInit>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0d0      	b.n	8004f36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f002 fd6e 	bl	800787c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e04a      	b.n	8004e3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	333d      	adds	r3, #61	; 0x3d
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	333c      	adds	r3, #60	; 0x3c
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	b298      	uxth	r0, r3
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3344      	adds	r3, #68	; 0x44
 8004de2:	4602      	mov	r2, r0
 8004de4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3340      	adds	r3, #64	; 0x40
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3348      	adds	r3, #72	; 0x48
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334c      	adds	r3, #76	; 0x4c
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3354      	adds	r3, #84	; 0x54
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3af      	bcc.n	8004da6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e044      	b.n	8004ed6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3b5      	bcc.n	8004e4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	687e      	ldr	r6, [r7, #4]
 8004ee8:	466d      	mov	r5, sp
 8004eea:	f106 0410 	add.w	r4, r6, #16
 8004eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004efe:	1d33      	adds	r3, r6, #4
 8004f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f02:	6838      	ldr	r0, [r7, #0]
 8004f04:	f002 fd06 	bl	8007914 <USB_DevInit>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00d      	b.n	8004f36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 fe55 	bl	8008bde <USB_DevDisconnect>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_PCD_Start+0x1c>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e020      	b.n	8004f9c <HAL_PCD_Start+0x5e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d109      	bne.n	8004f7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d005      	beq.n	8004f7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f002 fc58 	bl	8007838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f003 fe05 	bl	8008b9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b08d      	sub	sp, #52	; 0x34
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f003 fec3 	bl	8008d46 <USB_GetMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 848a 	bne.w	80058dc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 fe27 	bl	8008c20 <USB_ReadInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8480 	beq.w	80058da <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 fe14 	bl	8008c20 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d107      	bne.n	8005012 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f002 0202 	and.w	r2, r2, #2
 8005010:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f003 fe02 	bl	8008c20 <USB_ReadInterrupts>
 800501c:	4603      	mov	r3, r0
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b10      	cmp	r3, #16
 8005024:	d161      	bne.n	80050ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0210 	bic.w	r2, r2, #16
 8005034:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	0c5b      	lsrs	r3, r3, #17
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	2b02      	cmp	r3, #2
 8005060:	d124      	bne.n	80050ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d035      	beq.n	80050da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	6a38      	ldr	r0, [r7, #32]
 8005082:	f003 fc39 	bl	80088f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005092:	441a      	add	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a4:	441a      	add	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
 80050aa:	e016      	b.n	80050da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	0c5b      	lsrs	r3, r3, #17
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d110      	bne.n	80050da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050be:	2208      	movs	r2, #8
 80050c0:	4619      	mov	r1, r3
 80050c2:	6a38      	ldr	r0, [r7, #32]
 80050c4:	f003 fc18 	bl	80088f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0210 	orr.w	r2, r2, #16
 80050e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f003 fd96 	bl	8008c20 <USB_ReadInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050fe:	f040 80a7 	bne.w	8005250 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f003 fd9b 	bl	8008c46 <USB_ReadDevAllOutEpInterrupt>
 8005110:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005112:	e099      	b.n	8005248 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 808e 	beq.w	800523c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f003 fdbf 	bl	8008cae <USB_ReadDevOutEPInterrupt>
 8005130:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	2301      	movs	r3, #1
 800514c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800514e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fec3 	bl	8005edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	2308      	movs	r3, #8
 8005170:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 ff99 	bl	80060ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	2310      	movs	r3, #16
 8005194:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d030      	beq.n	8005202 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d109      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	78db      	ldrb	r3, [r3, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d108      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f012 fb58 	bl	80178a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2302      	movs	r3, #2
 8005200:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	2320      	movs	r3, #32
 800521c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	3301      	adds	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	f47f af62 	bne.w	8005114 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f003 fce3 	bl	8008c20 <USB_ReadInterrupts>
 800525a:	4603      	mov	r3, r0
 800525c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005264:	f040 80db 	bne.w	800541e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f003 fd04 	bl	8008c7a <USB_ReadDevAllInEpInterrupt>
 8005272:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005278:	e0cd      	b.n	8005416 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80c2 	beq.w	800540a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f003 fd2a 	bl	8008cea <USB_ReadDevInEPInterrupt>
 8005296:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d057      	beq.n	8005352 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2201      	movs	r2, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c2:	4013      	ands	r3, r2
 80052c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	461a      	mov	r2, r3
 80052d4:	2301      	movs	r3, #1
 80052d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d132      	bne.n	8005346 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	; 0x4c
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4403      	add	r3, r0
 8005300:	3348      	adds	r3, #72	; 0x48
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4419      	add	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4403      	add	r3, r0
 8005314:	334c      	adds	r3, #76	; 0x4c
 8005316:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d113      	bne.n	8005346 <HAL_PCD_IRQHandler+0x3a2>
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3354      	adds	r3, #84	; 0x54
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d108      	bne.n	8005346 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800533e:	461a      	mov	r2, r3
 8005340:	2101      	movs	r1, #1
 8005342:	f003 fd31 	bl	8008da8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	b2db      	uxtb	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f012 fa22 	bl	8017796 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	2308      	movs	r3, #8
 800536c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	461a      	mov	r2, r3
 8005386:	2310      	movs	r3, #16
 8005388:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	2340      	movs	r3, #64	; 0x40
 80053a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d023      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b2:	6a38      	ldr	r0, [r7, #32]
 80053b4:	f002 fc12 	bl	8007bdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	3338      	adds	r3, #56	; 0x38
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	78db      	ldrb	r3, [r3, #3]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f012 fa6f 	bl	80178c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	461a      	mov	r2, r3
 80053f4:	2302      	movs	r3, #2
 80053f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fcdb 	bl	8005dc0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	3301      	adds	r3, #1
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f af2e 	bne.w	800527a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f003 fbfc 	bl	8008c20 <USB_ReadInterrupts>
 8005428:	4603      	mov	r3, r0
 800542a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005432:	d122      	bne.n	800547a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800544e:	2b01      	cmp	r3, #1
 8005450:	d108      	bne.n	8005464 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fec3 	bl	80061e8 <HAL_PCDEx_LPM_Callback>
 8005462:	e002      	b.n	800546a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f012 fa0d 	bl	8017884 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005478:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f003 fbce 	bl	8008c20 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d112      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d102      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f012 f9c9 	bl	8017838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f003 fbb0 	bl	8008c20 <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	f040 80b7 	bne.w	800563c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2110      	movs	r1, #16
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 fb77 	bl	8007bdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f2:	e046      	b.n	8005582 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005506:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005526:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	461a      	mov	r2, r3
 8005536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	3301      	adds	r3, #1
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d3b3      	bcc.n	80054f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800559e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d016      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b8:	f043 030b 	orr.w	r3, r3, #11
 80055bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ce:	f043 030b 	orr.w	r3, r3, #11
 80055d2:	6453      	str	r3, [r2, #68]	; 0x44
 80055d4:	e015      	b.n	8005602 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fc:	f043 030b 	orr.w	r3, r3, #11
 8005600:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005610:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005614:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005626:	461a      	mov	r2, r3
 8005628:	f003 fbbe 	bl	8008da8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800563a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f003 faed 	bl	8008c20 <USB_ReadInterrupts>
 8005646:	4603      	mov	r3, r0
 8005648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d124      	bne.n	800569c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f003 fb83 	bl	8008d62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f002 fb38 	bl	8007cd6 <USB_GetDevSpeed>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681c      	ldr	r4, [r3, #0]
 8005672:	f001 fa29 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8005676:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	4620      	mov	r0, r4
 8005682:	f002 f837 	bl	80076f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f012 f8ad 	bl	80177e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800569a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f003 fabd 	bl	8008c20 <USB_ReadInterrupts>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d10a      	bne.n	80056c6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f012 f88a 	bl	80177ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f002 0208 	and.w	r2, r2, #8
 80056c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f003 faa8 	bl	8008c20 <USB_ReadInterrupts>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d122      	bne.n	8005720 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e6:	2301      	movs	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e014      	b.n	8005716 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fb27 	bl	8005d5e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571c:	429a      	cmp	r2, r3
 800571e:	d3e5      	bcc.n	80056ec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f003 fa7b 	bl	8008c20 <USB_ReadInterrupts>
 800572a:	4603      	mov	r3, r0
 800572c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005734:	d13b      	bne.n	80057ae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005736:	2301      	movs	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	e02b      	b.n	8005794 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3340      	adds	r3, #64	; 0x40
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d115      	bne.n	800578e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005762:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	da12      	bge.n	800578e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	333f      	adds	r3, #63	; 0x3f
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fae8 	bl	8005d5e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	3301      	adds	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	429a      	cmp	r2, r3
 800579c:	d3ce      	bcc.n	800573c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80057ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f003 fa34 	bl	8008c20 <USB_ReadInterrupts>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c2:	d155      	bne.n	8005870 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c4:	2301      	movs	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	e045      	b.n	8005856 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d12e      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da2b      	bge.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005804:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005808:	429a      	cmp	r2, r3
 800580a:	d121      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584c:	6053      	str	r3, [r2, #4]
            break;
 800584e:	e007      	b.n	8005860 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	3301      	adds	r3, #1
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	429a      	cmp	r2, r3
 800585e:	d3b4      	bcc.n	80057ca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800586e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f003 f9d3 	bl	8008c20 <USB_ReadInterrupts>
 800587a:	4603      	mov	r3, r0
 800587c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005884:	d10a      	bne.n	800589c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f012 f82e 	bl	80178e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800589a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f003 f9bd 	bl	8008c20 <USB_ReadInterrupts>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d115      	bne.n	80058dc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f012 f81e 	bl	8017904 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	e000      	b.n	80058dc <HAL_PCD_IRQHandler+0x938>
      return;
 80058da:	bf00      	nop
    }
  }
}
 80058dc:	3734      	adds	r7, #52	; 0x34
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd90      	pop	{r4, r7, pc}

080058e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_PCD_SetAddress+0x1a>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e013      	b.n	8005924 <HAL_PCD_SetAddress+0x42>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f003 f91b 	bl	8008b50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	461a      	mov	r2, r3
 800593a:	4603      	mov	r3, r0
 800593c:	70fb      	strb	r3, [r7, #3]
 800593e:	460b      	mov	r3, r1
 8005940:	803b      	strh	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800594a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800594e:	2b00      	cmp	r3, #0
 8005950:	da0f      	bge.n	8005972 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3338      	adds	r3, #56	; 0x38
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	3304      	adds	r3, #4
 8005968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	705a      	strb	r2, [r3, #1]
 8005970:	e00f      	b.n	8005992 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800599e:	883a      	ldrh	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	78ba      	ldrb	r2, [r7, #2]
 80059a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059bc:	78bb      	ldrb	r3, [r7, #2]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d102      	bne.n	80059c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_PCD_EP_Open+0xaa>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e00e      	b.n	80059f4 <HAL_PCD_EP_Open+0xc8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f002 f99b 	bl	8007d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059f2:	7afb      	ldrb	r3, [r7, #11]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	da0f      	bge.n	8005a30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	3338      	adds	r3, #56	; 0x38
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4413      	add	r3, r2
 8005a24:	3304      	adds	r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	705a      	strb	r2, [r3, #1]
 8005a2e:	e00f      	b.n	8005a50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_PCD_EP_Close+0x6e>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e00e      	b.n	8005a88 <HAL_PCD_EP_Close+0x8c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f002 f9d9 	bl	8007e30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	f003 020f 	and.w	r2, r3, #15
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d102      	bne.n	8005aec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aec:	7afb      	ldrb	r3, [r7, #11]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	f002 fcb8 	bl	8008478 <USB_EP0StartXfer>
 8005b08:	e008      	b.n	8005b1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	f002 fa66 	bl	8007fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	f003 020f 	and.w	r2, r3, #15
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b48:	681b      	ldr	r3, [r3, #0]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	460b      	mov	r3, r1
 8005b64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	3338      	adds	r3, #56	; 0x38
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2201      	movs	r2, #1
 8005b94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	f002 fc56 	bl	8008478 <USB_EP0StartXfer>
 8005bcc:	e008      	b.n	8005be0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	f002 fa04 	bl	8007fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 020f 	and.w	r2, r3, #15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d901      	bls.n	8005c08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e050      	b.n	8005caa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da0f      	bge.n	8005c30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	3338      	adds	r3, #56	; 0x38
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	705a      	strb	r2, [r3, #1]
 8005c2e:	e00d      	b.n	8005c4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	3304      	adds	r3, #4
 8005c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_PCD_EP_SetStall+0x82>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e01e      	b.n	8005caa <HAL_PCD_EP_SetStall+0xc0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f002 fe94 	bl	80089a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	b2d9      	uxtb	r1, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f003 f884 	bl	8008da8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d901      	bls.n	8005cd0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e042      	b.n	8005d56 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da0f      	bge.n	8005cf8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	3338      	adds	r3, #56	; 0x38
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	3304      	adds	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	705a      	strb	r2, [r3, #1]
 8005cf6:	e00f      	b.n	8005d18 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_PCD_EP_ClrStall+0x86>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e00e      	b.n	8005d56 <HAL_PCD_EP_ClrStall+0xa4>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f002 fe9c 	bl	8008a84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da0c      	bge.n	8005d8c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	3338      	adds	r3, #56	; 0x38
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e00c      	b.n	8005da6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f002 fcbb 	bl	8008728 <USB_EPStopXfer>
 8005db2:	4603      	mov	r3, r0
 8005db4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005db6:	7afb      	ldrb	r3, [r7, #11]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	3338      	adds	r3, #56	; 0x38
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	3304      	adds	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d901      	bls.n	8005df8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e06c      	b.n	8005ed2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d902      	bls.n	8005e14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	3303      	adds	r3, #3
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e1c:	e02b      	b.n	8005e76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d902      	bls.n	8005e3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6919      	ldr	r1, [r3, #16]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4603      	mov	r3, r0
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f002 fd0f 	bl	800887c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d809      	bhi.n	8005ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d203      	bcs.n	8005ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1be      	bne.n	8005e1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d811      	bhi.n	8005ed0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	6939      	ldr	r1, [r7, #16]
 8005ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ecc:	4013      	ands	r3, r2
 8005ece:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	333c      	adds	r3, #60	; 0x3c
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d17b      	bne.n	800600a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4a61      	ldr	r2, [pc, #388]	; (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f240 80b9 	bls.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80b3 	beq.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f44:	6093      	str	r3, [r2, #8]
 8005f46:	e0a7      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2320      	movs	r3, #32
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	e098      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8093 	bne.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d90f      	bls.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	6093      	str	r3, [r2, #8]
 8005f98:	e07e      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	0159      	lsls	r1, r3, #5
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d114      	bne.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	f002 fede 	bl	8008da8 <USB_EP0_OutStart>
 8005fec:	e006      	b.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f011 fbac 	bl	8017760 <HAL_PCD_DataOutStageCallback>
 8006008:	e046      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4a26      	ldr	r2, [pc, #152]	; (80060a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d124      	bne.n	800605c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	6093      	str	r3, [r2, #8]
 8006030:	e032      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	2320      	movs	r3, #32
 800604c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f011 fb83 	bl	8017760 <HAL_PCD_DataOutStageCallback>
 800605a:	e01d      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006084:	461a      	mov	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	f002 fe8e 	bl	8008da8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f011 fb64 	bl	8017760 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	4f54300a 	.word	0x4f54300a
 80060a8:	4f54310a 	.word	0x4f54310a

080060ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	333c      	adds	r3, #60	; 0x3c
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a15      	ldr	r2, [pc, #84]	; (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d90e      	bls.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	461a      	mov	r2, r3
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f011 fb1b 	bl	801773c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d90c      	bls.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d108      	bne.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006120:	461a      	mov	r2, r3
 8006122:	2101      	movs	r1, #1
 8006124:	f002 fe40 	bl	8008da8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	4f54300a 	.word	0x4f54300a

08006138 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	4613      	mov	r3, r2
 8006146:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006156:	883b      	ldrh	r3, [r7, #0]
 8006158:	0419      	lsls	r1, r3, #16
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	430a      	orrs	r2, r1
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e028      	b.n	80061b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e00d      	b.n	8006196 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3340      	adds	r3, #64	; 0x40
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	3301      	adds	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	3b01      	subs	r3, #1
 800619c:	429a      	cmp	r2, r3
 800619e:	d3ec      	bcc.n	800617a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a0:	883b      	ldrh	r3, [r7, #0]
 80061a2:	0418      	lsls	r0, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	4302      	orrs	r2, r0
 80061b0:	3340      	adds	r3, #64	; 0x40
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e267      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d075      	beq.n	800630a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800621e:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00c      	beq.n	8006244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b85      	ldr	r3, [pc, #532]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006232:	2b08      	cmp	r3, #8
 8006234:	d112      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006236:	4b82      	ldr	r3, [pc, #520]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006242:	d10b      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	4b7e      	ldr	r3, [pc, #504]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05b      	beq.n	8006308 <HAL_RCC_OscConfig+0x108>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d157      	bne.n	8006308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e242      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d106      	bne.n	8006274 <HAL_RCC_OscConfig+0x74>
 8006266:	4b76      	ldr	r3, [pc, #472]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a75      	ldr	r2, [pc, #468]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e01d      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800627c:	d10c      	bne.n	8006298 <HAL_RCC_OscConfig+0x98>
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6c      	ldr	r2, [pc, #432]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00b      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006298:	4b69      	ldr	r3, [pc, #420]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a68      	ldr	r2, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b66      	ldr	r3, [pc, #408]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fe f9f8 	bl	80046ac <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fe f9f4 	bl	80046ac <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e207      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0xc0>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fe f9e4 	bl	80046ac <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e8:	f7fe f9e0 	bl	80046ac <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	; 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e1f3      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0xe8>
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006316:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006322:	4b47      	ldr	r3, [pc, #284]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11c      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b44      	ldr	r3, [pc, #272]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	4b41      	ldr	r3, [pc, #260]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1c7      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4937      	ldr	r1, [pc, #220]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	e03a      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006370:	4b34      	ldr	r3, [pc, #208]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fe f999 	bl	80046ac <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800637e:	f7fe f995 	bl	80046ac <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e1a8      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4925      	ldr	r1, [pc, #148]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e015      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fe f978 	bl	80046ac <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fe f974 	bl	80046ac <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e187      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d036      	beq.n	8006458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fe f958 	bl	80046ac <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006400:	f7fe f954 	bl	80046ac <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e167      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x200>
 800641e:	e01b      	b.n	8006458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fe f941 	bl	80046ac <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642c:	e00e      	b.n	800644c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642e:	f7fe f93d 	bl	80046ac <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d907      	bls.n	800644c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e150      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	42470000 	.word	0x42470000
 8006448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8097 	beq.w	8006594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b81      	ldr	r3, [pc, #516]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b7d      	ldr	r3, [pc, #500]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	4a7c      	ldr	r2, [pc, #496]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	; 0x40
 8006486:	4b7a      	ldr	r3, [pc, #488]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b77      	ldr	r3, [pc, #476]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d118      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a2:	4b74      	ldr	r3, [pc, #464]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ae:	f7fe f8fd 	bl	80046ac <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b6:	f7fe f8f9 	bl	80046ac <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e10c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c8:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ea>
 80064dc:	4b64      	ldr	r3, [pc, #400]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a63      	ldr	r2, [pc, #396]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
 80064e8:	e01c      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d10c      	bne.n	800650c <HAL_RCC_OscConfig+0x30c>
 80064f2:	4b5f      	ldr	r3, [pc, #380]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 0304 	orr.w	r3, r3, #4
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70
 80064fe:	4b5c      	ldr	r3, [pc, #368]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	4a5b      	ldr	r2, [pc, #364]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6713      	str	r3, [r2, #112]	; 0x70
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 800650c:	4b58      	ldr	r3, [pc, #352]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a57      	ldr	r2, [pc, #348]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	4b55      	ldr	r3, [pc, #340]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a54      	ldr	r2, [pc, #336]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fe f8be 	bl	80046ac <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fe f8ba 	bl	80046ac <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0cb      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654a:	4b49      	ldr	r3, [pc, #292]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ee      	beq.n	8006534 <HAL_RCC_OscConfig+0x334>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006558:	f7fe f8a8 	bl	80046ac <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fe f8a4 	bl	80046ac <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0b5      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ee      	bne.n	8006560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006588:	4b39      	ldr	r3, [pc, #228]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	4a38      	ldr	r2, [pc, #224]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a1 	beq.w	80066e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d05c      	beq.n	8006664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d141      	bne.n	8006636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fe f878 	bl	80046ac <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fe f874 	bl	80046ac <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e087      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69da      	ldr	r2, [r3, #28]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	3b01      	subs	r3, #1
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	491b      	ldr	r1, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fe f84d 	bl	80046ac <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006616:	f7fe f849 	bl	80046ac <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e05c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x416>
 8006634:	e054      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fe f836 	bl	80046ac <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006644:	f7fe f832 	bl	80046ac <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e045      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x444>
 8006662:	e03d      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e038      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
 8006678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <HAL_RCC_OscConfig+0x4ec>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d028      	beq.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d121      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d11a      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d111      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	3b01      	subs	r3, #1
 80066c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0cc      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d90c      	bls.n	800672c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b65      	ldr	r3, [pc, #404]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b63      	ldr	r3, [pc, #396]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b8      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b53      	ldr	r3, [pc, #332]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a52      	ldr	r2, [pc, #328]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b50      	ldr	r3, [pc, #320]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	494d      	ldr	r1, [pc, #308]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d044      	beq.n	8006810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d119      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e06f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e067      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b37      	ldr	r3, [pc, #220]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4934      	ldr	r1, [pc, #208]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fd ff64 	bl	80046ac <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fd ff60 	bl	80046ac <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20c      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e032      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4916      	ldr	r1, [pc, #88]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490a      	ldr	r1, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fd fec4 	bl	8004624 <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	40023800 	.word	0x40023800
 80068b0:	0801c33c 	.word	0x0801c33c
 80068b4:	20000048 	.word	0x20000048
 80068b8:	2000004c 	.word	0x2000004c

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b094      	sub	sp, #80	; 0x50
 80068c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	647b      	str	r3, [r7, #68]	; 0x44
 80068c8:	2300      	movs	r3, #0
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	2300      	movs	r3, #0
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d4:	4b79      	ldr	r3, [pc, #484]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d00d      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x40>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	f200 80e1 	bhi.w	8006aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ee:	e0db      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b73      	ldr	r3, [pc, #460]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068f4:	e0db      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068fa:	e0d8      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068fc:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006906:	4b6d      	ldr	r3, [pc, #436]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d063      	beq.n	80069da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	2200      	movs	r2, #0
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
 800691c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	0159      	lsls	r1, r3, #5
 800693c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006940:	0150      	lsls	r0, r2, #5
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4621      	mov	r1, r4
 8006948:	1a51      	subs	r1, r2, r1
 800694a:	6139      	str	r1, [r7, #16]
 800694c:	4629      	mov	r1, r5
 800694e:	eb63 0301 	sbc.w	r3, r3, r1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006960:	4659      	mov	r1, fp
 8006962:	018b      	lsls	r3, r1, #6
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800696a:	4651      	mov	r1, sl
 800696c:	018a      	lsls	r2, r1, #6
 800696e:	4651      	mov	r1, sl
 8006970:	ebb2 0801 	subs.w	r8, r2, r1
 8006974:	4659      	mov	r1, fp
 8006976:	eb63 0901 	sbc.w	r9, r3, r1
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	4623      	mov	r3, r4
 8006994:	eb18 0303 	adds.w	r3, r8, r3
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	462b      	mov	r3, r5
 800699c:	eb49 0303 	adc.w	r3, r9, r3
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069ae:	4629      	mov	r1, r5
 80069b0:	024b      	lsls	r3, r1, #9
 80069b2:	4621      	mov	r1, r4
 80069b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069b8:	4621      	mov	r1, r4
 80069ba:	024a      	lsls	r2, r1, #9
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c2:	2200      	movs	r2, #0
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069cc:	f7fa f9b6 	bl	8000d3c <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4613      	mov	r3, r2
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d8:	e058      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069da:	4b38      	ldr	r3, [pc, #224]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	2200      	movs	r2, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	4611      	mov	r1, r2
 80069e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
 80069f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	f04f 0000 	mov.w	r0, #0
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	0159      	lsls	r1, r3, #5
 8006a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a06:	0150      	lsls	r0, r2, #5
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a12:	4649      	mov	r1, r9
 8006a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a30:	eb63 050b 	sbc.w	r5, r3, fp
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	00eb      	lsls	r3, r5, #3
 8006a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a42:	00e2      	lsls	r2, r4, #3
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	4643      	mov	r3, r8
 8006a4a:	18e3      	adds	r3, r4, r3
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	464b      	mov	r3, r9
 8006a50:	eb45 0303 	adc.w	r3, r5, r3
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a62:	4629      	mov	r1, r5
 8006a64:	028b      	lsls	r3, r1, #10
 8006a66:	4621      	mov	r1, r4
 8006a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	028a      	lsls	r2, r1, #10
 8006a70:	4610      	mov	r0, r2
 8006a72:	4619      	mov	r1, r3
 8006a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a76:	2200      	movs	r2, #0
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	61fa      	str	r2, [r7, #28]
 8006a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a80:	f7fa f95c 	bl	8000d3c <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4613      	mov	r3, r2
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	3301      	adds	r3, #1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3750      	adds	r7, #80	; 0x50
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	007a1200 	.word	0x007a1200

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000048 	.word	0x20000048

08006ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e07b      	b.n	8006bea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d108      	bne.n	8006b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b02:	d009      	beq.n	8006b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	61da      	str	r2, [r3, #28]
 8006b0a:	e005      	b.n	8006b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fd fbce 	bl	80042d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	f003 0104 	and.w	r1, r3, #4
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	f003 0210 	and.w	r2, r3, #16
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b088      	sub	sp, #32
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_SPI_Transmit+0x22>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e126      	b.n	8006e62 <HAL_SPI_Transmit+0x270>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c1c:	f7fd fd46 	bl	80046ac <HAL_GetTick>
 8006c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c36:	e10b      	b.n	8006e50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_SPI_Transmit+0x52>
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c48:	e102      	b.n	8006e50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c90:	d10f      	bne.n	8006cb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d007      	beq.n	8006cd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd8:	d14b      	bne.n	8006d72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_SPI_Transmit+0xf6>
 8006ce2:	8afb      	ldrh	r3, [r7, #22]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d13e      	bne.n	8006d66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	881a      	ldrh	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d0c:	e02b      	b.n	8006d66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d112      	bne.n	8006d42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	881a      	ldrh	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	1c9a      	adds	r2, r3, #2
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d40:	e011      	b.n	8006d66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d42:	f7fd fcb3 	bl	80046ac <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d803      	bhi.n	8006d5a <HAL_SPI_Transmit+0x168>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d102      	bne.n	8006d60 <HAL_SPI_Transmit+0x16e>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d64:	e074      	b.n	8006e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1ce      	bne.n	8006d0e <HAL_SPI_Transmit+0x11c>
 8006d70:	e04c      	b.n	8006e0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <HAL_SPI_Transmit+0x18e>
 8006d7a:	8afb      	ldrh	r3, [r7, #22]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d140      	bne.n	8006e02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	7812      	ldrb	r2, [r2, #0]
 8006d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006da6:	e02c      	b.n	8006e02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d113      	bne.n	8006dde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ddc:	e011      	b.n	8006e02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dde:	f7fd fc65 	bl	80046ac <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d803      	bhi.n	8006df6 <HAL_SPI_Transmit+0x204>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d102      	bne.n	8006dfc <HAL_SPI_Transmit+0x20a>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e00:	e026      	b.n	8006e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1cd      	bne.n	8006da8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fbcb 	bl	80075ac <SPI_EndRxTxTransaction>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e000      	b.n	8006e50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b088      	sub	sp, #32
 8006e6e:	af02      	add	r7, sp, #8
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	603b      	str	r3, [r7, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e86:	d112      	bne.n	8006eae <HAL_SPI_Receive+0x44>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10e      	bne.n	8006eae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2204      	movs	r2, #4
 8006e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f8f1 	bl	800708c <HAL_SPI_TransmitReceive>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	e0ea      	b.n	8007084 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_SPI_Receive+0x52>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e0e3      	b.n	8007084 <HAL_SPI_Receive+0x21a>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ec4:	f7fd fbf2 	bl	80046ac <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d002      	beq.n	8006edc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eda:	e0ca      	b.n	8007072 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SPI_Receive+0x7e>
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eec:	e0c1      	b.n	8007072 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	88fa      	ldrh	r2, [r7, #6]
 8006f06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f34:	d10f      	bne.n	8006f56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d007      	beq.n	8006f74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d162      	bne.n	8007042 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f7c:	e02e      	b.n	8006fdc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d115      	bne.n	8006fb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f103 020c 	add.w	r2, r3, #12
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fb6:	e011      	b.n	8006fdc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb8:	f7fd fb78 	bl	80046ac <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d803      	bhi.n	8006fd0 <HAL_SPI_Receive+0x166>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d102      	bne.n	8006fd6 <HAL_SPI_Receive+0x16c>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fda:	e04a      	b.n	8007072 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1cb      	bne.n	8006f7e <HAL_SPI_Receive+0x114>
 8006fe6:	e031      	b.n	800704c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d113      	bne.n	800701e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	b292      	uxth	r2, r2
 8007002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	1c9a      	adds	r2, r3, #2
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800701c:	e011      	b.n	8007042 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800701e:	f7fd fb45 	bl	80046ac <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d803      	bhi.n	8007036 <HAL_SPI_Receive+0x1cc>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d102      	bne.n	800703c <HAL_SPI_Receive+0x1d2>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007040:	e017      	b.n	8007072 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1cd      	bne.n	8006fe8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fa45 	bl	80074e0 <SPI_EndRxTransaction>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
 800706e:	e000      	b.n	8007072 <HAL_SPI_Receive+0x208>
  }

error :
 8007070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800709a:	2301      	movs	r3, #1
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x26>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e18a      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x33c>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ba:	f7fd faf7 	bl	80046ac <HAL_GetTick>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d00f      	beq.n	80070fc <HAL_SPI_TransmitReceive+0x70>
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e2:	d107      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x68>
 80070ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d003      	beq.n	80070fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070fa:	e15b      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_SPI_TransmitReceive+0x82>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_SPI_TransmitReceive+0x82>
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007114:	e14e      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b04      	cmp	r3, #4
 8007120:	d003      	beq.n	800712a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2205      	movs	r2, #5
 8007126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	887a      	ldrh	r2, [r7, #2]
 800713a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	887a      	ldrh	r2, [r7, #2]
 8007140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	887a      	ldrh	r2, [r7, #2]
 800714c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	887a      	ldrh	r2, [r7, #2]
 8007152:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d007      	beq.n	800717e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800717c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007186:	d178      	bne.n	800727a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x10a>
 8007190:	8b7b      	ldrh	r3, [r7, #26]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d166      	bne.n	8007264 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	881a      	ldrh	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	1c9a      	adds	r2, r3, #2
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ba:	e053      	b.n	8007264 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d11b      	bne.n	8007202 <HAL_SPI_TransmitReceive+0x176>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d016      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x176>
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d113      	bne.n	8007202 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	881a      	ldrh	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	1c9a      	adds	r2, r3, #2
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b01      	cmp	r3, #1
 800720e:	d119      	bne.n	8007244 <HAL_SPI_TransmitReceive+0x1b8>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d014      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	b292      	uxth	r2, r2
 8007226:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	1c9a      	adds	r2, r3, #2
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007240:	2301      	movs	r3, #1
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007244:	f7fd fa32 	bl	80046ac <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007250:	429a      	cmp	r2, r3
 8007252:	d807      	bhi.n	8007264 <HAL_SPI_TransmitReceive+0x1d8>
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d003      	beq.n	8007264 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007262:	e0a7      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1a6      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x130>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1a1      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x130>
 8007278:	e07c      	b.n	8007374 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x1fc>
 8007282:	8b7b      	ldrh	r3, [r7, #26]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d16b      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072ae:	e057      	b.n	8007360 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d11c      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x26c>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d017      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x26c>
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d114      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	330c      	adds	r3, #12
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d119      	bne.n	800733a <HAL_SPI_TransmitReceive+0x2ae>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d014      	beq.n	800733a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007336:	2301      	movs	r3, #1
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800733a:	f7fd f9b7 	bl	80046ac <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007346:	429a      	cmp	r2, r3
 8007348:	d803      	bhi.n	8007352 <HAL_SPI_TransmitReceive+0x2c6>
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d102      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x2cc>
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800735e:	e029      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1a2      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x224>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d19d      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f917 	bl	80075ac <SPI_EndRxTxTransaction>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d006      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007390:	e010      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	e000      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80073b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3730      	adds	r7, #48	; 0x30
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073e0:	f7fd f964 	bl	80046ac <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4413      	add	r3, r2
 80073ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073f0:	f7fd f95c 	bl	80046ac <HAL_GetTick>
 80073f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073f6:	4b39      	ldr	r3, [pc, #228]	; (80074dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	015b      	lsls	r3, r3, #5
 80073fc:	0d1b      	lsrs	r3, r3, #20
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007406:	e054      	b.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d050      	beq.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007410:	f7fd f94c 	bl	80046ac <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	429a      	cmp	r2, r3
 800741e:	d902      	bls.n	8007426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d13d      	bne.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800743e:	d111      	bne.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007448:	d004      	beq.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007452:	d107      	bne.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800746c:	d10f      	bne.n	800748e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800748c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e017      	b.n	80074d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4013      	ands	r3, r2
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	429a      	cmp	r2, r3
 80074c0:	bf0c      	ite	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	2300      	movne	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d19b      	bne.n	8007408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000048 	.word	0x20000048

080074e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f4:	d111      	bne.n	800751a <SPI_EndRxTransaction+0x3a>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fe:	d004      	beq.n	800750a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007508:	d107      	bne.n	800751a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007518:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007522:	d12a      	bne.n	800757a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752c:	d012      	beq.n	8007554 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff ff49 	bl	80073d0 <SPI_WaitFlagStateUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d02d      	beq.n	80075a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	f043 0220 	orr.w	r2, r3, #32
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e026      	b.n	80075a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2200      	movs	r2, #0
 800755c:	2101      	movs	r1, #1
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff ff36 	bl	80073d0 <SPI_WaitFlagStateUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d01a      	beq.n	80075a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	f043 0220 	orr.w	r2, r3, #32
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e013      	b.n	80075a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2200      	movs	r2, #0
 8007582:	2101      	movs	r1, #1
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff ff23 	bl	80073d0 <SPI_WaitFlagStateUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e000      	b.n	80075a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075b8:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <SPI_EndRxTxTransaction+0x7c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1b      	ldr	r2, [pc, #108]	; (800762c <SPI_EndRxTxTransaction+0x80>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	0d5b      	lsrs	r3, r3, #21
 80075c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075c8:	fb02 f303 	mul.w	r3, r2, r3
 80075cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d6:	d112      	bne.n	80075fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2200      	movs	r2, #0
 80075e0:	2180      	movs	r1, #128	; 0x80
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fef4 	bl	80073d0 <SPI_WaitFlagStateUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f043 0220 	orr.w	r2, r3, #32
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e00f      	b.n	800761e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3b01      	subs	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b80      	cmp	r3, #128	; 0x80
 8007616:	d0f2      	beq.n	80075fe <SPI_EndRxTxTransaction+0x52>
 8007618:	e000      	b.n	800761c <SPI_EndRxTxTransaction+0x70>
        break;
 800761a:	bf00      	nop
  }

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000048 	.word	0x20000048
 800762c:	165e9f81 	.word	0x165e9f81

08007630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 001c 	add.w	r0, r7, #28
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2b01      	cmp	r3, #1
 8007646:	d122      	bne.n	800768e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800765c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d105      	bne.n	8007682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fbee 	bl	8008e64 <USB_CoreReset>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	e01a      	b.n	80076c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 fbe2 	bl	8008e64 <USB_CoreReset>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
 80076b6:	e005      	b.n	80076c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10b      	bne.n	80076e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f043 0206 	orr.w	r2, r3, #6
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f043 0220 	orr.w	r2, r3, #32
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076ee:	b004      	add	sp, #16
 80076f0:	4770      	bx	lr
	...

080076f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d165      	bne.n	80077d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a41      	ldr	r2, [pc, #260]	; (8007810 <USB_SetTurnaroundTime+0x11c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d906      	bls.n	800771e <USB_SetTurnaroundTime+0x2a>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4a40      	ldr	r2, [pc, #256]	; (8007814 <USB_SetTurnaroundTime+0x120>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d202      	bcs.n	800771e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007718:	230f      	movs	r3, #15
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e062      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4a3c      	ldr	r2, [pc, #240]	; (8007814 <USB_SetTurnaroundTime+0x120>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d306      	bcc.n	8007734 <USB_SetTurnaroundTime+0x40>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <USB_SetTurnaroundTime+0x124>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d202      	bcs.n	8007734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800772e:	230e      	movs	r3, #14
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e057      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a38      	ldr	r2, [pc, #224]	; (8007818 <USB_SetTurnaroundTime+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d306      	bcc.n	800774a <USB_SetTurnaroundTime+0x56>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4a37      	ldr	r2, [pc, #220]	; (800781c <USB_SetTurnaroundTime+0x128>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d202      	bcs.n	800774a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007744:	230d      	movs	r3, #13
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e04c      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a33      	ldr	r2, [pc, #204]	; (800781c <USB_SetTurnaroundTime+0x128>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d306      	bcc.n	8007760 <USB_SetTurnaroundTime+0x6c>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a32      	ldr	r2, [pc, #200]	; (8007820 <USB_SetTurnaroundTime+0x12c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d802      	bhi.n	8007760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800775a:	230c      	movs	r3, #12
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e041      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a2f      	ldr	r2, [pc, #188]	; (8007820 <USB_SetTurnaroundTime+0x12c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d906      	bls.n	8007776 <USB_SetTurnaroundTime+0x82>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a2e      	ldr	r2, [pc, #184]	; (8007824 <USB_SetTurnaroundTime+0x130>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d802      	bhi.n	8007776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007770:	230b      	movs	r3, #11
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e036      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <USB_SetTurnaroundTime+0x130>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d906      	bls.n	800778c <USB_SetTurnaroundTime+0x98>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a29      	ldr	r2, [pc, #164]	; (8007828 <USB_SetTurnaroundTime+0x134>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d802      	bhi.n	800778c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007786:	230a      	movs	r3, #10
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e02b      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a26      	ldr	r2, [pc, #152]	; (8007828 <USB_SetTurnaroundTime+0x134>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d906      	bls.n	80077a2 <USB_SetTurnaroundTime+0xae>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a25      	ldr	r2, [pc, #148]	; (800782c <USB_SetTurnaroundTime+0x138>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d202      	bcs.n	80077a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800779c:	2309      	movs	r3, #9
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e020      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a21      	ldr	r2, [pc, #132]	; (800782c <USB_SetTurnaroundTime+0x138>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d306      	bcc.n	80077b8 <USB_SetTurnaroundTime+0xc4>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a20      	ldr	r2, [pc, #128]	; (8007830 <USB_SetTurnaroundTime+0x13c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d802      	bhi.n	80077b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077b2:	2308      	movs	r3, #8
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e015      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <USB_SetTurnaroundTime+0x13c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d906      	bls.n	80077ce <USB_SetTurnaroundTime+0xda>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <USB_SetTurnaroundTime+0x140>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d202      	bcs.n	80077ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077c8:	2307      	movs	r3, #7
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e00a      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077ce:	2306      	movs	r3, #6
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e007      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077da:	2309      	movs	r3, #9
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	e001      	b.n	80077e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077e0:	2309      	movs	r3, #9
 80077e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	00d8acbf 	.word	0x00d8acbf
 8007814:	00e4e1c0 	.word	0x00e4e1c0
 8007818:	00f42400 	.word	0x00f42400
 800781c:	01067380 	.word	0x01067380
 8007820:	011a499f 	.word	0x011a499f
 8007824:	01312cff 	.word	0x01312cff
 8007828:	014ca43f 	.word	0x014ca43f
 800782c:	016e3600 	.word	0x016e3600
 8007830:	01a6ab1f 	.word	0x01a6ab1f
 8007834:	01e84800 	.word	0x01e84800

08007838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f043 0201 	orr.w	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f023 0201 	bic.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d115      	bne.n	80078ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078aa:	2001      	movs	r0, #1
 80078ac:	f7fc ff0a 	bl	80046c4 <HAL_Delay>
      ms++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3301      	adds	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fa45 	bl	8008d46 <USB_GetMode>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d01e      	beq.n	8007900 <USB_SetCurrentMode+0x84>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b31      	cmp	r3, #49	; 0x31
 80078c6:	d9f0      	bls.n	80078aa <USB_SetCurrentMode+0x2e>
 80078c8:	e01a      	b.n	8007900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d115      	bne.n	80078fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078dc:	2001      	movs	r0, #1
 80078de:	f7fc fef1 	bl	80046c4 <HAL_Delay>
      ms++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fa2c 	bl	8008d46 <USB_GetMode>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <USB_SetCurrentMode+0x84>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b31      	cmp	r3, #49	; 0x31
 80078f8:	d9f0      	bls.n	80078dc <USB_SetCurrentMode+0x60>
 80078fa:	e001      	b.n	8007900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e005      	b.n	800790c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b32      	cmp	r3, #50	; 0x32
 8007904:	d101      	bne.n	800790a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007914:	b084      	sub	sp, #16
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e009      	b.n	8007948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3340      	adds	r3, #64	; 0x40
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	3301      	adds	r3, #1
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b0e      	cmp	r3, #14
 800794c:	d9f2      	bls.n	8007934 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800794e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d11c      	bne.n	800798e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007962:	f043 0302 	orr.w	r3, r3, #2
 8007966:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38
 800798c:	e00b      	b.n	80079a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ac:	461a      	mov	r2, r3
 80079ae:	2300      	movs	r3, #0
 80079b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	4619      	mov	r1, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c0:	461a      	mov	r2, r3
 80079c2:	680b      	ldr	r3, [r1, #0]
 80079c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10c      	bne.n	80079e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f965 	bl	8007ca4 <USB_SetDevSpeed>
 80079da:	e008      	b.n	80079ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f960 	bl	8007ca4 <USB_SetDevSpeed>
 80079e4:	e003      	b.n	80079ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079e6:	2103      	movs	r1, #3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f95b 	bl	8007ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ee:	2110      	movs	r1, #16
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8f3 	bl	8007bdc <USB_FlushTxFifo>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f91f 	bl	8007c44 <USB_FlushRxFifo>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	461a      	mov	r2, r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	e043      	b.n	8007ac2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a50:	d118      	bne.n	8007a84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	461a      	mov	r2, r3
 8007a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	e013      	b.n	8007a96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e008      	b.n	8007a96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	461a      	mov	r2, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d3b7      	bcc.n	8007a3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	e043      	b.n	8007b58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ae6:	d118      	bne.n	8007b1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	e013      	b.n	8007b2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	e008      	b.n	8007b2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	461a      	mov	r2, r3
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3301      	adds	r3, #1
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d3b7      	bcc.n	8007ad0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f043 0210 	orr.w	r2, r3, #16
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <USB_DevInit+0x2c4>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f043 0208 	orr.w	r2, r3, #8
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	f043 0304 	orr.w	r3, r3, #4
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bd4:	b004      	add	sp, #16
 8007bd6:	4770      	bx	lr
 8007bd8:	803c3800 	.word	0x803c3800

08007bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a13      	ldr	r2, [pc, #76]	; (8007c40 <USB_FlushTxFifo+0x64>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d901      	bls.n	8007bfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e01b      	b.n	8007c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	daf2      	bge.n	8007bea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	019b      	lsls	r3, r3, #6
 8007c0c:	f043 0220 	orr.w	r2, r3, #32
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3301      	adds	r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4a08      	ldr	r2, [pc, #32]	; (8007c40 <USB_FlushTxFifo+0x64>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d901      	bls.n	8007c26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e006      	b.n	8007c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d0f0      	beq.n	8007c14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	00030d40 	.word	0x00030d40

08007c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <USB_FlushRxFifo+0x5c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e018      	b.n	8007c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	daf2      	bge.n	8007c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2210      	movs	r2, #16
 8007c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <USB_FlushRxFifo+0x5c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d901      	bls.n	8007c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e006      	b.n	8007c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d0f0      	beq.n	8007c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	00030d40 	.word	0x00030d40

08007ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b087      	sub	sp, #28
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0306 	and.w	r3, r3, #6
 8007cee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
 8007cfa:	e00a      	b.n	8007d12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d002      	beq.n	8007d08 <USB_GetDevSpeed+0x32>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b06      	cmp	r3, #6
 8007d06:	d102      	bne.n	8007d0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	75fb      	strb	r3, [r7, #23]
 8007d0c:	e001      	b.n	8007d12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d0e:	230f      	movs	r3, #15
 8007d10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d13a      	bne.n	8007db2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	68f9      	ldr	r1, [r7, #12]
 8007d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d155      	bne.n	8007e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	791b      	ldrb	r3, [r3, #4]
 8007d8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	059b      	lsls	r3, r3, #22
 8007d96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	e036      	b.n	8007e20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db8:	69da      	ldr	r2, [r3, #28]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d11a      	bne.n	8007e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e06:	430b      	orrs	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	0151      	lsls	r1, r2, #5
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	440a      	add	r2, r1
 8007e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d161      	bne.n	8007f10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e62:	d11f      	bne.n	8007ea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	2101      	movs	r1, #1
 8007eda:	fa01 f303 	lsl.w	r3, r1, r3
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ee8:	4013      	ands	r3, r2
 8007eea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	0159      	lsls	r1, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	440b      	add	r3, r1
 8007f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f06:	4619      	mov	r1, r3
 8007f08:	4b35      	ldr	r3, [pc, #212]	; (8007fe0 <USB_DeactivateEndpoint+0x1b0>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	600b      	str	r3, [r1, #0]
 8007f0e:	e060      	b.n	8007fd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f26:	d11f      	bne.n	8007f68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	2101      	movs	r1, #1
 8007f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	43db      	mvns	r3, r3
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f88:	4013      	ands	r3, r2
 8007f8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f92:	69da      	ldr	r2, [r3, #28]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa2:	041b      	lsls	r3, r3, #16
 8007fa4:	43db      	mvns	r3, r3
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fac:	4013      	ands	r3, r2
 8007fae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	0159      	lsls	r1, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <USB_DeactivateEndpoint+0x1b4>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	ec337800 	.word	0xec337800
 8007fe4:	eff37800 	.word	0xeff37800

08007fe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b01      	cmp	r3, #1
 8008006:	f040 815c 	bne.w	80082c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d132      	bne.n	8008078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	0151      	lsls	r1, r2, #5
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	440a      	add	r2, r1
 800806c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008070:	0cdb      	lsrs	r3, r3, #19
 8008072:	04db      	lsls	r3, r3, #19
 8008074:	6113      	str	r3, [r2, #16]
 8008076:	e074      	b.n	8008162 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008092:	0cdb      	lsrs	r3, r3, #19
 8008094:	04db      	lsls	r3, r3, #19
 8008096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	6999      	ldr	r1, [r3, #24]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	440b      	add	r3, r1
 80080d4:	1e59      	subs	r1, r3, #1
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	fbb1 f3f3 	udiv	r3, r1, r3
 80080de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080e0:	4b9d      	ldr	r3, [pc, #628]	; (8008358 <USB_EPStartXfer+0x370>)
 80080e2:	400b      	ands	r3, r1
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	0148      	lsls	r0, r1, #5
 80080e8:	69f9      	ldr	r1, [r7, #28]
 80080ea:	4401      	add	r1, r0
 80080ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080f0:	4313      	orrs	r3, r2
 80080f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008100:	691a      	ldr	r2, [r3, #16]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800810a:	69b9      	ldr	r1, [r7, #24]
 800810c:	0148      	lsls	r0, r1, #5
 800810e:	69f9      	ldr	r1, [r7, #28]
 8008110:	4401      	add	r1, r0
 8008112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008116:	4313      	orrs	r3, r2
 8008118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	791b      	ldrb	r3, [r3, #4]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d11f      	bne.n	8008162 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	0151      	lsls	r1, r2, #5
 8008134:	69fa      	ldr	r2, [r7, #28]
 8008136:	440a      	add	r2, r1
 8008138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	440a      	add	r2, r1
 8008158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d14b      	bne.n	8008200 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d009      	beq.n	8008184 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	461a      	mov	r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	791b      	ldrb	r3, [r3, #4]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d128      	bne.n	80081de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d110      	bne.n	80081be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	0151      	lsls	r1, r2, #5
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	440a      	add	r2, r1
 80081b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	e00f      	b.n	80081de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	e133      	b.n	8008468 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	0151      	lsls	r1, r2, #5
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	440a      	add	r2, r1
 8008216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800821e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d015      	beq.n	8008254 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 811b 	beq.w	8008468 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	2101      	movs	r1, #1
 8008244:	fa01 f303 	lsl.w	r3, r1, r3
 8008248:	69f9      	ldr	r1, [r7, #28]
 800824a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800824e:	4313      	orrs	r3, r2
 8008250:	634b      	str	r3, [r1, #52]	; 0x34
 8008252:	e109      	b.n	8008468 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008260:	2b00      	cmp	r3, #0
 8008262:	d110      	bne.n	8008286 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800827e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	e00f      	b.n	80082a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	6919      	ldr	r1, [r3, #16]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	781a      	ldrb	r2, [r3, #0]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	b298      	uxth	r0, r3
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	4603      	mov	r3, r0
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fade 	bl	800887c <USB_WritePacket>
 80082c0:	e0d2      	b.n	8008468 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082dc:	0cdb      	lsrs	r3, r3, #19
 80082de:	04db      	lsls	r3, r3, #19
 80082e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d126      	bne.n	800835c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008324:	69b9      	ldr	r1, [r7, #24]
 8008326:	0148      	lsls	r0, r1, #5
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	4401      	add	r1, r0
 800832c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008330:	4313      	orrs	r3, r2
 8008332:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008352:	6113      	str	r3, [r2, #16]
 8008354:	e03a      	b.n	80083cc <USB_EPStartXfer+0x3e4>
 8008356:	bf00      	nop
 8008358:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	699a      	ldr	r2, [r3, #24]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	4413      	add	r3, r2
 8008366:	1e5a      	subs	r2, r3, #1
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008370:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	8afa      	ldrh	r2, [r7, #22]
 8008378:	fb03 f202 	mul.w	r2, r3, r2
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	8afb      	ldrh	r3, [r7, #22]
 8008390:	04d9      	lsls	r1, r3, #19
 8008392:	4b38      	ldr	r3, [pc, #224]	; (8008474 <USB_EPStartXfer+0x48c>)
 8008394:	400b      	ands	r3, r1
 8008396:	69b9      	ldr	r1, [r7, #24]
 8008398:	0148      	lsls	r0, r1, #5
 800839a:	69f9      	ldr	r1, [r7, #28]
 800839c:	4401      	add	r1, r0
 800839e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083a2:	4313      	orrs	r3, r2
 80083a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083bc:	69b9      	ldr	r1, [r7, #24]
 80083be:	0148      	lsls	r0, r1, #5
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	4401      	add	r1, r0
 80083c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083c8:	4313      	orrs	r3, r2
 80083ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10d      	bne.n	80083ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d009      	beq.n	80083ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6919      	ldr	r1, [r3, #16]
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	460a      	mov	r2, r1
 80083ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d128      	bne.n	8008448 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d110      	bne.n	8008428 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	e00f      	b.n	8008448 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	1ff80000 	.word	0x1ff80000

08008478 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b01      	cmp	r3, #1
 8008496:	f040 80ce 	bne.w	8008636 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d132      	bne.n	8008508 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	0cdb      	lsrs	r3, r3, #19
 8008502:	04db      	lsls	r3, r3, #19
 8008504:	6113      	str	r3, [r2, #16]
 8008506:	e04e      	b.n	80085a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	440a      	add	r2, r1
 800851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008522:	0cdb      	lsrs	r3, r3, #19
 8008524:	04db      	lsls	r3, r3, #19
 8008526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800854a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	699a      	ldr	r2, [r3, #24]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800857e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008596:	6939      	ldr	r1, [r7, #16]
 8008598:	0148      	lsls	r0, r1, #5
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	4401      	add	r1, r0
 800859e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085a2:	4313      	orrs	r3, r2
 80085a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11e      	bne.n	80085ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	461a      	mov	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	e097      	b.n	800871a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008608:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8083 	beq.w	800871a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	6979      	ldr	r1, [r7, #20]
 800862c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008630:	4313      	orrs	r3, r2
 8008632:	634b      	str	r3, [r1, #52]	; 0x34
 8008634:	e071      	b.n	800871a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	0cdb      	lsrs	r3, r3, #19
 8008652:	04db      	lsls	r3, r3, #19
 8008654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008678:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086c8:	6939      	ldr	r1, [r7, #16]
 80086ca:	0148      	lsls	r0, r1, #5
 80086cc:	6979      	ldr	r1, [r7, #20]
 80086ce:	4401      	add	r1, r0
 80086d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086d4:	4313      	orrs	r3, r2
 80086d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10d      	bne.n	80086fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6919      	ldr	r1, [r3, #16]
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f6:	460a      	mov	r2, r1
 80086f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	440a      	add	r2, r1
 8008710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008718:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d14a      	bne.n	80087dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800875a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800875e:	f040 8086 	bne.w	800886e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	7812      	ldrb	r2, [r2, #0]
 8008776:	0151      	lsls	r1, r2, #5
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	440a      	add	r2, r1
 800877c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008784:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	7812      	ldrb	r2, [r2, #0]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d902      	bls.n	80087c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	75fb      	strb	r3, [r7, #23]
          break;
 80087be:	e056      	b.n	800886e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d8:	d0e7      	beq.n	80087aa <USB_EPStopXfer+0x82>
 80087da:	e048      	b.n	800886e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f4:	d13b      	bne.n	800886e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008818:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	7812      	ldrb	r2, [r2, #0]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800883c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f242 7210 	movw	r2, #10000	; 0x2710
 800884a:	4293      	cmp	r3, r2
 800884c:	d902      	bls.n	8008854 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	75fb      	strb	r3, [r7, #23]
          break;
 8008852:	e00c      	b.n	800886e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800886c:	d0e7      	beq.n	800883e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008870:	4618      	mov	r0, r3
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800887c:	b480      	push	{r7}
 800887e:	b089      	sub	sp, #36	; 0x24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4611      	mov	r1, r2
 8008888:	461a      	mov	r2, r3
 800888a:	460b      	mov	r3, r1
 800888c:	71fb      	strb	r3, [r7, #7]
 800888e:	4613      	mov	r3, r2
 8008890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800889a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d123      	bne.n	80088ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088a2:	88bb      	ldrh	r3, [r7, #4]
 80088a4:	3303      	adds	r3, #3
 80088a6:	089b      	lsrs	r3, r3, #2
 80088a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	e018      	b.n	80088e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	031a      	lsls	r2, r3, #12
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088bc:	461a      	mov	r2, r3
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	3301      	adds	r3, #1
 80088c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	3301      	adds	r3, #1
 80088ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	3301      	adds	r3, #1
 80088da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	3301      	adds	r3, #1
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d3e2      	bcc.n	80088b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3724      	adds	r7, #36	; 0x24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b08b      	sub	sp, #44	; 0x2c
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	089b      	lsrs	r3, r3, #2
 8008912:	b29b      	uxth	r3, r3
 8008914:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	f003 0303 	and.w	r3, r3, #3
 800891c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800891e:	2300      	movs	r3, #0
 8008920:	623b      	str	r3, [r7, #32]
 8008922:	e014      	b.n	800894e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	3301      	adds	r3, #1
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	3301      	adds	r3, #1
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	3301      	adds	r3, #1
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	3301      	adds	r3, #1
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	3301      	adds	r3, #1
 800894c:	623b      	str	r3, [r7, #32]
 800894e:	6a3a      	ldr	r2, [r7, #32]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3e6      	bcc.n	8008924 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008956:	8bfb      	ldrh	r3, [r7, #30]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01e      	beq.n	800899a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008966:	461a      	mov	r2, r3
 8008968:	f107 0310 	add.w	r3, r7, #16
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	fa22 f303 	lsr.w	r3, r2, r3
 800897c:	b2da      	uxtb	r2, r3
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	701a      	strb	r2, [r3, #0]
      i++;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	3301      	adds	r3, #1
 8008986:	623b      	str	r3, [r7, #32]
      pDest++;
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	3301      	adds	r3, #1
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800898e:	8bfb      	ldrh	r3, [r7, #30]
 8008990:	3b01      	subs	r3, #1
 8008992:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008994:	8bfb      	ldrh	r3, [r7, #30]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1ea      	bne.n	8008970 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800899c:	4618      	mov	r0, r3
 800899e:	372c      	adds	r7, #44	; 0x2c
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d12c      	bne.n	8008a1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	db12      	blt.n	80089fc <USB_EPSetStall+0x54>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00f      	beq.n	80089fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	e02b      	b.n	8008a76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	db12      	blt.n	8008a56 <USB_EPSetStall+0xae>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00f      	beq.n	8008a56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d128      	bne.n	8008af2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008abe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	791b      	ldrb	r3, [r3, #4]
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d003      	beq.n	8008ad0 <USB_EPClearStall+0x4c>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	791b      	ldrb	r3, [r3, #4]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d138      	bne.n	8008b42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	e027      	b.n	8008b42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d003      	beq.n	8008b22 <USB_EPClearStall+0x9e>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	791b      	ldrb	r3, [r3, #4]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d10f      	bne.n	8008b42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	0151      	lsls	r1, r2, #5
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	440a      	add	r2, r1
 8008b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bca:	f023 0302 	bic.w	r3, r3, #2
 8008bce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bf8:	f023 0303 	bic.w	r3, r3, #3
 8008bfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c0c:	f043 0302 	orr.w	r3, r3, #2
 8008c10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4013      	ands	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c38:	68fb      	ldr	r3, [r7, #12]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	4013      	ands	r3, r2
 8008c68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	0c1b      	lsrs	r3, r3, #16
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	b29b      	uxth	r3, r3
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b087      	sub	sp, #28
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1a:	01db      	lsls	r3, r3, #7
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	4013      	ands	r3, r2
 8008d36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d38:	68bb      	ldr	r3, [r7, #8]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f003 0301 	and.w	r3, r3, #1
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	460b      	mov	r3, r1
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	333c      	adds	r3, #60	; 0x3c
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	4a26      	ldr	r2, [pc, #152]	; (8008e60 <USB_EP0_OutStart+0xb8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d90a      	bls.n	8008de2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ddc:	d101      	bne.n	8008de2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e037      	b.n	8008e52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	461a      	mov	r2, r3
 8008dea:	2300      	movs	r3, #0
 8008dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e10:	f043 0318 	orr.w	r3, r3, #24
 8008e14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d10f      	bne.n	8008e50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e36:	461a      	mov	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	4f54300a 	.word	0x4f54300a

08008e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4a13      	ldr	r2, [pc, #76]	; (8008ec8 <USB_CoreReset+0x64>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d901      	bls.n	8008e82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e01b      	b.n	8008eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	daf2      	bge.n	8008e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f043 0201 	orr.w	r2, r3, #1
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a09      	ldr	r2, [pc, #36]	; (8008ec8 <USB_CoreReset+0x64>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d901      	bls.n	8008eac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e006      	b.n	8008eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d0f0      	beq.n	8008e9a <USB_CoreReset+0x36>

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	00030d40 	.word	0x00030d40

08008ecc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ed8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008edc:	f00e feaa 	bl	8017c34 <USBD_static_malloc>
 8008ee0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32b0      	adds	r2, #176	; 0xb0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e0d4      	b.n	80090a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008efc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008f00:	2100      	movs	r1, #0
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f010 fa90 	bl	8019428 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32b0      	adds	r2, #176	; 0xb0
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32b0      	adds	r2, #176	; 0xb0
 8008f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7c1b      	ldrb	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d138      	bne.n	8008fa6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f34:	4b5e      	ldr	r3, [pc, #376]	; (80090b0 <USBD_CDC_Init+0x1e4>)
 8008f36:	7819      	ldrb	r1, [r3, #0]
 8008f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f00e fd55 	bl	80179ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f44:	4b5a      	ldr	r3, [pc, #360]	; (80090b0 <USBD_CDC_Init+0x1e4>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 020f 	and.w	r2, r3, #15
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	3324      	adds	r3, #36	; 0x24
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f5e:	4b55      	ldr	r3, [pc, #340]	; (80090b4 <USBD_CDC_Init+0x1e8>)
 8008f60:	7819      	ldrb	r1, [r3, #0]
 8008f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f66:	2202      	movs	r2, #2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f00e fd40 	bl	80179ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f6e:	4b51      	ldr	r3, [pc, #324]	; (80090b4 <USBD_CDC_Init+0x1e8>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f86:	2201      	movs	r2, #1
 8008f88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f8a:	4b4b      	ldr	r3, [pc, #300]	; (80090b8 <USBD_CDC_Init+0x1ec>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 020f 	and.w	r2, r3, #15
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	3326      	adds	r3, #38	; 0x26
 8008fa0:	2210      	movs	r2, #16
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	e035      	b.n	8009012 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fa6:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <USBD_CDC_Init+0x1e4>)
 8008fa8:	7819      	ldrb	r1, [r3, #0]
 8008faa:	2340      	movs	r3, #64	; 0x40
 8008fac:	2202      	movs	r2, #2
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f00e fd1d 	bl	80179ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fb4:	4b3e      	ldr	r3, [pc, #248]	; (80090b0 <USBD_CDC_Init+0x1e4>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f003 020f 	and.w	r2, r3, #15
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	440b      	add	r3, r1
 8008fc8:	3324      	adds	r3, #36	; 0x24
 8008fca:	2201      	movs	r2, #1
 8008fcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fce:	4b39      	ldr	r3, [pc, #228]	; (80090b4 <USBD_CDC_Init+0x1e8>)
 8008fd0:	7819      	ldrb	r1, [r3, #0]
 8008fd2:	2340      	movs	r3, #64	; 0x40
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f00e fd09 	bl	80179ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fdc:	4b35      	ldr	r3, [pc, #212]	; (80090b4 <USBD_CDC_Init+0x1e8>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 020f 	and.w	r2, r3, #15
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	440b      	add	r3, r1
 8008ff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ff8:	4b2f      	ldr	r3, [pc, #188]	; (80090b8 <USBD_CDC_Init+0x1ec>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 020f 	and.w	r2, r3, #15
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	3326      	adds	r3, #38	; 0x26
 800900e:	2210      	movs	r2, #16
 8009010:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009012:	4b29      	ldr	r3, [pc, #164]	; (80090b8 <USBD_CDC_Init+0x1ec>)
 8009014:	7819      	ldrb	r1, [r3, #0]
 8009016:	2308      	movs	r3, #8
 8009018:	2203      	movs	r2, #3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f00e fce7 	bl	80179ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009020:	4b25      	ldr	r3, [pc, #148]	; (80090b8 <USBD_CDC_Init+0x1ec>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 020f 	and.w	r2, r3, #15
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	3324      	adds	r3, #36	; 0x24
 8009036:	2201      	movs	r2, #1
 8009038:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	33b0      	adds	r3, #176	; 0xb0
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009070:	2302      	movs	r3, #2
 8009072:	e018      	b.n	80090a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	7c1b      	ldrb	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800907c:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <USBD_CDC_Init+0x1e8>)
 800907e:	7819      	ldrb	r1, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f00e fd9e 	bl	8017bcc <USBD_LL_PrepareReceive>
 8009090:	e008      	b.n	80090a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <USBD_CDC_Init+0x1e8>)
 8009094:	7819      	ldrb	r1, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800909c:	2340      	movs	r3, #64	; 0x40
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f00e fd94 	bl	8017bcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	200000db 	.word	0x200000db
 80090b4:	200000dc 	.word	0x200000dc
 80090b8:	200000dd 	.word	0x200000dd

080090bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80090c8:	4b3a      	ldr	r3, [pc, #232]	; (80091b4 <USBD_CDC_DeInit+0xf8>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f00e fcb3 	bl	8017a3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80090d4:	4b37      	ldr	r3, [pc, #220]	; (80091b4 <USBD_CDC_DeInit+0xf8>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f003 020f 	and.w	r2, r3, #15
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	440b      	add	r3, r1
 80090e8:	3324      	adds	r3, #36	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80090ee:	4b32      	ldr	r3, [pc, #200]	; (80091b8 <USBD_CDC_DeInit+0xfc>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f00e fca0 	bl	8017a3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80090fa:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <USBD_CDC_DeInit+0xfc>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 020f 	and.w	r2, r3, #15
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009112:	2200      	movs	r2, #0
 8009114:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009116:	4b29      	ldr	r3, [pc, #164]	; (80091bc <USBD_CDC_DeInit+0x100>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f00e fc8c 	bl	8017a3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009122:	4b26      	ldr	r3, [pc, #152]	; (80091bc <USBD_CDC_DeInit+0x100>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f003 020f 	and.w	r2, r3, #15
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	3324      	adds	r3, #36	; 0x24
 8009138:	2200      	movs	r2, #0
 800913a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800913c:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <USBD_CDC_DeInit+0x100>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 020f 	and.w	r2, r3, #15
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	440b      	add	r3, r1
 8009150:	3326      	adds	r3, #38	; 0x26
 8009152:	2200      	movs	r2, #0
 8009154:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	32b0      	adds	r2, #176	; 0xb0
 8009160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01f      	beq.n	80091a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	33b0      	adds	r3, #176	; 0xb0
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	32b0      	adds	r2, #176	; 0xb0
 8009186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918a:	4618      	mov	r0, r3
 800918c:	f00e fd60 	bl	8017c50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	32b0      	adds	r2, #176	; 0xb0
 800919a:	2100      	movs	r1, #0
 800919c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	200000db 	.word	0x200000db
 80091b8:	200000dc 	.word	0x200000dc
 80091bc:	200000dd 	.word	0x200000dd

080091c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	32b0      	adds	r2, #176	; 0xb0
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e0bf      	b.n	8009370 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d050      	beq.n	800929e <USBD_CDC_Setup+0xde>
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	f040 80af 	bne.w	8009360 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d03a      	beq.n	8009280 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b25b      	sxtb	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	da1b      	bge.n	800924c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	33b0      	adds	r3, #176	; 0xb0
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800922a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	88d2      	ldrh	r2, [r2, #6]
 8009230:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	88db      	ldrh	r3, [r3, #6]
 8009236:	2b07      	cmp	r3, #7
 8009238:	bf28      	it	cs
 800923a:	2307      	movcs	r3, #7
 800923c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	89fa      	ldrh	r2, [r7, #14]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fd89 	bl	800ad5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800924a:	e090      	b.n	800936e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	785a      	ldrb	r2, [r3, #1]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	88db      	ldrh	r3, [r3, #6]
 800925a:	2b3f      	cmp	r3, #63	; 0x3f
 800925c:	d803      	bhi.n	8009266 <USBD_CDC_Setup+0xa6>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	88db      	ldrh	r3, [r3, #6]
 8009262:	b2da      	uxtb	r2, r3
 8009264:	e000      	b.n	8009268 <USBD_CDC_Setup+0xa8>
 8009266:	2240      	movs	r2, #64	; 0x40
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800926e:	6939      	ldr	r1, [r7, #16]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009276:	461a      	mov	r2, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 fd9b 	bl	800adb4 <USBD_CtlPrepareRx>
      break;
 800927e:	e076      	b.n	800936e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	33b0      	adds	r3, #176	; 0xb0
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	7850      	ldrb	r0, [r2, #1]
 8009296:	2200      	movs	r2, #0
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	4798      	blx	r3
      break;
 800929c:	e067      	b.n	800936e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b0b      	cmp	r3, #11
 80092a4:	d851      	bhi.n	800934a <USBD_CDC_Setup+0x18a>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <USBD_CDC_Setup+0xec>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	08009359 	.word	0x08009359
 80092b4:	0800934b 	.word	0x0800934b
 80092b8:	0800934b 	.word	0x0800934b
 80092bc:	0800934b 	.word	0x0800934b
 80092c0:	0800934b 	.word	0x0800934b
 80092c4:	0800934b 	.word	0x0800934b
 80092c8:	0800934b 	.word	0x0800934b
 80092cc:	0800934b 	.word	0x0800934b
 80092d0:	0800934b 	.word	0x0800934b
 80092d4:	08009307 	.word	0x08009307
 80092d8:	08009331 	.word	0x08009331
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d107      	bne.n	80092f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092e8:	f107 030a 	add.w	r3, r7, #10
 80092ec:	2202      	movs	r2, #2
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 fd33 	bl	800ad5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092f6:	e032      	b.n	800935e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 fcbd 	bl	800ac7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	75fb      	strb	r3, [r7, #23]
          break;
 8009304:	e02b      	b.n	800935e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b03      	cmp	r3, #3
 8009310:	d107      	bne.n	8009322 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009312:	f107 030d 	add.w	r3, r7, #13
 8009316:	2201      	movs	r2, #1
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fd1e 	bl	800ad5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009320:	e01d      	b.n	800935e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fca8 	bl	800ac7a <USBD_CtlError>
            ret = USBD_FAIL;
 800932a:	2303      	movs	r3, #3
 800932c:	75fb      	strb	r3, [r7, #23]
          break;
 800932e:	e016      	b.n	800935e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b03      	cmp	r3, #3
 800933a:	d00f      	beq.n	800935c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 fc9b 	bl	800ac7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009344:	2303      	movs	r3, #3
 8009346:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009348:	e008      	b.n	800935c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fc94 	bl	800ac7a <USBD_CtlError>
          ret = USBD_FAIL;
 8009352:	2303      	movs	r3, #3
 8009354:	75fb      	strb	r3, [r7, #23]
          break;
 8009356:	e002      	b.n	800935e <USBD_CDC_Setup+0x19e>
          break;
 8009358:	bf00      	nop
 800935a:	e008      	b.n	800936e <USBD_CDC_Setup+0x1ae>
          break;
 800935c:	bf00      	nop
      }
      break;
 800935e:	e006      	b.n	800936e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fc89 	bl	800ac7a <USBD_CtlError>
      ret = USBD_FAIL;
 8009368:	2303      	movs	r3, #3
 800936a:	75fb      	strb	r3, [r7, #23]
      break;
 800936c:	bf00      	nop
  }

  return (uint8_t)ret;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800938a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	; 0xb0
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	e065      	b.n	800946e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	32b0      	adds	r2, #176	; 0xb0
 80093ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093b2:	78fb      	ldrb	r3, [r7, #3]
 80093b4:	f003 020f 	and.w	r2, r3, #15
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	3318      	adds	r3, #24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d02f      	beq.n	800942c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	f003 020f 	and.w	r2, r3, #15
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	4613      	mov	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	3318      	adds	r3, #24
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	f003 010f 	and.w	r1, r3, #15
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	460b      	mov	r3, r1
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	440b      	add	r3, r1
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4403      	add	r3, r0
 80093f4:	3348      	adds	r3, #72	; 0x48
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009402:	2b00      	cmp	r3, #0
 8009404:	d112      	bne.n	800942c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009406:	78fb      	ldrb	r3, [r7, #3]
 8009408:	f003 020f 	and.w	r2, r3, #15
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	3318      	adds	r3, #24
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800941e:	78f9      	ldrb	r1, [r7, #3]
 8009420:	2300      	movs	r3, #0
 8009422:	2200      	movs	r2, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f00e fbb0 	bl	8017b8a <USBD_LL_Transmit>
 800942a:	e01f      	b.n	800946c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	33b0      	adds	r3, #176	; 0xb0
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d010      	beq.n	800946c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	33b0      	adds	r3, #176	; 0xb0
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	32b0      	adds	r2, #176	; 0xb0
 800948c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009490:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	32b0      	adds	r2, #176	; 0xb0
 800949c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e01a      	b.n	80094de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f00e fbae 	bl	8017c0e <USBD_LL_GetRxDataSize>
 80094b2:	4602      	mov	r2, r0
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	33b0      	adds	r3, #176	; 0xb0
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094d8:	4611      	mov	r1, r2
 80094da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	32b0      	adds	r2, #176	; 0xb0
 80094f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	e025      	b.n	8009554 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	33b0      	adds	r3, #176	; 0xb0
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01a      	beq.n	8009552 <USBD_CDC_EP0_RxReady+0x6c>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009522:	2bff      	cmp	r3, #255	; 0xff
 8009524:	d015      	beq.n	8009552 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	33b0      	adds	r3, #176	; 0xb0
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800953e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009546:	b292      	uxth	r2, r2
 8009548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009564:	2182      	movs	r1, #130	; 0x82
 8009566:	4818      	ldr	r0, [pc, #96]	; (80095c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009568:	f000 fd4f 	bl	800a00a <USBD_GetEpDesc>
 800956c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800956e:	2101      	movs	r1, #1
 8009570:	4815      	ldr	r0, [pc, #84]	; (80095c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009572:	f000 fd4a 	bl	800a00a <USBD_GetEpDesc>
 8009576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009578:	2181      	movs	r1, #129	; 0x81
 800957a:	4813      	ldr	r0, [pc, #76]	; (80095c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800957c:	f000 fd45 	bl	800a00a <USBD_GetEpDesc>
 8009580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2210      	movs	r2, #16
 800958c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2200      	movs	r2, #0
 8009598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800959c:	711a      	strb	r2, [r3, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d006      	beq.n	80095b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b0:	711a      	strb	r2, [r3, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2243      	movs	r2, #67	; 0x43
 80095ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095bc:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20000098 	.word	0x20000098

080095cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095d4:	2182      	movs	r1, #130	; 0x82
 80095d6:	4818      	ldr	r0, [pc, #96]	; (8009638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095d8:	f000 fd17 	bl	800a00a <USBD_GetEpDesc>
 80095dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095de:	2101      	movs	r1, #1
 80095e0:	4815      	ldr	r0, [pc, #84]	; (8009638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095e2:	f000 fd12 	bl	800a00a <USBD_GetEpDesc>
 80095e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095e8:	2181      	movs	r1, #129	; 0x81
 80095ea:	4813      	ldr	r0, [pc, #76]	; (8009638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095ec:	f000 fd0d 	bl	800a00a <USBD_GetEpDesc>
 80095f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2210      	movs	r2, #16
 80095fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2200      	movs	r2, #0
 8009608:	711a      	strb	r2, [r3, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f042 0202 	orr.w	r2, r2, #2
 8009610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d006      	beq.n	8009626 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	711a      	strb	r2, [r3, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f042 0202 	orr.w	r2, r2, #2
 8009624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2243      	movs	r2, #67	; 0x43
 800962a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000098 	.word	0x20000098

0800963c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009644:	2182      	movs	r1, #130	; 0x82
 8009646:	4818      	ldr	r0, [pc, #96]	; (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009648:	f000 fcdf 	bl	800a00a <USBD_GetEpDesc>
 800964c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800964e:	2101      	movs	r1, #1
 8009650:	4815      	ldr	r0, [pc, #84]	; (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009652:	f000 fcda 	bl	800a00a <USBD_GetEpDesc>
 8009656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009658:	2181      	movs	r1, #129	; 0x81
 800965a:	4813      	ldr	r0, [pc, #76]	; (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800965c:	f000 fcd5 	bl	800a00a <USBD_GetEpDesc>
 8009660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2210      	movs	r2, #16
 800966c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d006      	beq.n	8009682 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2200      	movs	r2, #0
 8009678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800967c:	711a      	strb	r2, [r3, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009690:	711a      	strb	r2, [r3, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2243      	movs	r2, #67	; 0x43
 800969a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000098 	.word	0x20000098

080096ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	220a      	movs	r2, #10
 80096b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096ba:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20000054 	.word	0x20000054

080096cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	e009      	b.n	80096f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	33b0      	adds	r3, #176	; 0xb0
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	32b0      	adds	r2, #176	; 0xb0
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009722:	2303      	movs	r3, #3
 8009724:	e008      	b.n	8009738 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	371c      	adds	r7, #28
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	32b0      	adds	r2, #176	; 0xb0
 8009758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009764:	2303      	movs	r3, #3
 8009766:	e004      	b.n	8009772 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	32b0      	adds	r2, #176	; 0xb0
 8009792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009796:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	32b0      	adds	r2, #176	; 0xb0
 80097a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e025      	b.n	80097fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d11f      	bne.n	80097fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2201      	movs	r2, #1
 80097c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80097c4:	4b10      	ldr	r3, [pc, #64]	; (8009808 <USBD_CDC_TransmitPacket+0x88>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 020f 	and.w	r2, r3, #15
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4403      	add	r3, r0
 80097de:	3318      	adds	r3, #24
 80097e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <USBD_CDC_TransmitPacket+0x88>)
 80097e4:	7819      	ldrb	r1, [r3, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f00e f9c9 	bl	8017b8a <USBD_LL_Transmit>

    ret = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	200000db 	.word	0x200000db

0800980c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	32b0      	adds	r2, #176	; 0xb0
 800981e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009822:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	32b0      	adds	r2, #176	; 0xb0
 800982e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009836:	2303      	movs	r3, #3
 8009838:	e018      	b.n	800986c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7c1b      	ldrb	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10a      	bne.n	8009858 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <USBD_CDC_ReceivePacket+0x68>)
 8009844:	7819      	ldrb	r1, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800984c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f00e f9bb 	bl	8017bcc <USBD_LL_PrepareReceive>
 8009856:	e008      	b.n	800986a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <USBD_CDC_ReceivePacket+0x68>)
 800985a:	7819      	ldrb	r1, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009862:	2340      	movs	r3, #64	; 0x40
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f00e f9b1 	bl	8017bcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	200000dc 	.word	0x200000dc

08009878 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4613      	mov	r3, r2
 8009884:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	e01f      	b.n	80098d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	79fa      	ldrb	r2, [r7, #7]
 80098c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f00e f82b 	bl	8017920 <USBD_LL_Init>
 80098ca:	4603      	mov	r3, r0
 80098cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e025      	b.n	800993c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	32ae      	adds	r2, #174	; 0xae
 8009902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00f      	beq.n	800992c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	32ae      	adds	r2, #174	; 0xae
 8009916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	f107 020e 	add.w	r2, r7, #14
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	4602      	mov	r2, r0
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f00e f833 	bl	80179b8 <USBD_LL_Start>
 8009952:	4603      	mov	r3, r0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	78fa      	ldrb	r2, [r7, #3]
 8009996:	4611      	mov	r1, r2
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	4611      	mov	r1, r2
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	4798      	blx	r3
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f001 f908 	bl	800ac06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a04:	461a      	mov	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d01a      	beq.n	8009a50 <USBD_LL_SetupStage+0x72>
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d822      	bhi.n	8009a64 <USBD_LL_SetupStage+0x86>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <USBD_LL_SetupStage+0x4a>
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d00a      	beq.n	8009a3c <USBD_LL_SetupStage+0x5e>
 8009a26:	e01d      	b.n	8009a64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fb5f 	bl	800a0f4 <USBD_StdDevReq>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]
      break;
 8009a3a:	e020      	b.n	8009a7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fbc7 	bl	800a1d8 <USBD_StdItfReq>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a4e:	e016      	b.n	8009a7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc29 	bl	800a2b0 <USBD_StdEPReq>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]
      break;
 8009a62:	e00c      	b.n	8009a7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f00e f800 	bl	8017a78 <USBD_LL_StallEP>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a7c:	bf00      	nop
  }

  return ret;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	460b      	mov	r3, r1
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d16e      	bne.n	8009b7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009aa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	f040 8098 	bne.w	8009be4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d913      	bls.n	8009ae8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	1ad2      	subs	r2, r2, r3
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	bf28      	it	cs
 8009ada:	4613      	movcs	r3, r2
 8009adc:	461a      	mov	r2, r3
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f001 f984 	bl	800adee <USBD_CtlContinueRx>
 8009ae6:	e07d      	b.n	8009be4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d014      	beq.n	8009b20 <USBD_LL_DataOutStage+0x98>
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d81d      	bhi.n	8009b36 <USBD_LL_DataOutStage+0xae>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <USBD_LL_DataOutStage+0x7c>
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d003      	beq.n	8009b0a <USBD_LL_DataOutStage+0x82>
 8009b02:	e018      	b.n	8009b36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75bb      	strb	r3, [r7, #22]
            break;
 8009b08:	e018      	b.n	8009b3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	4619      	mov	r1, r3
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fa5e 	bl	8009fd6 <USBD_CoreFindIF>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75bb      	strb	r3, [r7, #22]
            break;
 8009b1e:	e00d      	b.n	8009b3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	4619      	mov	r1, r3
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 fa60 	bl	8009ff0 <USBD_CoreFindEP>
 8009b30:	4603      	mov	r3, r0
 8009b32:	75bb      	strb	r3, [r7, #22]
            break;
 8009b34:	e002      	b.n	8009b3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75bb      	strb	r3, [r7, #22]
            break;
 8009b3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009b3c:	7dbb      	ldrb	r3, [r7, #22]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d119      	bne.n	8009b76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d113      	bne.n	8009b76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009b4e:	7dba      	ldrb	r2, [r7, #22]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	32ae      	adds	r2, #174	; 0xae
 8009b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b5e:	7dba      	ldrb	r2, [r7, #22]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b66:	7dba      	ldrb	r2, [r7, #22]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	32ae      	adds	r2, #174	; 0xae
 8009b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f001 f94a 	bl	800ae10 <USBD_CtlSendStatus>
 8009b7c:	e032      	b.n	8009be4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b7e:	7afb      	ldrb	r3, [r7, #11]
 8009b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 fa31 	bl	8009ff0 <USBD_CoreFindEP>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b92:	7dbb      	ldrb	r3, [r7, #22]
 8009b94:	2bff      	cmp	r3, #255	; 0xff
 8009b96:	d025      	beq.n	8009be4 <USBD_LL_DataOutStage+0x15c>
 8009b98:	7dbb      	ldrb	r3, [r7, #22]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d122      	bne.n	8009be4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d117      	bne.n	8009bda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009baa:	7dba      	ldrb	r2, [r7, #22]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	32ae      	adds	r2, #174	; 0xae
 8009bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00f      	beq.n	8009bda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009bba:	7dba      	ldrb	r2, [r7, #22]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009bc2:	7dba      	ldrb	r2, [r7, #22]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	32ae      	adds	r2, #174	; 0xae
 8009bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	7afa      	ldrb	r2, [r7, #11]
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	4798      	blx	r3
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	e000      	b.n	8009be6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b086      	sub	sp, #24
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009bfc:	7afb      	ldrb	r3, [r7, #11]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d16f      	bne.n	8009ce2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3314      	adds	r3, #20
 8009c06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d15a      	bne.n	8009cc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d914      	bls.n	8009c48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	1ad2      	subs	r2, r2, r3
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f001 f8ac 	bl	800ad92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2100      	movs	r1, #0
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f00d ffc3 	bl	8017bcc <USBD_LL_PrepareReceive>
 8009c46:	e03f      	b.n	8009cc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	68da      	ldr	r2, [r3, #12]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d11c      	bne.n	8009c8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d316      	bcc.n	8009c8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d20f      	bcs.n	8009c8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2100      	movs	r1, #0
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f001 f88d 	bl	800ad92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c80:	2300      	movs	r3, #0
 8009c82:	2200      	movs	r2, #0
 8009c84:	2100      	movs	r1, #0
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f00d ffa0 	bl	8017bcc <USBD_LL_PrepareReceive>
 8009c8c:	e01c      	b.n	8009cc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d10f      	bne.n	8009cba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cba:	2180      	movs	r1, #128	; 0x80
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f00d fedb 	bl	8017a78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f001 f8b7 	bl	800ae36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d03a      	beq.n	8009d48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff fe42 	bl	800995c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ce0:	e032      	b.n	8009d48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	4619      	mov	r1, r3
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f97f 	bl	8009ff0 <USBD_CoreFindEP>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	2bff      	cmp	r3, #255	; 0xff
 8009cfa:	d025      	beq.n	8009d48 <USBD_LL_DataInStage+0x15a>
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d122      	bne.n	8009d48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d11c      	bne.n	8009d48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d0e:	7dfa      	ldrb	r2, [r7, #23]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	32ae      	adds	r2, #174	; 0xae
 8009d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d014      	beq.n	8009d48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009d1e:	7dfa      	ldrb	r2, [r7, #23]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009d26:	7dfa      	ldrb	r2, [r7, #23]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	32ae      	adds	r2, #174	; 0xae
 8009d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	7afa      	ldrb	r2, [r7, #11]
 8009d34:	4611      	mov	r1, r2
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	4798      	blx	r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009d3e:	7dbb      	ldrb	r3, [r7, #22]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009d44:	7dbb      	ldrb	r3, [r7, #22]
 8009d46:	e000      	b.n	8009d4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d014      	beq.n	8009db8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00e      	beq.n	8009db8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6852      	ldr	r2, [r2, #4]
 8009da6:	b2d2      	uxtb	r2, r2
 8009da8:	4611      	mov	r1, r2
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f00d fe15 	bl	80179ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2240      	movs	r2, #64	; 0x40
 8009dd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dd4:	2340      	movs	r3, #64	; 0x40
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2180      	movs	r1, #128	; 0x80
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f00d fe07 	bl	80179ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2240      	movs	r2, #64	; 0x40
 8009dea:	621a      	str	r2, [r3, #32]

  return ret;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2204      	movs	r2, #4
 8009e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d106      	bne.n	8009e64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d110      	bne.n	8009ea8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	32ae      	adds	r2, #174	; 0xae
 8009ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e01c      	b.n	8009f0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d115      	bne.n	8009f0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	32ae      	adds	r2, #174	; 0xae
 8009eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	32ae      	adds	r2, #174	; 0xae
 8009efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	4611      	mov	r1, r2
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	32ae      	adds	r2, #174	; 0xae
 8009f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e01c      	b.n	8009f72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d115      	bne.n	8009f70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32ae      	adds	r2, #174	; 0xae
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	32ae      	adds	r2, #174	; 0xae
 8009f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	78fa      	ldrb	r2, [r7, #3]
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00e      	beq.n	8009fcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	6852      	ldr	r2, [r2, #4]
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	4798      	blx	r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fe2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ffc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b086      	sub	sp, #24
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	b29a      	uxth	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	429a      	cmp	r2, r3
 800a030:	d920      	bls.n	800a074 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b29b      	uxth	r3, r3
 800a038:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a03a:	e013      	b.n	800a064 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a03c:	f107 030a 	add.w	r3, r7, #10
 800a040:	4619      	mov	r1, r3
 800a042:	6978      	ldr	r0, [r7, #20]
 800a044:	f000 f81b 	bl	800a07e <USBD_GetNextDesc>
 800a048:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	785b      	ldrb	r3, [r3, #1]
 800a04e:	2b05      	cmp	r3, #5
 800a050:	d108      	bne.n	800a064 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	789b      	ldrb	r3, [r3, #2]
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d008      	beq.n	800a072 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	885b      	ldrh	r3, [r3, #2]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	897b      	ldrh	r3, [r7, #10]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d8e5      	bhi.n	800a03c <USBD_GetEpDesc+0x32>
 800a070:	e000      	b.n	800a074 <USBD_GetEpDesc+0x6a>
          break;
 800a072:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a074:	693b      	ldr	r3, [r7, #16]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a07e:	b480      	push	{r7}
 800a080:	b085      	sub	sp, #20
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	881a      	ldrh	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	b29b      	uxth	r3, r3
 800a096:	4413      	add	r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0d6:	8a3b      	ldrh	r3, [r7, #16]
 800a0d8:	021b      	lsls	r3, r3, #8
 800a0da:	b21a      	sxth	r2, r3
 800a0dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b21b      	sxth	r3, r3
 800a0e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a0e6:	89fb      	ldrh	r3, [r7, #14]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	371c      	adds	r7, #28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a10a:	2b40      	cmp	r3, #64	; 0x40
 800a10c:	d005      	beq.n	800a11a <USBD_StdDevReq+0x26>
 800a10e:	2b40      	cmp	r3, #64	; 0x40
 800a110:	d857      	bhi.n	800a1c2 <USBD_StdDevReq+0xce>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00f      	beq.n	800a136 <USBD_StdDevReq+0x42>
 800a116:	2b20      	cmp	r3, #32
 800a118:	d153      	bne.n	800a1c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	32ae      	adds	r2, #174	; 0xae
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	4798      	blx	r3
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
      break;
 800a134:	e04a      	b.n	800a1cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	d83b      	bhi.n	800a1b6 <USBD_StdDevReq+0xc2>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <USBD_StdDevReq+0x50>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a1ad 	.word	0x0800a1ad
 800a14c:	0800a1b7 	.word	0x0800a1b7
 800a150:	0800a1a3 	.word	0x0800a1a3
 800a154:	0800a1b7 	.word	0x0800a1b7
 800a158:	0800a177 	.word	0x0800a177
 800a15c:	0800a16d 	.word	0x0800a16d
 800a160:	0800a1b7 	.word	0x0800a1b7
 800a164:	0800a18f 	.word	0x0800a18f
 800a168:	0800a181 	.word	0x0800a181
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa3c 	bl	800a5ec <USBD_GetDescriptor>
          break;
 800a174:	e024      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fba1 	bl	800a8c0 <USBD_SetAddress>
          break;
 800a17e:	e01f      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fbe0 	bl	800a948 <USBD_SetConfig>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]
          break;
 800a18c:	e018      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fc83 	bl	800aa9c <USBD_GetConfig>
          break;
 800a196:	e013      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fcb4 	bl	800ab08 <USBD_GetStatus>
          break;
 800a1a0:	e00e      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fce3 	bl	800ab70 <USBD_SetFeature>
          break;
 800a1aa:	e009      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fd07 	bl	800abc2 <USBD_ClrFeature>
          break;
 800a1b4:	e004      	b.n	800a1c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fd5e 	bl	800ac7a <USBD_CtlError>
          break;
 800a1be:	bf00      	nop
      }
      break;
 800a1c0:	e004      	b.n	800a1cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fd58 	bl	800ac7a <USBD_CtlError>
      break;
 800a1ca:	bf00      	nop
  }

  return ret;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop

0800a1d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d005      	beq.n	800a1fe <USBD_StdItfReq+0x26>
 800a1f2:	2b40      	cmp	r3, #64	; 0x40
 800a1f4:	d852      	bhi.n	800a29c <USBD_StdItfReq+0xc4>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <USBD_StdItfReq+0x26>
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	d14e      	bne.n	800a29c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a204:	b2db      	uxtb	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d840      	bhi.n	800a28e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	889b      	ldrh	r3, [r3, #4]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b01      	cmp	r3, #1
 800a214:	d836      	bhi.n	800a284 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	889b      	ldrh	r3, [r3, #4]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff fed9 	bl	8009fd6 <USBD_CoreFindIF>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a228:	7bbb      	ldrb	r3, [r7, #14]
 800a22a:	2bff      	cmp	r3, #255	; 0xff
 800a22c:	d01d      	beq.n	800a26a <USBD_StdItfReq+0x92>
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d11a      	bne.n	800a26a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a234:	7bba      	ldrb	r2, [r7, #14]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	32ae      	adds	r2, #174	; 0xae
 800a23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00f      	beq.n	800a264 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a244:	7bba      	ldrb	r2, [r7, #14]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a24c:	7bba      	ldrb	r2, [r7, #14]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32ae      	adds	r2, #174	; 0xae
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a262:	e004      	b.n	800a26e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a268:	e001      	b.n	800a26e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a26a:	2303      	movs	r3, #3
 800a26c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	88db      	ldrh	r3, [r3, #6]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d110      	bne.n	800a298 <USBD_StdItfReq+0xc0>
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10d      	bne.n	800a298 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fdc7 	bl	800ae10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a282:	e009      	b.n	800a298 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fcf7 	bl	800ac7a <USBD_CtlError>
          break;
 800a28c:	e004      	b.n	800a298 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fcf2 	bl	800ac7a <USBD_CtlError>
          break;
 800a296:	e000      	b.n	800a29a <USBD_StdItfReq+0xc2>
          break;
 800a298:	bf00      	nop
      }
      break;
 800a29a:	e004      	b.n	800a2a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fceb 	bl	800ac7a <USBD_CtlError>
      break;
 800a2a4:	bf00      	nop
  }

  return ret;
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	889b      	ldrh	r3, [r3, #4]
 800a2c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2cc:	2b40      	cmp	r3, #64	; 0x40
 800a2ce:	d007      	beq.n	800a2e0 <USBD_StdEPReq+0x30>
 800a2d0:	2b40      	cmp	r3, #64	; 0x40
 800a2d2:	f200 817f 	bhi.w	800a5d4 <USBD_StdEPReq+0x324>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d02a      	beq.n	800a330 <USBD_StdEPReq+0x80>
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	f040 817a 	bne.w	800a5d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fe83 	bl	8009ff0 <USBD_CoreFindEP>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2ee:	7b7b      	ldrb	r3, [r7, #13]
 800a2f0:	2bff      	cmp	r3, #255	; 0xff
 800a2f2:	f000 8174 	beq.w	800a5de <USBD_StdEPReq+0x32e>
 800a2f6:	7b7b      	ldrb	r3, [r7, #13]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f040 8170 	bne.w	800a5de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a2fe:	7b7a      	ldrb	r2, [r7, #13]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a306:	7b7a      	ldrb	r2, [r7, #13]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	32ae      	adds	r2, #174	; 0xae
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 8163 	beq.w	800a5de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a318:	7b7a      	ldrb	r2, [r7, #13]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32ae      	adds	r2, #174	; 0xae
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a32e:	e156      	b.n	800a5de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	2b03      	cmp	r3, #3
 800a336:	d008      	beq.n	800a34a <USBD_StdEPReq+0x9a>
 800a338:	2b03      	cmp	r3, #3
 800a33a:	f300 8145 	bgt.w	800a5c8 <USBD_StdEPReq+0x318>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 809b 	beq.w	800a47a <USBD_StdEPReq+0x1ca>
 800a344:	2b01      	cmp	r3, #1
 800a346:	d03c      	beq.n	800a3c2 <USBD_StdEPReq+0x112>
 800a348:	e13e      	b.n	800a5c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b02      	cmp	r3, #2
 800a354:	d002      	beq.n	800a35c <USBD_StdEPReq+0xac>
 800a356:	2b03      	cmp	r3, #3
 800a358:	d016      	beq.n	800a388 <USBD_StdEPReq+0xd8>
 800a35a:	e02c      	b.n	800a3b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00d      	beq.n	800a37e <USBD_StdEPReq+0xce>
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b80      	cmp	r3, #128	; 0x80
 800a366:	d00a      	beq.n	800a37e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f00d fb83 	bl	8017a78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a372:	2180      	movs	r1, #128	; 0x80
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f00d fb7f 	bl	8017a78 <USBD_LL_StallEP>
 800a37a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a37c:	e020      	b.n	800a3c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fc7a 	bl	800ac7a <USBD_CtlError>
              break;
 800a386:	e01b      	b.n	800a3c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	885b      	ldrh	r3, [r3, #2]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10e      	bne.n	800a3ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00b      	beq.n	800a3ae <USBD_StdEPReq+0xfe>
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	2b80      	cmp	r3, #128	; 0x80
 800a39a:	d008      	beq.n	800a3ae <USBD_StdEPReq+0xfe>
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	88db      	ldrh	r3, [r3, #6]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d104      	bne.n	800a3ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f00d fb65 	bl	8017a78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fd2e 	bl	800ae10 <USBD_CtlSendStatus>

              break;
 800a3b4:	e004      	b.n	800a3c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc5e 	bl	800ac7a <USBD_CtlError>
              break;
 800a3be:	bf00      	nop
          }
          break;
 800a3c0:	e107      	b.n	800a5d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d002      	beq.n	800a3d4 <USBD_StdEPReq+0x124>
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d016      	beq.n	800a400 <USBD_StdEPReq+0x150>
 800a3d2:	e04b      	b.n	800a46c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00d      	beq.n	800a3f6 <USBD_StdEPReq+0x146>
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b80      	cmp	r3, #128	; 0x80
 800a3de:	d00a      	beq.n	800a3f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f00d fb47 	bl	8017a78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ea:	2180      	movs	r1, #128	; 0x80
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f00d fb43 	bl	8017a78 <USBD_LL_StallEP>
 800a3f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3f4:	e040      	b.n	800a478 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fc3e 	bl	800ac7a <USBD_CtlError>
              break;
 800a3fe:	e03b      	b.n	800a478 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	885b      	ldrh	r3, [r3, #2]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d136      	bne.n	800a476 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d004      	beq.n	800a41c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f00d fb4d 	bl	8017ab6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fcf7 	bl	800ae10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a422:	7bbb      	ldrb	r3, [r7, #14]
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff fde2 	bl	8009ff0 <USBD_CoreFindEP>
 800a42c:	4603      	mov	r3, r0
 800a42e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a430:	7b7b      	ldrb	r3, [r7, #13]
 800a432:	2bff      	cmp	r3, #255	; 0xff
 800a434:	d01f      	beq.n	800a476 <USBD_StdEPReq+0x1c6>
 800a436:	7b7b      	ldrb	r3, [r7, #13]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d11c      	bne.n	800a476 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a43c:	7b7a      	ldrb	r2, [r7, #13]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a444:	7b7a      	ldrb	r2, [r7, #13]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	32ae      	adds	r2, #174	; 0xae
 800a44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d010      	beq.n	800a476 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a454:	7b7a      	ldrb	r2, [r7, #13]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	32ae      	adds	r2, #174	; 0xae
 800a45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
 800a466:	4603      	mov	r3, r0
 800a468:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a46a:	e004      	b.n	800a476 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fc03 	bl	800ac7a <USBD_CtlError>
              break;
 800a474:	e000      	b.n	800a478 <USBD_StdEPReq+0x1c8>
              break;
 800a476:	bf00      	nop
          }
          break;
 800a478:	e0ab      	b.n	800a5d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d002      	beq.n	800a48c <USBD_StdEPReq+0x1dc>
 800a486:	2b03      	cmp	r3, #3
 800a488:	d032      	beq.n	800a4f0 <USBD_StdEPReq+0x240>
 800a48a:	e097      	b.n	800a5bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d007      	beq.n	800a4a2 <USBD_StdEPReq+0x1f2>
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b80      	cmp	r3, #128	; 0x80
 800a496:	d004      	beq.n	800a4a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fbed 	bl	800ac7a <USBD_CtlError>
                break;
 800a4a0:	e091      	b.n	800a5c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da0b      	bge.n	800a4c2 <USBD_StdEPReq+0x212>
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
 800a4ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	3310      	adds	r3, #16
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	3304      	adds	r3, #4
 800a4c0:	e00b      	b.n	800a4da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	3304      	adds	r3, #4
 800a4da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fc37 	bl	800ad5c <USBD_CtlSendData>
              break;
 800a4ee:	e06a      	b.n	800a5c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	da11      	bge.n	800a51c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	f003 020f 	and.w	r2, r3, #15
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	3324      	adds	r3, #36	; 0x24
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d117      	bne.n	800a542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fbb0 	bl	800ac7a <USBD_CtlError>
                  break;
 800a51a:	e054      	b.n	800a5c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	f003 020f 	and.w	r2, r3, #15
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	440b      	add	r3, r1
 800a52e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d104      	bne.n	800a542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fb9d 	bl	800ac7a <USBD_CtlError>
                  break;
 800a540:	e041      	b.n	800a5c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a546:	2b00      	cmp	r3, #0
 800a548:	da0b      	bge.n	800a562 <USBD_StdEPReq+0x2b2>
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	3310      	adds	r3, #16
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	3304      	adds	r3, #4
 800a560:	e00b      	b.n	800a57a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4413      	add	r3, r2
 800a578:	3304      	adds	r3, #4
 800a57a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <USBD_StdEPReq+0x2d8>
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	2b80      	cmp	r3, #128	; 0x80
 800a586:	d103      	bne.n	800a590 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	e00e      	b.n	800a5ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f00d faad 	bl	8017af4 <USBD_LL_IsStallEP>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e002      	b.n	800a5ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fbd1 	bl	800ad5c <USBD_CtlSendData>
              break;
 800a5ba:	e004      	b.n	800a5c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fb5b 	bl	800ac7a <USBD_CtlError>
              break;
 800a5c4:	bf00      	nop
          }
          break;
 800a5c6:	e004      	b.n	800a5d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fb55 	bl	800ac7a <USBD_CtlError>
          break;
 800a5d0:	bf00      	nop
      }
      break;
 800a5d2:	e005      	b.n	800a5e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fb4f 	bl	800ac7a <USBD_CtlError>
      break;
 800a5dc:	e000      	b.n	800a5e0 <USBD_StdEPReq+0x330>
      break;
 800a5de:	bf00      	nop
  }

  return ret;
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	885b      	ldrh	r3, [r3, #2]
 800a606:	0a1b      	lsrs	r3, r3, #8
 800a608:	b29b      	uxth	r3, r3
 800a60a:	3b01      	subs	r3, #1
 800a60c:	2b06      	cmp	r3, #6
 800a60e:	f200 8128 	bhi.w	800a862 <USBD_GetDescriptor+0x276>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USBD_GetDescriptor+0x2c>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a64d 	.word	0x0800a64d
 800a620:	0800a68d 	.word	0x0800a68d
 800a624:	0800a863 	.word	0x0800a863
 800a628:	0800a863 	.word	0x0800a863
 800a62c:	0800a803 	.word	0x0800a803
 800a630:	0800a82f 	.word	0x0800a82f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	7c12      	ldrb	r2, [r2, #16]
 800a640:	f107 0108 	add.w	r1, r7, #8
 800a644:	4610      	mov	r0, r2
 800a646:	4798      	blx	r3
 800a648:	60f8      	str	r0, [r7, #12]
      break;
 800a64a:	e112      	b.n	800a872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7c1b      	ldrb	r3, [r3, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10d      	bne.n	800a670 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65c:	f107 0208 	add.w	r2, r7, #8
 800a660:	4610      	mov	r0, r2
 800a662:	4798      	blx	r3
 800a664:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3301      	adds	r3, #1
 800a66a:	2202      	movs	r2, #2
 800a66c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a66e:	e100      	b.n	800a872 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	f107 0208 	add.w	r2, r7, #8
 800a67c:	4610      	mov	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	2202      	movs	r2, #2
 800a688:	701a      	strb	r2, [r3, #0]
      break;
 800a68a:	e0f2      	b.n	800a872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	885b      	ldrh	r3, [r3, #2]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b05      	cmp	r3, #5
 800a694:	f200 80ac 	bhi.w	800a7f0 <USBD_GetDescriptor+0x204>
 800a698:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <USBD_GetDescriptor+0xb4>)
 800a69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69e:	bf00      	nop
 800a6a0:	0800a6b9 	.word	0x0800a6b9
 800a6a4:	0800a6ed 	.word	0x0800a6ed
 800a6a8:	0800a721 	.word	0x0800a721
 800a6ac:	0800a755 	.word	0x0800a755
 800a6b0:	0800a789 	.word	0x0800a789
 800a6b4:	0800a7bd 	.word	0x0800a7bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	7c12      	ldrb	r2, [r2, #16]
 800a6d0:	f107 0108 	add.w	r1, r7, #8
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	4798      	blx	r3
 800a6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6da:	e091      	b.n	800a800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 facb 	bl	800ac7a <USBD_CtlError>
            err++;
 800a6e4:	7afb      	ldrb	r3, [r7, #11]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ea:	e089      	b.n	800a800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	7c12      	ldrb	r2, [r2, #16]
 800a704:	f107 0108 	add.w	r1, r7, #8
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
 800a70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a70e:	e077      	b.n	800a800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fab1 	bl	800ac7a <USBD_CtlError>
            err++;
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	3301      	adds	r3, #1
 800a71c:	72fb      	strb	r3, [r7, #11]
          break;
 800a71e:	e06f      	b.n	800a800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00b      	beq.n	800a744 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	7c12      	ldrb	r2, [r2, #16]
 800a738:	f107 0108 	add.w	r1, r7, #8
 800a73c:	4610      	mov	r0, r2
 800a73e:	4798      	blx	r3
 800a740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a742:	e05d      	b.n	800a800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fa97 	bl	800ac7a <USBD_CtlError>
            err++;
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	3301      	adds	r3, #1
 800a750:	72fb      	strb	r3, [r7, #11]
          break;
 800a752:	e055      	b.n	800a800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00b      	beq.n	800a778 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	7c12      	ldrb	r2, [r2, #16]
 800a76c:	f107 0108 	add.w	r1, r7, #8
 800a770:	4610      	mov	r0, r2
 800a772:	4798      	blx	r3
 800a774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a776:	e043      	b.n	800a800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fa7d 	bl	800ac7a <USBD_CtlError>
            err++;
 800a780:	7afb      	ldrb	r3, [r7, #11]
 800a782:	3301      	adds	r3, #1
 800a784:	72fb      	strb	r3, [r7, #11]
          break;
 800a786:	e03b      	b.n	800a800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00b      	beq.n	800a7ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	7c12      	ldrb	r2, [r2, #16]
 800a7a0:	f107 0108 	add.w	r1, r7, #8
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4798      	blx	r3
 800a7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7aa:	e029      	b.n	800a800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fa63 	bl	800ac7a <USBD_CtlError>
            err++;
 800a7b4:	7afb      	ldrb	r3, [r7, #11]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ba:	e021      	b.n	800a800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	7c12      	ldrb	r2, [r2, #16]
 800a7d4:	f107 0108 	add.w	r1, r7, #8
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7de:	e00f      	b.n	800a800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fa49 	bl	800ac7a <USBD_CtlError>
            err++;
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ee:	e007      	b.n	800a800 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa41 	bl	800ac7a <USBD_CtlError>
          err++;
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a7fe:	bf00      	nop
      }
      break;
 800a800:	e037      	b.n	800a872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	7c1b      	ldrb	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a812:	f107 0208 	add.w	r2, r7, #8
 800a816:	4610      	mov	r0, r2
 800a818:	4798      	blx	r3
 800a81a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a81c:	e029      	b.n	800a872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fa2a 	bl	800ac7a <USBD_CtlError>
        err++;
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	3301      	adds	r3, #1
 800a82a:	72fb      	strb	r3, [r7, #11]
      break;
 800a82c:	e021      	b.n	800a872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	7c1b      	ldrb	r3, [r3, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10d      	bne.n	800a852 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83e:	f107 0208 	add.w	r2, r7, #8
 800a842:	4610      	mov	r0, r2
 800a844:	4798      	blx	r3
 800a846:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3301      	adds	r3, #1
 800a84c:	2207      	movs	r2, #7
 800a84e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a850:	e00f      	b.n	800a872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa10 	bl	800ac7a <USBD_CtlError>
        err++;
 800a85a:	7afb      	ldrb	r3, [r7, #11]
 800a85c:	3301      	adds	r3, #1
 800a85e:	72fb      	strb	r3, [r7, #11]
      break;
 800a860:	e007      	b.n	800a872 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fa08 	bl	800ac7a <USBD_CtlError>
      err++;
 800a86a:	7afb      	ldrb	r3, [r7, #11]
 800a86c:	3301      	adds	r3, #1
 800a86e:	72fb      	strb	r3, [r7, #11]
      break;
 800a870:	bf00      	nop
  }

  if (err != 0U)
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d11e      	bne.n	800a8b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	88db      	ldrh	r3, [r3, #6]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d016      	beq.n	800a8ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a880:	893b      	ldrh	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00e      	beq.n	800a8a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	88da      	ldrh	r2, [r3, #6]
 800a88a:	893b      	ldrh	r3, [r7, #8]
 800a88c:	4293      	cmp	r3, r2
 800a88e:	bf28      	it	cs
 800a890:	4613      	movcs	r3, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a896:	893b      	ldrh	r3, [r7, #8]
 800a898:	461a      	mov	r2, r3
 800a89a:	68f9      	ldr	r1, [r7, #12]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fa5d 	bl	800ad5c <USBD_CtlSendData>
 800a8a2:	e009      	b.n	800a8b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f9e7 	bl	800ac7a <USBD_CtlError>
 800a8ac:	e004      	b.n	800a8b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 faae 	bl	800ae10 <USBD_CtlSendStatus>
 800a8b4:	e000      	b.n	800a8b8 <USBD_GetDescriptor+0x2cc>
    return;
 800a8b6:	bf00      	nop
  }
}
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop

0800a8c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	889b      	ldrh	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d131      	bne.n	800a936 <USBD_SetAddress+0x76>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	88db      	ldrh	r3, [r3, #6]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d12d      	bne.n	800a936 <USBD_SetAddress+0x76>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	885b      	ldrh	r3, [r3, #2]
 800a8de:	2b7f      	cmp	r3, #127	; 0x7f
 800a8e0:	d829      	bhi.n	800a936 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	885b      	ldrh	r3, [r3, #2]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d104      	bne.n	800a904 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f9bc 	bl	800ac7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a902:	e01d      	b.n	800a940 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	7bfa      	ldrb	r2, [r7, #15]
 800a908:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f00d f91b 	bl	8017b4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fa7a 	bl	800ae10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2202      	movs	r2, #2
 800a926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92a:	e009      	b.n	800a940 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a934:	e004      	b.n	800a940 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f99e 	bl	800ac7a <USBD_CtlError>
  }
}
 800a93e:	bf00      	nop
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	885b      	ldrh	r3, [r3, #2]
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	4b4e      	ldr	r3, [pc, #312]	; (800aa98 <USBD_SetConfig+0x150>)
 800a95e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a960:	4b4d      	ldr	r3, [pc, #308]	; (800aa98 <USBD_SetConfig+0x150>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d905      	bls.n	800a974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f985 	bl	800ac7a <USBD_CtlError>
    return USBD_FAIL;
 800a970:	2303      	movs	r3, #3
 800a972:	e08c      	b.n	800aa8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d002      	beq.n	800a986 <USBD_SetConfig+0x3e>
 800a980:	2b03      	cmp	r3, #3
 800a982:	d029      	beq.n	800a9d8 <USBD_SetConfig+0x90>
 800a984:	e075      	b.n	800aa72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a986:	4b44      	ldr	r3, [pc, #272]	; (800aa98 <USBD_SetConfig+0x150>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d020      	beq.n	800a9d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a98e:	4b42      	ldr	r3, [pc, #264]	; (800aa98 <USBD_SetConfig+0x150>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a998:	4b3f      	ldr	r3, [pc, #252]	; (800aa98 <USBD_SetConfig+0x150>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fe ffe7 	bl	8009972 <USBD_SetClassConfig>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d008      	beq.n	800a9c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f962 	bl	800ac7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9be:	e065      	b.n	800aa8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa25 	bl	800ae10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a9ce:	e05d      	b.n	800aa8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fa1d 	bl	800ae10 <USBD_CtlSendStatus>
      break;
 800a9d6:	e059      	b.n	800aa8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9d8:	4b2f      	ldr	r3, [pc, #188]	; (800aa98 <USBD_SetConfig+0x150>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d112      	bne.n	800aa06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a9e8:	4b2b      	ldr	r3, [pc, #172]	; (800aa98 <USBD_SetConfig+0x150>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9f2:	4b29      	ldr	r3, [pc, #164]	; (800aa98 <USBD_SetConfig+0x150>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7fe ffd6 	bl	80099aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa06 	bl	800ae10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa04:	e042      	b.n	800aa8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa06:	4b24      	ldr	r3, [pc, #144]	; (800aa98 <USBD_SetConfig+0x150>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d02a      	beq.n	800aa6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7fe ffc4 	bl	80099aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa22:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <USBD_SetConfig+0x150>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa2c:	4b1a      	ldr	r3, [pc, #104]	; (800aa98 <USBD_SetConfig+0x150>)
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7fe ff9d 	bl	8009972 <USBD_SetClassConfig>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00f      	beq.n	800aa62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f918 	bl	800ac7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7fe ffa9 	bl	80099aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa60:	e014      	b.n	800aa8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9d4 	bl	800ae10 <USBD_CtlSendStatus>
      break;
 800aa68:	e010      	b.n	800aa8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f9d0 	bl	800ae10 <USBD_CtlSendStatus>
      break;
 800aa70:	e00c      	b.n	800aa8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f900 	bl	800ac7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <USBD_SetConfig+0x150>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7fe ff92 	bl	80099aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa86:	2303      	movs	r3, #3
 800aa88:	73fb      	strb	r3, [r7, #15]
      break;
 800aa8a:	bf00      	nop
  }

  return ret;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20000430 	.word	0x20000430

0800aa9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d004      	beq.n	800aab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f8e2 	bl	800ac7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aab6:	e023      	b.n	800ab00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	dc02      	bgt.n	800aaca <USBD_GetConfig+0x2e>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	dc03      	bgt.n	800aad0 <USBD_GetConfig+0x34>
 800aac8:	e015      	b.n	800aaf6 <USBD_GetConfig+0x5a>
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d00b      	beq.n	800aae6 <USBD_GetConfig+0x4a>
 800aace:	e012      	b.n	800aaf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3308      	adds	r3, #8
 800aada:	2201      	movs	r2, #1
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f93c 	bl	800ad5c <USBD_CtlSendData>
        break;
 800aae4:	e00c      	b.n	800ab00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3304      	adds	r3, #4
 800aaea:	2201      	movs	r2, #1
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f934 	bl	800ad5c <USBD_CtlSendData>
        break;
 800aaf4:	e004      	b.n	800ab00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f8be 	bl	800ac7a <USBD_CtlError>
        break;
 800aafe:	bf00      	nop
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d81e      	bhi.n	800ab5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	88db      	ldrh	r3, [r3, #6]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d004      	beq.n	800ab32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f8a5 	bl	800ac7a <USBD_CtlError>
        break;
 800ab30:	e01a      	b.n	800ab68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	f043 0202 	orr.w	r2, r3, #2
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	330c      	adds	r3, #12
 800ab52:	2202      	movs	r2, #2
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f900 	bl	800ad5c <USBD_CtlSendData>
      break;
 800ab5c:	e004      	b.n	800ab68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f88a 	bl	800ac7a <USBD_CtlError>
      break;
 800ab66:	bf00      	nop
  }
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	885b      	ldrh	r3, [r3, #2]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d107      	bne.n	800ab92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f940 	bl	800ae10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab90:	e013      	b.n	800abba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	885b      	ldrh	r3, [r3, #2]
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d10b      	bne.n	800abb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	889b      	ldrh	r3, [r3, #4]
 800ab9e:	0a1b      	lsrs	r3, r3, #8
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f930 	bl	800ae10 <USBD_CtlSendStatus>
}
 800abb0:	e003      	b.n	800abba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f860 	bl	800ac7a <USBD_CtlError>
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d80b      	bhi.n	800abf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	885b      	ldrh	r3, [r3, #2]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d10c      	bne.n	800abfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f910 	bl	800ae10 <USBD_CtlSendStatus>
      }
      break;
 800abf0:	e004      	b.n	800abfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f840 	bl	800ac7a <USBD_CtlError>
      break;
 800abfa:	e000      	b.n	800abfe <USBD_ClrFeature+0x3c>
      break;
 800abfc:	bf00      	nop
  }
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fa41 	bl	800a0b8 <SWAPBYTE>
 800ac36:	4603      	mov	r3, r0
 800ac38:	461a      	mov	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3301      	adds	r3, #1
 800ac48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff fa34 	bl	800a0b8 <SWAPBYTE>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7ff fa27 	bl	800a0b8 <SWAPBYTE>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	80da      	strh	r2, [r3, #6]
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac84:	2180      	movs	r1, #128	; 0x80
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f00c fef6 	bl	8017a78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f00c fef2 	bl	8017a78 <USBD_LL_StallEP>
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d036      	beq.n	800ad20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800acb6:	6938      	ldr	r0, [r7, #16]
 800acb8:	f000 f836 	bl	800ad28 <USBD_GetLen>
 800acbc:	4603      	mov	r3, r0
 800acbe:	3301      	adds	r3, #1
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	4413      	add	r3, r2
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7812      	ldrb	r2, [r2, #0]
 800acd4:	701a      	strb	r2, [r3, #0]
  idx++;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	3301      	adds	r3, #1
 800acda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	4413      	add	r3, r2
 800ace2:	2203      	movs	r2, #3
 800ace4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	3301      	adds	r3, #1
 800acea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800acec:	e013      	b.n	800ad16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	4413      	add	r3, r2
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	7812      	ldrb	r2, [r2, #0]
 800acf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	3301      	adds	r3, #1
 800acfe:	613b      	str	r3, [r7, #16]
    idx++;
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	3301      	adds	r3, #1
 800ad04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	3301      	adds	r3, #1
 800ad14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e7      	bne.n	800acee <USBD_GetString+0x52>
 800ad1e:	e000      	b.n	800ad22 <USBD_GetString+0x86>
    return;
 800ad20:	bf00      	nop
  }
}
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad38:	e005      	b.n	800ad46 <USBD_GetLen+0x1e>
  {
    len++;
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3301      	adds	r3, #1
 800ad44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f5      	bne.n	800ad3a <USBD_GetLen+0x12>
  }

  return len;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	2100      	movs	r1, #0
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f00c ff01 	bl	8017b8a <USBD_LL_Transmit>

  return USBD_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	2100      	movs	r1, #0
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f00c fef0 	bl	8017b8a <USBD_LL_Transmit>

  return USBD_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2203      	movs	r2, #3
 800adc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	2100      	movs	r1, #0
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f00c fef4 	bl	8017bcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	2100      	movs	r1, #0
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f00c fee3 	bl	8017bcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2204      	movs	r2, #4
 800ae1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae20:	2300      	movs	r3, #0
 800ae22:	2200      	movs	r2, #0
 800ae24:	2100      	movs	r1, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f00c feaf 	bl	8017b8a <USBD_LL_Transmit>

  return USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2205      	movs	r2, #5
 800ae42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae46:	2300      	movs	r3, #0
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f00c febd 	bl	8017bcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b08b      	sub	sp, #44	; 0x2c
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	ed87 0a02 	vstr	s0, [r7, #8]
 800ae68:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	885b      	ldrh	r3, [r3, #2]
 800ae80:	fb02 f303 	mul.w	r3, r2, r3
 800ae84:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ae8a:	e010      	b.n	800aeae <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	627a      	str	r2, [r7, #36]	; 0x24
 800ae92:	ed93 7a00 	vldr	s14, [r3]
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	1d1a      	adds	r2, r3, #4
 800ae9a:	623a      	str	r2, [r7, #32]
 800ae9c:	edd7 7a02 	vldr	s15, [r7, #8]
 800aea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1eb      	bne.n	800ae8c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800aeb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	372c      	adds	r7, #44	; 0x2c
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800aec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeca:	b093      	sub	sp, #76	; 0x4c
 800aecc:	af0a      	add	r7, sp, #40	; 0x28
 800aece:	6178      	str	r0, [r7, #20]
 800aed0:	6139      	str	r1, [r7, #16]
 800aed2:	60fa      	str	r2, [r7, #12]
 800aed4:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800aedc:	e033      	b.n	800af46 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	6852      	ldr	r2, [r2, #4]
 800aee8:	6939      	ldr	r1, [r7, #16]
 800aeea:	6889      	ldr	r1, [r1, #8]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	6800      	ldr	r0, [r0, #0]
 800aef0:	68fc      	ldr	r4, [r7, #12]
 800aef2:	6864      	ldr	r4, [r4, #4]
 800aef4:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800aef6:	682d      	ldr	r5, [r5, #0]
 800aef8:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800aefa:	68f6      	ldr	r6, [r6, #12]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	603b      	str	r3, [r7, #0]
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	9308      	str	r3, [sp, #32]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	9307      	str	r3, [sp, #28]
 800af0c:	9606      	str	r6, [sp, #24]
 800af0e:	9505      	str	r5, [sp, #20]
 800af10:	9404      	str	r4, [sp, #16]
 800af12:	9003      	str	r0, [sp, #12]
 800af14:	9102      	str	r1, [sp, #8]
 800af16:	9201      	str	r2, [sp, #4]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af24:	f000 f822 	bl	800af6c <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800af28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	4413      	add	r3, r2
 800af32:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800af34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	461a      	mov	r2, r3
 800af3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af3c:	4413      	add	r3, r2
 800af3e:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	3b01      	subs	r3, #1
 800af44:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1c8      	bne.n	800aede <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3724      	adds	r7, #36	; 0x24
 800af52:	46bd      	mov	sp, r7
 800af54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af56 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800af56:	b480      	push	{r7}
 800af58:	b083      	sub	sp, #12
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800af6c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af70:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800af74:	af00      	add	r7, sp, #0
 800af76:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800af7a:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800af7e:	6020      	str	r0, [r4, #0]
 800af80:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800af84:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800af88:	6001      	str	r1, [r0, #0]
 800af8a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800af8e:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800af92:	600a      	str	r2, [r1, #0]
 800af94:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800af98:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800af9c:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800af9e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800afa2:	3b04      	subs	r3, #4
 800afa4:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800afa8:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800afac:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800afb0:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800afb4:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800afb8:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800afbc:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800afc0:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800afc4:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800afc8:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800afcc:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800afd0:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800afd4:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800afd8:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800afdc:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800afe0:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800afe4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800afe8:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800afec:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800aff0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800aff4:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800aff8:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800affc:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800b000:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800b004:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800b008:	2300      	movs	r3, #0
 800b00a:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800b00e:	f001 bd13 	b.w	800ca38 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800b012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b016:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800b01a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b01e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800b026:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b02a:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800b02e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b032:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800b046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b04a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d01b      	beq.n	800b08c <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800b054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b058:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800b05c:	6819      	ldr	r1, [r3, #0]
 800b05e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b062:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800b066:	1d0b      	adds	r3, r1, #4
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	680b      	ldr	r3, [r1, #0]
 800b06c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800b070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b074:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800b078:	6819      	ldr	r1, [r3, #0]
 800b07a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b07e:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800b082:	1d0b      	adds	r3, r1, #4
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	680b      	ldr	r3, [r1, #0]
 800b088:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800b092:	f001 b9db 	b.w	800c44c <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800b096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b09a:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800b09e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b0a2:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800b0a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0a8:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0b8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800b0bc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b0be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0c2:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	1d1a      	adds	r2, r3, #4
 800b0cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0d0:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	601a      	str	r2, [r3, #0]

    return (val);
 800b0d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0dc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800b0e0:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b0e2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b0e6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0ee:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800b0f2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0fc:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800b100:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b106:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b110:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	fa22 f283 	sxtab16	r2, r2, r3
 800b11a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b11e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800b122:	601a      	str	r2, [r3, #0]
  return(result);
 800b124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b128:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800b132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b136:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800b13a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b13e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b144:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b154:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800b158:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b15a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b15e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	1d1a      	adds	r2, r3, #4
 800b168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b16c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	601a      	str	r2, [r3, #0]
    return (val);
 800b174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b178:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800b17c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b17e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b182:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b18a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b194:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800b198:	2308      	movs	r3, #8
 800b19a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b19c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1a0:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800b1a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1a8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 031f 	and.w	r3, r3, #31
 800b1b2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b1b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1b8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d105      	bne.n	800b1ce <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800b1c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1c6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800b1ca:	6819      	ldr	r1, [r3, #0]
 800b1cc:	e00b      	b.n	800b1e6 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b1ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1d2:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800b1d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1da:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	fa62 f103 	ror.w	r1, r2, r3
 800b1e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1ea:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800b1ee:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1f8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800b1fc:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b1fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b202:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b20c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	fa22 f283 	sxtab16	r2, r2, r3
 800b216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b21a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800b21e:	601a      	str	r2, [r3, #0]
  return(result);
 800b220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b224:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b22e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b232:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b236:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800b23a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b244:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800b248:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b24a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b24e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b258:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	fa22 f283 	sxtab16	r2, r2, r3
 800b262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b266:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800b26a:	601a      	str	r2, [r3, #0]
  return(result);
 800b26c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b270:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b27a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b27e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b288:	441a      	add	r2, r3
 800b28a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b28e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b298:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800b2a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2a6:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b2aa:	601a      	str	r2, [r3, #0]

    return (val);
 800b2ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2b0:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b2ba:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b2be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2c2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2cc:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800b2d0:	2308      	movs	r3, #8
 800b2d2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b2d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2d8:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800b2dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2e0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 031f 	and.w	r3, r3, #31
 800b2ea:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b2ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2f0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d105      	bne.n	800b306 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800b2fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2fe:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	e00b      	b.n	800b31e <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b306:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b30a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800b30e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b312:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800b316:	6812      	ldr	r2, [r2, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	fa62 f103 	ror.w	r1, r2, r3
 800b31e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b322:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800b326:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b330:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800b334:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b336:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b33a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b344:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	fa22 f283 	sxtab16	r2, r2, r3
 800b34e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b352:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800b356:	601a      	str	r2, [r3, #0]
  return(result);
 800b358:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b35c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b366:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b36a:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800b36e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b372:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b376:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b380:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800b384:	6019      	str	r1, [r3, #0]
 800b386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b38a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b38e:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b390:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b394:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800b398:	6819      	ldr	r1, [r3, #0]
 800b39a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b39e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3a8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	fb21 3202 	smlad	r2, r1, r2, r3
 800b3b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3b6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b3ba:	601a      	str	r2, [r3, #0]
  return(result);
 800b3bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3c0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b3ca:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b3ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3d2:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800b3d6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3e0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800b3e4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b3e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3ea:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3f4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	fa22 f283 	sxtab16	r2, r2, r3
 800b3fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b402:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800b406:	601a      	str	r2, [r3, #0]
  return(result);
 800b408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b40c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800b416:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b41a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b41e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b426:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b430:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800b434:	6019      	str	r1, [r3, #0]
 800b436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b43a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800b43e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b444:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800b448:	6819      	ldr	r1, [r3, #0]
 800b44a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b44e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b458:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	fb21 3202 	smlad	r2, r1, r2, r3
 800b462:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b466:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800b46a:	601a      	str	r2, [r3, #0]
  return(result);
 800b46c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b470:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b47a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b47e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b482:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b48c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800b490:	2308      	movs	r3, #8
 800b492:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b494:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b498:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800b49c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4a0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 031f 	and.w	r3, r3, #31
 800b4aa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b4ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4b0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d105      	bne.n	800b4c6 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800b4ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4be:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	e00b      	b.n	800b4de <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b4c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4ca:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800b4ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4d2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800b4d6:	6812      	ldr	r2, [r2, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	fa62 f103 	ror.w	r1, r2, r3
 800b4de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4e2:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800b4e6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4f0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800b4f4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4fa:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b504:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	fa22 f283 	sxtab16	r2, r2, r3
 800b50e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b512:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800b516:	601a      	str	r2, [r3, #0]
  return(result);
 800b518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b51c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800b526:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b52a:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800b52e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b532:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b538:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b548:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800b54c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b54e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b552:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	1d1a      	adds	r2, r3, #4
 800b55c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b560:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	601a      	str	r2, [r3, #0]
    return (val);
 800b568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b56c:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800b570:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b572:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800b576:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b57a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800b57e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800b582:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b586:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b590:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800b594:	6019      	str	r1, [r3, #0]
 800b596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b59a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800b59e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b5a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5a4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800b5a8:	6819      	ldr	r1, [r3, #0]
 800b5aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5ae:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5b8:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	fb21 3202 	smlad	r2, r1, r2, r3
 800b5c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800b5ca:	601a      	str	r2, [r3, #0]
  return(result);
 800b5cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5d0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800b5da:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b5de:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b5e2:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800b5e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5ea:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5f4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800b5f8:	6019      	str	r1, [r3, #0]
 800b5fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5fe:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800b602:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b608:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800b60c:	6819      	ldr	r1, [r3, #0]
 800b60e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b612:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b61c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	fb21 3202 	smlad	r2, r1, r2, r3
 800b626:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b62a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800b62e:	601a      	str	r2, [r3, #0]
  return(result);
 800b630:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b634:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b63e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b646:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800b64a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b64e:	6013      	str	r3, [r2, #0]
 800b650:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b654:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800b658:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b65a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b65e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b668:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	fa22 f283 	sxtab16	r2, r2, r3
 800b672:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b676:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800b67a:	601a      	str	r2, [r3, #0]
  return(result);
 800b67c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b680:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800b68a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b68e:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800b692:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b696:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b698:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b69c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6ac:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800b6b0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b6b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6b6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6c4:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	601a      	str	r2, [r3, #0]
    return (val);
 800b6cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6d0:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800b6d4:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b6d6:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b6da:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b6de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6e2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6ec:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b6f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6f8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800b6fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b700:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 031f 	and.w	r3, r3, #31
 800b70a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b70c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b710:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d105      	bne.n	800b726 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800b71a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b71e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800b722:	6819      	ldr	r1, [r3, #0]
 800b724:	e00b      	b.n	800b73e <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b726:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b72a:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800b72e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b732:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800b736:	6812      	ldr	r2, [r2, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	fa62 f103 	ror.w	r1, r2, r3
 800b73e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b742:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800b746:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b750:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b754:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b756:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b75a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b764:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	fa22 f283 	sxtab16	r2, r2, r3
 800b76e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b772:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800b776:	601a      	str	r2, [r3, #0]
  return(result);
 800b778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b77c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b786:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b78a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b78e:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800b792:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b79c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800b7a0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b7a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7a6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	fa22 f283 	sxtab16	r2, r2, r3
 800b7ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800b7c2:	601a      	str	r2, [r3, #0]
  return(result);
 800b7c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b7d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7d6:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b7e0:	441a      	add	r2, r3
 800b7e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800b7fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7fe:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800b802:	601a      	str	r2, [r3, #0]
    return (val);
 800b804:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b808:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b812:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b816:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b81a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b824:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800b828:	2308      	movs	r3, #8
 800b82a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b82c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b830:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800b834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b838:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 031f 	and.w	r3, r3, #31
 800b842:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b844:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b848:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d105      	bne.n	800b85e <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800b852:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b856:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b85a:	6819      	ldr	r1, [r3, #0]
 800b85c:	e00b      	b.n	800b876 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b85e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b862:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800b866:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b86a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b86e:	6812      	ldr	r2, [r2, #0]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	fa62 f103 	ror.w	r1, r2, r3
 800b876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b87a:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800b87e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b888:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800b88c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b88e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b892:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b89c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	fa22 f283 	sxtab16	r2, r2, r3
 800b8a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8aa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b8ae:	601a      	str	r2, [r3, #0]
  return(result);
 800b8b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8b4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b8be:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b8c2:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800b8c6:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b8ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8ce:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8d8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b8dc:	6019      	str	r1, [r3, #0]
 800b8de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b8e6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b8e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8ec:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8f6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b900:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	fb21 3202 	smlad	r2, r1, r2, r3
 800b90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b90e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800b912:	601a      	str	r2, [r3, #0]
  return(result);
 800b914:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b918:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b922:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b92a:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800b92e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b938:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b93c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b93e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b942:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b94c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	fa22 f283 	sxtab16	r2, r2, r3
 800b956:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b95a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800b95e:	601a      	str	r2, [r3, #0]
  return(result);
 800b960:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b964:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800b96e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b972:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b976:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b97a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b97e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b988:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800b98c:	6019      	str	r1, [r3, #0]
 800b98e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b992:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800b996:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b99c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b9a0:	6819      	ldr	r1, [r3, #0]
 800b9a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9a6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9b0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	fb21 3202 	smlad	r2, r1, r2, r3
 800b9ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9be:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b9c2:	601a      	str	r2, [r3, #0]
  return(result);
 800b9c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9c8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b9d2:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b9d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9e4:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800b9e8:	2308      	movs	r3, #8
 800b9ea:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b9ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9f0:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800b9f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9f8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 031f 	and.w	r3, r3, #31
 800ba02:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ba04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba08:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d105      	bne.n	800ba1e <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800ba12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ba1a:	6819      	ldr	r1, [r3, #0]
 800ba1c:	e00b      	b.n	800ba36 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ba1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba22:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800ba26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba2a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ba2e:	6812      	ldr	r2, [r2, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	fa62 f103 	ror.w	r1, r2, r3
 800ba36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba3a:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800ba3e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ba4c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ba4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	fa22 f283 	sxtab16	r2, r2, r3
 800ba66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba6a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ba6e:	601a      	str	r2, [r3, #0]
  return(result);
 800ba70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba74:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800ba7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba82:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800ba86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ba8a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ba8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba90:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baa0:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800baa4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800baa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baaa:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	1d1a      	adds	r2, r3, #4
 800bab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bab8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	601a      	str	r2, [r3, #0]
    return (val);
 800bac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bac4:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800bac8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800baca:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800bace:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800bad2:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800bad6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800bada:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bade:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bae8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800baec:	6019      	str	r1, [r3, #0]
 800baee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baf2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800baf6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800baf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bafc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800bb00:	6819      	ldr	r1, [r3, #0]
 800bb02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	fb21 3202 	smlad	r2, r1, r2, r3
 800bb1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb1e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800bb22:	601a      	str	r2, [r3, #0]
  return(result);
 800bb24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb28:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800bb32:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800bb36:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800bb3a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800bb3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800bb50:	6019      	str	r1, [r3, #0]
 800bb52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800bb5a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bb5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800bb64:	6819      	ldr	r1, [r3, #0]
 800bb66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	fb21 3202 	smlad	r2, r1, r2, r3
 800bb7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800bb86:	601a      	str	r2, [r3, #0]
  return(result);
 800bb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800bb96:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800bb9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb9e:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800bba2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbac:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800bbb0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bbb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbb6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbc0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	fa22 f283 	sxtab16	r2, r2, r3
 800bbca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800bbd2:	601a      	str	r2, [r3, #0]
  return(result);
 800bbd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbd8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800bbe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbe6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800bbea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800bbee:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800bbf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbf4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc04:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800bc08:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bc0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	1d1a      	adds	r2, r3, #4
 800bc18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	601a      	str	r2, [r3, #0]
    return (val);
 800bc24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc28:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800bc2c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bc2e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bc32:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800bc36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc3a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc44:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800bc48:	2308      	movs	r3, #8
 800bc4a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bc4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc50:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800bc54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 031f 	and.w	r3, r3, #31
 800bc62:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bc64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d105      	bne.n	800bc7e <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800bc72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc76:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800bc7a:	6819      	ldr	r1, [r3, #0]
 800bc7c:	e00b      	b.n	800bc96 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bc7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc82:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800bc86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800bc8e:	6812      	ldr	r2, [r2, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	fa62 f103 	ror.w	r1, r2, r3
 800bc96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc9a:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800bc9e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bca2:	6013      	str	r3, [r2, #0]
 800bca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bca8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800bcac:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bcae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcbc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	fa22 f283 	sxtab16	r2, r2, r3
 800bcc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800bcce:	601a      	str	r2, [r3, #0]
  return(result);
 800bcd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcd4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800bcde:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bce2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bce6:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800bcea:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcf4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800bcf8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bcfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bcfe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	fa22 f283 	sxtab16	r2, r2, r3
 800bd12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800bd1a:	601a      	str	r2, [r3, #0]
  return(result);
 800bd1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd20:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800bd2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd2e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800bd38:	441a      	add	r2, r3
 800bd3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd3e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd48:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800bd52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd56:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800bd5a:	601a      	str	r2, [r3, #0]
    return (val);
 800bd5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd60:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800bd6a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800bd6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd7c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800bd80:	2308      	movs	r3, #8
 800bd82:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bd84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd88:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800bd8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bd90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 031f 	and.w	r3, r3, #31
 800bd9a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bd9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bda0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d105      	bne.n	800bdb6 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800bdaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	e00b      	b.n	800bdce <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bdb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdba:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800bdbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdc2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	fa62 f103 	ror.w	r1, r2, r3
 800bdce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdd2:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800bdd6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bde0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800bde4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bde6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bdf4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	fa22 f283 	sxtab16	r2, r2, r3
 800bdfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be02:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800be06:	601a      	str	r2, [r3, #0]
  return(result);
 800be08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be0c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800be16:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800be1a:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800be1e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800be22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be26:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be30:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800be34:	6019      	str	r1, [r3, #0]
 800be36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be3a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800be3e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800be48:	6819      	ldr	r1, [r3, #0]
 800be4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be58:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	fb21 3202 	smlad	r2, r1, r2, r3
 800be62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800be6a:	601a      	str	r2, [r3, #0]
  return(result);
 800be6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be70:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800be7a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800be7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be82:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800be86:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800be94:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800be96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bea4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	fa22 f283 	sxtab16	r2, r2, r3
 800beae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beb2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800beb6:	601a      	str	r2, [r3, #0]
  return(result);
 800beb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bebc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800bec6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800beca:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800bece:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800bed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bed6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bee0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800bee4:	6019      	str	r1, [r3, #0]
 800bee6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800beea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800beee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bef4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800bef8:	6819      	ldr	r1, [r3, #0]
 800befa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800befe:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf08:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	fb21 3202 	smlad	r2, r1, r2, r3
 800bf12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf16:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800bf1a:	601a      	str	r2, [r3, #0]
  return(result);
 800bf1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800bf2a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800bf2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf32:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf3c:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800bf40:	2308      	movs	r3, #8
 800bf42:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bf44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf48:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800bf4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf50:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 031f 	and.w	r3, r3, #31
 800bf5a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bf5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf60:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d105      	bne.n	800bf76 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800bf6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf6e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800bf72:	6819      	ldr	r1, [r3, #0]
 800bf74:	e00b      	b.n	800bf8e <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bf76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf7a:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800bf7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf82:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	fa62 f103 	ror.w	r1, r2, r3
 800bf8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf92:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800bf96:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfa0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800bfa4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bfa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfaa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	fa22 f283 	sxtab16	r2, r2, r3
 800bfbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800bfc6:	601a      	str	r2, [r3, #0]
  return(result);
 800bfc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfcc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800bfd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfda:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800bfde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bfe2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800bfe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfe8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bff8:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800bffc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c002:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1d1a      	adds	r2, r3, #4
 800c00c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c010:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	601a      	str	r2, [r3, #0]
    return (val);
 800c018:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c01c:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800c020:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c022:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800c026:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c02a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c02e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c036:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c040:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800c044:	6019      	str	r1, [r3, #0]
 800c046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c04a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800c04e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c050:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c054:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c058:	6819      	ldr	r1, [r3, #0]
 800c05a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c05e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c068:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	fb21 3202 	smlad	r2, r1, r2, r3
 800c072:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c076:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800c07a:	601a      	str	r2, [r3, #0]
  return(result);
 800c07c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c080:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c08a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c08e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c092:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c09a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c0a8:	6019      	str	r1, [r3, #0]
 800c0aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0b2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c0b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	fb21 3202 	smlad	r2, r1, r2, r3
 800c0d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c0de:	601a      	str	r2, [r3, #0]
  return(result);
 800c0e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c0ee:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c0f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0f6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800c0fa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c0fe:	6013      	str	r3, [r2, #0]
 800c100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c104:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800c108:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c10a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c10e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c118:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	fa22 f283 	sxtab16	r2, r2, r3
 800c122:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c126:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800c12a:	601a      	str	r2, [r3, #0]
  return(result);
 800c12c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c130:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c13a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c13e:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800c142:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c146:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c14c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c15c:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800c160:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c166:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	1d1a      	adds	r2, r3, #4
 800c170:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c174:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	601a      	str	r2, [r3, #0]
    return (val);
 800c17c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c180:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800c184:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c186:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c18a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c18e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c192:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c19c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800c1a0:	2308      	movs	r3, #8
 800c1a2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c1a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1a8:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800c1ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 031f 	and.w	r3, r3, #31
 800c1ba:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c1bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d105      	bne.n	800c1d6 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800c1ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c1d2:	6819      	ldr	r1, [r3, #0]
 800c1d4:	e00b      	b.n	800c1ee <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c1d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1da:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800c1de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c1e6:	6812      	ldr	r2, [r2, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	fa62 f103 	ror.w	r1, r2, r3
 800c1ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1f2:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800c1f6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c204:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c206:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	fa22 f283 	sxtab16	r2, r2, r3
 800c21e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800c226:	601a      	str	r2, [r3, #0]
  return(result);
 800c228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c22c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c236:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c23a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c23e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800c242:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c246:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800c24a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800c24e:	fa22 f283 	sxtab16	r2, r2, r3
 800c252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c256:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c25a:	601a      	str	r2, [r3, #0]
  return(result);
 800c25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c260:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c26a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c26e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c278:	4413      	add	r3, r2
 800c27a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800c27e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800c286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c28a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800c28e:	601a      	str	r2, [r3, #0]
    return (val);
 800c290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c294:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c29e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800c2a2:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800c2a6:	2308      	movs	r3, #8
 800c2a8:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800c2ac:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c2b0:	f003 031f 	and.w	r3, r3, #31
 800c2b4:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800c2b8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800c2c0:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800c2c4:	e004      	b.n	800c2d0 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c2c6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800c2ca:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c2ce:	41da      	rors	r2, r3
 800c2d0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c2d4:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800c2d8:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c2dc:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800c2e0:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800c2e4:	fa22 f383 	sxtab16	r3, r2, r3
 800c2e8:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800c2ec:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800c2f0:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c2f4:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800c2f8:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800c2fc:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c300:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800c304:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800c308:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c30c:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800c310:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800c314:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800c318:	fb21 3302 	smlad	r3, r1, r2, r3
 800c31c:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800c320:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800c324:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c328:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c32c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c330:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800c334:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c338:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800c33c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800c340:	fa22 f383 	sxtab16	r3, r2, r3
 800c344:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800c348:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800c34c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c350:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c354:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c358:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c35c:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800c360:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800c364:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c368:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800c36c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800c370:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800c374:	fb21 3302 	smlad	r3, r1, r2, r3
 800c378:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800c37c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800c380:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800c384:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800c388:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800c38c:	2308      	movs	r3, #8
 800c38e:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800c392:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c396:	f003 031f 	and.w	r3, r3, #31
 800c39a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800c39e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800c3a6:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800c3aa:	e004      	b.n	800c3b6 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c3ac:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800c3b0:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c3b4:	41da      	rors	r2, r3
 800c3b6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c3ba:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800c3be:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c3c2:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800c3c6:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800c3ca:	fa22 f383 	sxtab16	r3, r2, r3
 800c3ce:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800c3d2:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800c3d6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800c3da:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800c3de:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800c3e2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c3e6:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800c3ea:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800c3ee:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c3f2:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800c3f6:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800c3fa:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800c3fe:	fb21 3302 	smlad	r3, r1, r2, r3
 800c402:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800c406:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800c40a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c40e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c412:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c416:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c41a:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800c41e:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800c422:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c426:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800c42a:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800c42e:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800c432:	fb21 3302 	smlad	r3, r1, r2, r3
 800c436:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800c43a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800c43e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c442:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800c446:	3310      	adds	r3, #16
 800c448:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800c44c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c450:	f1a3 020f 	sub.w	r2, r3, #15
 800c454:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800c458:	4293      	cmp	r3, r2
 800c45a:	f6fe ae1c 	blt.w	800b096 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c45e:	e05a      	b.n	800c516 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800c460:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c464:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f993 3000 	ldrsb.w	r3, [r3]
 800c46e:	461a      	mov	r2, r3
 800c470:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c474:	4413      	add	r3, r2
 800c476:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800c47a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c47e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c488:	4413      	add	r3, r2
 800c48a:	f993 3000 	ldrsb.w	r3, [r3]
 800c48e:	461a      	mov	r2, r3
 800c490:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c494:	4413      	add	r3, r2
 800c496:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800c49a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c49e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f993 3000 	ldrsb.w	r3, [r3]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800c4b4:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800c4b8:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800c4bc:	fb03 f202 	mul.w	r2, r3, r2
 800c4c0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800c4ca:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800c4ce:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800c4d2:	fb03 f202 	mul.w	r2, r3, r2
 800c4d6:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c4da:	4413      	add	r3, r2
 800c4dc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800c4e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4e4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4f0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c4f4:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800c4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4fa:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c506:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800c50a:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c50c:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800c510:	3301      	adds	r3, #1
 800c512:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800c516:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800c51a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c51e:	429a      	cmp	r2, r3
 800c520:	db9e      	blt.n	800c460 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800c522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c526:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800c52a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c534:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800c538:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c542:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800c546:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800c54a:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c54c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c550:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c55a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c55e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	fa03 f202 	lsl.w	r2, r3, r2
 800c568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c56c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c576:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800c57a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c57e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c58a:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800c58e:	2300      	movs	r3, #0
 800c590:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800c592:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c596:	461a      	mov	r2, r3
 800c598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c59c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800c59e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c5a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c5ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	17da      	asrs	r2, r3, #31
 800c5bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c5be:	637a      	str	r2, [r7, #52]	; 0x34
 800c5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5c4:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	17da      	asrs	r2, r3, #31
 800c5cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5d4:	fb02 f203 	mul.w	r2, r2, r3
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800c5dc:	fb04 f303 	mul.w	r3, r4, r3
 800c5e0:	4413      	add	r3, r2
 800c5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5e4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c5e6:	fba2 5604 	umull	r5, r6, r2, r4
 800c5ea:	4433      	add	r3, r6
 800c5ec:	461e      	mov	r6, r3
 800c5ee:	1943      	adds	r3, r0, r5
 800c5f0:	61bb      	str	r3, [r7, #24]
 800c5f2:	eb41 0306 	adc.w	r3, r1, r6
 800c5f6:	61fb      	str	r3, [r7, #28]
 800c5f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c5fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c600:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800c604:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	f04f 0000 	mov.w	r0, #0
 800c610:	f04f 0100 	mov.w	r1, #0
 800c614:	0fd0      	lsrs	r0, r2, #31
 800c616:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c61a:	17d9      	asrs	r1, r3, #31
 800c61c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c620:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800c624:	4603      	mov	r3, r0
 800c626:	6013      	str	r3, [r2, #0]
    return result;
 800c628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c62c:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800c630:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c636:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	dc06      	bgt.n	800c64e <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800c640:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c644:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	425a      	negs	r2, r3
 800c64c:	e000      	b.n	800c650 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800c64e:	2200      	movs	r2, #0
 800c650:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c654:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800c658:	6019      	str	r1, [r3, #0]
 800c65a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c65e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800c662:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c664:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c668:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800c66c:	2300      	movs	r3, #0
 800c66e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c674:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800c678:	2201      	movs	r2, #1
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	fa02 f103 	lsl.w	r1, r2, r3
 800c680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c684:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800c688:	1e4b      	subs	r3, r1, #1
 800c68a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800c68c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c690:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800c694:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c698:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800c69c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6a0:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800c6a4:	6812      	ldr	r2, [r2, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800c6ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b0:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800c6b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b8:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800c6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6c0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800c6c4:	6812      	ldr	r2, [r2, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	fa42 f303 	asr.w	r3, r2, r3
 800c6cc:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800c6ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d2:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800c6d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6da:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	105b      	asrs	r3, r3, #1
 800c6e2:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800c6e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6e8:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	da0a      	bge.n	800c708 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800c6f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6f6:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800c6fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6fe:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800c708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c70c:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800c710:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c714:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800c718:	6812      	ldr	r2, [r2, #0]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	dd0a      	ble.n	800c736 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800c720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c724:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800c728:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c72c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	6013      	str	r3, [r2, #0]
    return result;
 800c736:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c73a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800c73e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c740:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800c742:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800c746:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c74a:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800c74e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c758:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800c75c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c766:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800c76a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c774:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c77e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c782:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	fa03 f202 	lsl.w	r2, r3, r2
 800c78c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c790:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c79a:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800c79e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7a2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c7aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ae:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800c7b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7c0:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800c7c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c7d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c7d4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c7d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7dc:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	17da      	asrs	r2, r3, #31
 800c7e4:	643b      	str	r3, [r7, #64]	; 0x40
 800c7e6:	647a      	str	r2, [r7, #68]	; 0x44
 800c7e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ec:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	17da      	asrs	r2, r3, #31
 800c7f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fc:	fb02 f203 	mul.w	r2, r2, r3
 800c800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c802:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c804:	fb04 f303 	mul.w	r3, r4, r3
 800c808:	4413      	add	r3, r2
 800c80a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c80c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800c80e:	fba2 ab04 	umull	sl, fp, r2, r4
 800c812:	445b      	add	r3, fp
 800c814:	469b      	mov	fp, r3
 800c816:	eb10 030a 	adds.w	r3, r0, sl
 800c81a:	623b      	str	r3, [r7, #32]
 800c81c:	eb41 030b 	adc.w	r3, r1, fp
 800c820:	627b      	str	r3, [r7, #36]	; 0x24
 800c822:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c826:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c82a:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800c82e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c836:	f04f 0000 	mov.w	r0, #0
 800c83a:	f04f 0100 	mov.w	r1, #0
 800c83e:	0fd0      	lsrs	r0, r2, #31
 800c840:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c844:	17d9      	asrs	r1, r3, #31
 800c846:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c84a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800c84e:	4603      	mov	r3, r0
 800c850:	6013      	str	r3, [r2, #0]
    return result;
 800c852:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c856:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800c85a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c85c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c860:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	dc06      	bgt.n	800c878 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800c86a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c86e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	425a      	negs	r2, r3
 800c876:	e000      	b.n	800c87a <arm_nn_vec_mat_mult_t_s8+0x190e>
 800c878:	2200      	movs	r2, #0
 800c87a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c87e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800c882:	6019      	str	r1, [r3, #0]
 800c884:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c888:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800c88c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c88e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c892:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800c896:	2300      	movs	r3, #0
 800c898:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c89a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c89e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	fa02 f103 	lsl.w	r1, r2, r3
 800c8aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ae:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800c8b2:	1e4b      	subs	r3, r1, #1
 800c8b4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800c8b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ba:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800c8be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8c2:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800c8c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ca:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800c8ce:	6812      	ldr	r2, [r2, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4013      	ands	r3, r2
 800c8d4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800c8d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8da:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800c8de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8e2:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800c8e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ea:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800c8ee:	6812      	ldr	r2, [r2, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	fa42 f303 	asr.w	r3, r2, r3
 800c8f6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800c8f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8fc:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800c900:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c904:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	105b      	asrs	r3, r3, #1
 800c90c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800c90e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c912:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	da0a      	bge.n	800c932 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800c91c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c920:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800c924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c928:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3301      	adds	r3, #1
 800c930:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800c932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c936:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800c93a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c93e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800c942:	6812      	ldr	r2, [r2, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	429a      	cmp	r2, r3
 800c948:	dd0a      	ble.n	800c960 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800c94a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c94e:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800c952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c956:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3301      	adds	r3, #1
 800c95e:	6013      	str	r3, [r2, #0]
    return result;
 800c960:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c964:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800c968:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c96a:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800c96c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800c970:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800c974:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800c978:	4413      	add	r3, r2
 800c97a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800c97e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800c982:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800c986:	4413      	add	r3, r2
 800c988:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800c98c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800c990:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800c994:	4293      	cmp	r3, r2
 800c996:	bfb8      	it	lt
 800c998:	4613      	movlt	r3, r2
 800c99a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800c99e:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800c9a2:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	bfa8      	it	ge
 800c9aa:	4613      	movge	r3, r2
 800c9ac:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800c9b0:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800c9b4:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	bfb8      	it	lt
 800c9bc:	4613      	movlt	r3, r2
 800c9be:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800c9c2:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800c9c6:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	bfa8      	it	ge
 800c9ce:	4613      	movge	r3, r2
 800c9d0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800c9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d8:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800c9dc:	6819      	ldr	r1, [r3, #0]
 800c9de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9e2:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800c9e6:	1c4b      	adds	r3, r1, #1
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c9ee:	b25b      	sxtb	r3, r3
 800c9f0:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800c9f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9f6:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800c9fa:	6819      	ldr	r1, [r3, #0]
 800c9fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca00:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800ca04:	1c4b      	adds	r3, r1, #1
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800ca0c:	b25b      	sxtb	r3, r3
 800ca0e:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800ca10:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	4619      	mov	r1, r3
 800ca18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca1c:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800ca20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca24:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	440b      	add	r3, r1
 800ca2c:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800ca2e:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800ca32:	3302      	adds	r3, #2
 800ca34:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800ca38:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800ca3c:	1e5a      	subs	r2, r3, #1
 800ca3e:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800ca42:	4293      	cmp	r3, r2
 800ca44:	f6fe aae5 	blt.w	800b012 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800ca48:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f001 806e 	beq.w	800db32 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800ca56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca5a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800ca5e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca62:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800ca66:	6812      	ldr	r2, [r2, #0]
 800ca68:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800ca6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca6e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800ca72:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca76:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800ca7a:	6812      	ldr	r2, [r2, #0]
 800ca7c:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800ca84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca88:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00d      	beq.n	800caae <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800ca92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca96:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800caa0:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800caa4:	1d19      	adds	r1, r3, #4
 800caa6:	6011      	str	r1, [r2, #0]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800cab4:	f000 beb5 	b.w	800d822 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800cab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cabc:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800cac0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800cac4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800cac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caca:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	461a      	mov	r2, r3
 800cad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cada:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800cade:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cae4:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	1d1a      	adds	r2, r3, #4
 800caee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caf2:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	601a      	str	r2, [r3, #0]
    return (val);
 800cafa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cafe:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800cb02:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cb04:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800cb08:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cb0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb10:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800cb14:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cb18:	6019      	str	r1, [r3, #0]
 800cb1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb1e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800cb22:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cb24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb28:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cb32:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800cb36:	6812      	ldr	r2, [r2, #0]
 800cb38:	fa23 f282 	sxtab16	r2, r3, r2
 800cb3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb40:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800cb44:	601a      	str	r2, [r3, #0]
  return(result);
 800cb46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb4a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800cb54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb58:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800cb5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800cb60:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800cb62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb66:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb76:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800cb7a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cb7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb80:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	1d1a      	adds	r2, r3, #4
 800cb8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb8e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	601a      	str	r2, [r3, #0]
    return (val);
 800cb96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb9a:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800cb9e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800cba0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800cba4:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cba8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbac:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbb6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800cbba:	2208      	movs	r2, #8
 800cbbc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800cbbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbc2:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800cbc6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cbca:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800cbce:	6812      	ldr	r2, [r2, #0]
 800cbd0:	f002 021f 	and.w	r2, r2, #31
 800cbd4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800cbd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbda:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d105      	bne.n	800cbf0 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800cbe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe8:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	e00b      	b.n	800cc08 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cbf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbf4:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800cbf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbfc:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800cc00:	6812      	ldr	r2, [r2, #0]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	fa62 f303 	ror.w	r3, r2, r3
 800cc08:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cc0c:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800cc10:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cc14:	6011      	str	r1, [r2, #0]
 800cc16:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cc1a:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800cc1e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cc20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc24:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cc2e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800cc32:	6812      	ldr	r2, [r2, #0]
 800cc34:	fa23 f282 	sxtab16	r2, r3, r2
 800cc38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc3c:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800cc40:	601a      	str	r2, [r3, #0]
  return(result);
 800cc42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc46:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800cc50:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cc54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc58:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800cc5c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800cc60:	6019      	str	r1, [r3, #0]
 800cc62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc66:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800cc6a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cc6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc70:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cc7a:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800cc7e:	6812      	ldr	r2, [r2, #0]
 800cc80:	fa23 f282 	sxtab16	r2, r3, r2
 800cc84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc88:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800cc8c:	601a      	str	r2, [r3, #0]
  return(result);
 800cc8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc92:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800cc9c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cca4:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccae:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ccb2:	2208      	movs	r2, #8
 800ccb4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ccb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccba:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ccbe:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ccc2:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800ccc6:	6812      	ldr	r2, [r2, #0]
 800ccc8:	f002 021f 	and.w	r2, r2, #31
 800cccc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ccce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccd2:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d105      	bne.n	800cce8 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800ccdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cce0:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	e00b      	b.n	800cd00 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cce8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccec:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800ccf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccf4:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	fa62 f303 	ror.w	r3, r2, r3
 800cd00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd04:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800cd08:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800cd0c:	6011      	str	r1, [r2, #0]
 800cd0e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd12:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800cd16:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cd18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd1c:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd26:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800cd2a:	6812      	ldr	r2, [r2, #0]
 800cd2c:	fa23 f282 	sxtab16	r2, r3, r2
 800cd30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd34:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800cd38:	601a      	str	r2, [r3, #0]
  return(result);
 800cd3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd3e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800cd48:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800cd4c:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800cd50:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800cd54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd58:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800cd5c:	6018      	str	r0, [r3, #0]
 800cd5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd62:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800cd66:	6019      	str	r1, [r3, #0]
 800cd68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd6c:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800cd70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cd72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd76:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd80:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800cd84:	6812      	ldr	r2, [r2, #0]
 800cd86:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800cd8a:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800cd8e:	6809      	ldr	r1, [r1, #0]
 800cd90:	fb23 1202 	smlad	r2, r3, r2, r1
 800cd94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd98:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800cd9c:	601a      	str	r2, [r3, #0]
  return(result);
 800cd9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cda2:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800cdac:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800cdb0:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800cdb4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800cdb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdbc:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800cdc0:	6018      	str	r0, [r3, #0]
 800cdc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc6:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800cdca:	6019      	str	r1, [r3, #0]
 800cdcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdd0:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800cdd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cdd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdda:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cde4:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800cde8:	6812      	ldr	r2, [r2, #0]
 800cdea:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800cdee:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800cdf2:	6809      	ldr	r1, [r1, #0]
 800cdf4:	fb23 1202 	smlad	r2, r3, r2, r1
 800cdf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdfc:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800ce00:	601a      	str	r2, [r3, #0]
  return(result);
 800ce02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce06:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800ce10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce14:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800ce18:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ce1c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ce1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce22:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce32:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800ce36:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ce38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce3c:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	1d1a      	adds	r2, r3, #4
 800ce46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce4a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	601a      	str	r2, [r3, #0]
    return (val);
 800ce52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce56:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800ce5a:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ce5c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800ce60:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800ce64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce68:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800ce6c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800ce70:	6019      	str	r1, [r3, #0]
 800ce72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce76:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800ce7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ce7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce80:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ce8a:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800ce8e:	6812      	ldr	r2, [r2, #0]
 800ce90:	fa23 f282 	sxtab16	r2, r3, r2
 800ce94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce98:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800ce9c:	601a      	str	r2, [r3, #0]
  return(result);
 800ce9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800ceac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceb0:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800ceb4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ceb8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ceba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cebe:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	461a      	mov	r2, r3
 800ceca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cece:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800ced2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ced4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ced8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	1d1a      	adds	r2, r3, #4
 800cee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cee6:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	601a      	str	r2, [r3, #0]
    return (val);
 800ceee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cef2:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800cef6:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800cef8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800cefc:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cf00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf04:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf0e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800cf12:	2208      	movs	r2, #8
 800cf14:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800cf16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf1a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800cf1e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cf22:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800cf26:	6812      	ldr	r2, [r2, #0]
 800cf28:	f002 021f 	and.w	r2, r2, #31
 800cf2c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800cf2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf32:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d105      	bne.n	800cf48 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800cf3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf40:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	e00b      	b.n	800cf60 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cf48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf4c:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800cf50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf54:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800cf58:	6812      	ldr	r2, [r2, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	fa62 f303 	ror.w	r3, r2, r3
 800cf60:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cf64:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800cf68:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cf6c:	6011      	str	r1, [r2, #0]
 800cf6e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cf72:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800cf76:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cf78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf7c:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cf86:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800cf8a:	6812      	ldr	r2, [r2, #0]
 800cf8c:	fa23 f282 	sxtab16	r2, r3, r2
 800cf90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf94:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800cf98:	601a      	str	r2, [r3, #0]
  return(result);
 800cf9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf9e:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800cfa8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cfac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfb0:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800cfb4:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800cfb8:	6019      	str	r1, [r3, #0]
 800cfba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfbe:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800cfc2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cfc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfc8:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cfd2:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800cfd6:	6812      	ldr	r2, [r2, #0]
 800cfd8:	fa23 f282 	sxtab16	r2, r3, r2
 800cfdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfe0:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800cfe4:	601a      	str	r2, [r3, #0]
  return(result);
 800cfe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfea:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800cff4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cffc:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d006:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d00a:	2208      	movs	r2, #8
 800d00c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d00e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d012:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d016:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d01a:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800d01e:	6812      	ldr	r2, [r2, #0]
 800d020:	f002 021f 	and.w	r2, r2, #31
 800d024:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d026:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d02a:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d105      	bne.n	800d040 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800d034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d038:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	e00b      	b.n	800d058 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d044:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800d048:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d04c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	fa62 f303 	ror.w	r3, r2, r3
 800d058:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d05c:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800d060:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d064:	6011      	str	r1, [r2, #0]
 800d066:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d06a:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800d06e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d074:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d07e:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800d082:	6812      	ldr	r2, [r2, #0]
 800d084:	fa23 f282 	sxtab16	r2, r3, r2
 800d088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d08c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800d090:	601a      	str	r2, [r3, #0]
  return(result);
 800d092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d096:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d0a0:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d0a4:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d0a8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d0ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b0:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800d0b4:	6018      	str	r0, [r3, #0]
 800d0b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0ba:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800d0be:	6019      	str	r1, [r3, #0]
 800d0c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800d0c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d0ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0ce:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d0d8:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800d0dc:	6812      	ldr	r2, [r2, #0]
 800d0de:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d0e2:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800d0e6:	6809      	ldr	r1, [r1, #0]
 800d0e8:	fb23 1202 	smlad	r2, r3, r2, r1
 800d0ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0f0:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800d0f4:	601a      	str	r2, [r3, #0]
  return(result);
 800d0f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0fa:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d104:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d108:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d10c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d114:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800d118:	6018      	str	r0, [r3, #0]
 800d11a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d11e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800d122:	6019      	str	r1, [r3, #0]
 800d124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d128:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800d12c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d12e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d132:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d13c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800d140:	6812      	ldr	r2, [r2, #0]
 800d142:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d146:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800d14a:	6809      	ldr	r1, [r1, #0]
 800d14c:	fb23 1202 	smlad	r2, r3, r2, r1
 800d150:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d154:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800d158:	601a      	str	r2, [r3, #0]
  return(result);
 800d15a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d15e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800d168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d16c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d170:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d174:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d17a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	461a      	mov	r2, r3
 800d186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d18a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800d18e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d194:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	1d1a      	adds	r2, r3, #4
 800d19e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1a2:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	601a      	str	r2, [r3, #0]
    return (val);
 800d1aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ae:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800d1b2:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d1b4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800d1b8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d1bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1c0:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800d1c4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d1c8:	6019      	str	r1, [r3, #0]
 800d1ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ce:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800d1d2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d1d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1d8:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d1e2:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800d1e6:	6812      	ldr	r2, [r2, #0]
 800d1e8:	fa23 f282 	sxtab16	r2, r3, r2
 800d1ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1f0:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800d1f4:	601a      	str	r2, [r3, #0]
  return(result);
 800d1f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1fa:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800d204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d208:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d20c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800d210:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d216:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	461a      	mov	r2, r3
 800d222:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d226:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800d22a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d22c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d230:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	1d1a      	adds	r2, r3, #4
 800d23a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d23e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	601a      	str	r2, [r3, #0]
    return (val);
 800d246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d24a:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800d24e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d250:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d254:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d25c:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d266:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d26a:	2208      	movs	r2, #8
 800d26c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d26e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d272:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d276:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d27a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	f002 021f 	and.w	r2, r2, #31
 800d284:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d28a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d105      	bne.n	800d2a0 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800d294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d298:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	e00b      	b.n	800d2b8 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d2a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2a4:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800d2a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ac:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	fa62 f303 	ror.w	r3, r2, r3
 800d2b8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d2bc:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800d2c0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d2c4:	6011      	str	r1, [r2, #0]
 800d2c6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d2ca:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800d2ce:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d2d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2d4:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d2de:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800d2e2:	6812      	ldr	r2, [r2, #0]
 800d2e4:	fa23 f282 	sxtab16	r2, r3, r2
 800d2e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ec:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800d2f0:	601a      	str	r2, [r3, #0]
  return(result);
 800d2f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2f6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800d300:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d308:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d30c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d310:	6019      	str	r1, [r3, #0]
 800d312:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d316:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800d31a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d31c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d320:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d32a:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800d32e:	6812      	ldr	r2, [r2, #0]
 800d330:	fa23 f282 	sxtab16	r2, r3, r2
 800d334:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d338:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800d33c:	601a      	str	r2, [r3, #0]
  return(result);
 800d33e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d342:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800d34c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d350:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d354:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d35e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d362:	2208      	movs	r2, #8
 800d364:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d366:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d36a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d36e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d372:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800d376:	6812      	ldr	r2, [r2, #0]
 800d378:	f002 021f 	and.w	r2, r2, #31
 800d37c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d37e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d382:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d105      	bne.n	800d398 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800d38c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d390:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	e00b      	b.n	800d3b0 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d398:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d39c:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800d3a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3a4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d3a8:	6812      	ldr	r2, [r2, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	fa62 f303 	ror.w	r3, r2, r3
 800d3b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d3b4:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800d3b8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d3bc:	6011      	str	r1, [r2, #0]
 800d3be:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d3c2:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800d3c6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d3c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d3d6:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800d3da:	6812      	ldr	r2, [r2, #0]
 800d3dc:	fa23 f282 	sxtab16	r2, r3, r2
 800d3e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3e4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800d3e8:	601a      	str	r2, [r3, #0]
  return(result);
 800d3ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3ee:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d3f8:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d3fc:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d400:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d408:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800d40c:	6018      	str	r0, [r3, #0]
 800d40e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d412:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800d416:	6019      	str	r1, [r3, #0]
 800d418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d41c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800d420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d426:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d430:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800d434:	6812      	ldr	r2, [r2, #0]
 800d436:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d43a:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800d43e:	6809      	ldr	r1, [r1, #0]
 800d440:	fb23 1202 	smlad	r2, r3, r2, r1
 800d444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d448:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800d44c:	601a      	str	r2, [r3, #0]
  return(result);
 800d44e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d452:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d45c:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d460:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d464:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d468:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d46c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800d470:	6018      	str	r0, [r3, #0]
 800d472:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d476:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800d47a:	6019      	str	r1, [r3, #0]
 800d47c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d480:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d48a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d494:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800d498:	6812      	ldr	r2, [r2, #0]
 800d49a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d49e:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800d4a2:	6809      	ldr	r1, [r1, #0]
 800d4a4:	fb23 1202 	smlad	r2, r3, r2, r1
 800d4a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4ac:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800d4b0:	601a      	str	r2, [r3, #0]
  return(result);
 800d4b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4b6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800d4c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4c4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800d4c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800d4cc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d4ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4d2:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4e2:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800d4e6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4ec:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	1d1a      	adds	r2, r3, #4
 800d4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4fa:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	601a      	str	r2, [r3, #0]
    return (val);
 800d502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d506:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800d50a:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d50c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800d510:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d514:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d518:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800d51c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d520:	6019      	str	r1, [r3, #0]
 800d522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d526:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800d52a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d52c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d530:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d53a:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800d53e:	6812      	ldr	r2, [r2, #0]
 800d540:	fa23 f282 	sxtab16	r2, r3, r2
 800d544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d548:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800d54c:	601a      	str	r2, [r3, #0]
  return(result);
 800d54e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d552:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800d55c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d560:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800d564:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800d568:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800d56a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d56e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	461a      	mov	r2, r3
 800d57a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d57e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800d582:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d588:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	1d1a      	adds	r2, r3, #4
 800d592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d596:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	601a      	str	r2, [r3, #0]
    return (val);
 800d59e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5a2:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800d5a6:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d5a8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d5ac:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800d5b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800d5b8:	601a      	str	r2, [r3, #0]
 800d5ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5be:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800d5c2:	2208      	movs	r2, #8
 800d5c4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d5c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5ca:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800d5ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d5d2:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800d5d6:	6812      	ldr	r2, [r2, #0]
 800d5d8:	f002 021f 	and.w	r2, r2, #31
 800d5dc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d5de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5e2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d105      	bne.n	800d5f8 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800d5ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5f0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	e00b      	b.n	800d610 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d5f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5fc:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800d600:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d604:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800d608:	6812      	ldr	r2, [r2, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	fa62 f303 	ror.w	r3, r2, r3
 800d610:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d614:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800d618:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800d61c:	6011      	str	r1, [r2, #0]
 800d61e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d622:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800d626:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d62c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d636:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800d63a:	6812      	ldr	r2, [r2, #0]
 800d63c:	fa23 f282 	sxtab16	r2, r3, r2
 800d640:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d644:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800d648:	601a      	str	r2, [r3, #0]
  return(result);
 800d64a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d64e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800d658:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d65c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d660:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d664:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d668:	6019      	str	r1, [r3, #0]
 800d66a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d66e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800d672:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d678:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d682:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800d686:	6812      	ldr	r2, [r2, #0]
 800d688:	fa23 f282 	sxtab16	r2, r3, r2
 800d68c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d690:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800d694:	601a      	str	r2, [r3, #0]
  return(result);
 800d696:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d69a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800d6a4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d6a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6ac:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6b6:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d6ba:	2208      	movs	r2, #8
 800d6bc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d6be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6c2:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d6c6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d6ca:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800d6ce:	6812      	ldr	r2, [r2, #0]
 800d6d0:	f002 021f 	and.w	r2, r2, #31
 800d6d4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d6d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6da:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d105      	bne.n	800d6f0 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800d6e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6e8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	e00b      	b.n	800d708 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d6f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6f4:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800d6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6fc:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d700:	6812      	ldr	r2, [r2, #0]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	fa62 f303 	ror.w	r3, r2, r3
 800d708:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d70c:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800d710:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d714:	6011      	str	r1, [r2, #0]
 800d716:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d71a:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800d71e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d724:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d72e:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800d732:	6812      	ldr	r2, [r2, #0]
 800d734:	fa23 f282 	sxtab16	r2, r3, r2
 800d738:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d73c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800d740:	601a      	str	r2, [r3, #0]
  return(result);
 800d742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d746:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d750:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d754:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d758:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d75c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d760:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800d764:	6018      	str	r0, [r3, #0]
 800d766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d76a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800d76e:	6019      	str	r1, [r3, #0]
 800d770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d774:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800d778:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d77a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d77e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d788:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800d78c:	6812      	ldr	r2, [r2, #0]
 800d78e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d792:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800d796:	6809      	ldr	r1, [r1, #0]
 800d798:	fb23 1202 	smlad	r2, r3, r2, r1
 800d79c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7a0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800d7a4:	601a      	str	r2, [r3, #0]
  return(result);
 800d7a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7aa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d7b4:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d7b8:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d7bc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d7c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7c4:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800d7c8:	6018      	str	r0, [r3, #0]
 800d7ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7ce:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800d7d2:	6019      	str	r1, [r3, #0]
 800d7d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7d8:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800d7dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d7de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7e2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d7ec:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800d7f0:	6812      	ldr	r2, [r2, #0]
 800d7f2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d7f6:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800d7fa:	6809      	ldr	r1, [r1, #0]
 800d7fc:	fb23 1202 	smlad	r2, r3, r2, r1
 800d800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d804:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800d808:	601a      	str	r2, [r3, #0]
  return(result);
 800d80a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d80e:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800d818:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800d81c:	3310      	adds	r3, #16
 800d81e:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800d822:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d826:	3b0f      	subs	r3, #15
 800d828:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800d82c:	429a      	cmp	r2, r3
 800d82e:	f6ff a943 	blt.w	800cab8 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d832:	e03f      	b.n	800d8b4 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800d834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d838:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f993 3000 	ldrsb.w	r3, [r3]
 800d842:	461a      	mov	r2, r3
 800d844:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d848:	4413      	add	r3, r2
 800d84a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800d84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d852:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f993 3000 	ldrsb.w	r3, [r3]
 800d85c:	461a      	mov	r2, r3
 800d85e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800d862:	4413      	add	r3, r2
 800d864:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800d868:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800d86c:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800d870:	fb02 f303 	mul.w	r3, r2, r3
 800d874:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d878:	4413      	add	r3, r2
 800d87a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800d87e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d882:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d88e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800d892:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800d894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d898:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8a4:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800d8a8:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d8aa:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800d8b4:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800d8b8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	dbb9      	blt.n	800d834 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800d8c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8c4:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800d8c8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8d2:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800d8d6:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800d8da:	601a      	str	r2, [r3, #0]
 800d8dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8e0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d8e4:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800d8e8:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d8ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8ee:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d8f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d8fc:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800d900:	6812      	ldr	r2, [r2, #0]
 800d902:	409a      	lsls	r2, r3
 800d904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d908:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d912:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800d916:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d91a:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800d91e:	6812      	ldr	r2, [r2, #0]
 800d920:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d926:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800d92a:	2200      	movs	r2, #0
 800d92c:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800d92e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d932:	461a      	mov	r2, r3
 800d934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d938:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800d93c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d940:	461a      	mov	r2, r3
 800d942:	2300      	movs	r3, #0
 800d944:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d948:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d94c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d950:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d954:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800d958:	6809      	ldr	r1, [r1, #0]
 800d95a:	17c8      	asrs	r0, r1, #31
 800d95c:	6139      	str	r1, [r7, #16]
 800d95e:	6178      	str	r0, [r7, #20]
 800d960:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d964:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800d968:	6809      	ldr	r1, [r1, #0]
 800d96a:	17c8      	asrs	r0, r1, #31
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800d974:	4631      	mov	r1, r6
 800d976:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800d97a:	4650      	mov	r0, sl
 800d97c:	fb00 f001 	mul.w	r0, r0, r1
 800d980:	4659      	mov	r1, fp
 800d982:	462c      	mov	r4, r5
 800d984:	fb04 f101 	mul.w	r1, r4, r1
 800d988:	4401      	add	r1, r0
 800d98a:	4628      	mov	r0, r5
 800d98c:	4654      	mov	r4, sl
 800d98e:	fba0 8904 	umull	r8, r9, r0, r4
 800d992:	4449      	add	r1, r9
 800d994:	4689      	mov	r9, r1
 800d996:	eb12 0108 	adds.w	r1, r2, r8
 800d99a:	6039      	str	r1, [r7, #0]
 800d99c:	eb43 0309 	adc.w	r3, r3, r9
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d9a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d9aa:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800d9ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d9b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d9b6:	f04f 0200 	mov.w	r2, #0
 800d9ba:	f04f 0300 	mov.w	r3, #0
 800d9be:	0fc2      	lsrs	r2, r0, #31
 800d9c0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d9c4:	17cb      	asrs	r3, r1, #31
 800d9c6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d9ca:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	600b      	str	r3, [r1, #0]
    return result;
 800d9d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9d6:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800d9da:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d9dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9e0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	dc06      	bgt.n	800d9f8 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800d9ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ee:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	425b      	negs	r3, r3
 800d9f6:	e000      	b.n	800d9fa <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d9fe:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800da02:	6011      	str	r1, [r2, #0]
 800da04:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da08:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800da0c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800da0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da12:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800da16:	2200      	movs	r2, #0
 800da18:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800da1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da1e:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800da22:	2201      	movs	r2, #1
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	409a      	lsls	r2, r3
 800da28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da2c:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800da30:	3a01      	subs	r2, #1
 800da32:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800da34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da38:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800da3c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da40:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800da44:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da48:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800da4c:	6809      	ldr	r1, [r1, #0]
 800da4e:	6812      	ldr	r2, [r2, #0]
 800da50:	400a      	ands	r2, r1
 800da52:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800da54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da58:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800da5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da60:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800da64:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da68:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800da6c:	6809      	ldr	r1, [r1, #0]
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	fa41 f202 	asr.w	r2, r1, r2
 800da74:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800da76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da7a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800da7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800da82:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800da86:	6812      	ldr	r2, [r2, #0]
 800da88:	1052      	asrs	r2, r2, #1
 800da8a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800da8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da90:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	da0a      	bge.n	800dab0 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800da9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da9e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800daa2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800daa6:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	3201      	adds	r2, #1
 800daae:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800dab0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dab4:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800dab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dabc:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800dac0:	6812      	ldr	r2, [r2, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	dd0a      	ble.n	800dade <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800dac8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dacc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800dad0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dad4:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800dad8:	6812      	ldr	r2, [r2, #0]
 800dada:	3201      	adds	r2, #1
 800dadc:	601a      	str	r2, [r3, #0]
    return result;
 800dade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dae2:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800dae6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800dae8:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800daea:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800daee:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800daf2:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800daf6:	4413      	add	r3, r2
 800daf8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800dafc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800db00:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800db04:	4293      	cmp	r3, r2
 800db06:	bfb8      	it	lt
 800db08:	4613      	movlt	r3, r2
 800db0a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800db0e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800db12:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800db16:	4293      	cmp	r3, r2
 800db18:	bfa8      	it	ge
 800db1a:	4613      	movge	r3, r2
 800db1c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800db20:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800db24:	b25a      	sxtb	r2, r3
 800db26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db2a:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800db3a:	46bd      	mov	sp, r7
 800db3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800db40:	4770      	bx	lr
 800db42:	0000      	movs	r0, r0
 800db44:	0000      	movs	r0, r0
	...

0800db48 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800db48:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800db4c:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800db50:	af00      	add	r7, sp, #0
 800db52:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800db56:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800db5a:	6020      	str	r0, [r4, #0]
 800db5c:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800db60:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800db64:	6001      	str	r1, [r0, #0]
 800db66:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800db6a:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800db6e:	600a      	str	r2, [r1, #0]
 800db70:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800db74:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800db78:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800db7a:	2201      	movs	r2, #1
 800db7c:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800db80:	fa02 f303 	lsl.w	r3, r2, r3
 800db84:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800db8e:	2300      	movs	r3, #0
 800db90:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800db94:	f004 b863 	b.w	8011c5e <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800db98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800db9c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800dba8:	2301      	movs	r3, #1
 800dbaa:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800dbae:	e015      	b.n	800dbdc <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800dbb0:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800dbb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dbb8:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f993 2000 	ldrsb.w	r2, [r3]
 800dbc4:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	bfb8      	it	lt
 800dbcc:	4613      	movlt	r3, r2
 800dbce:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800dbd2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800dbdc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dbe0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800dbe4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	dbe0      	blt.n	800dbb0 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800dc00:	f001 ba24 	b.w	800f04c <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800dc04:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800dc08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc0c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4413      	add	r3, r2
 800dc14:	f993 3000 	ldrsb.w	r3, [r3]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800dc24:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800dc28:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	f2c1 8208 	blt.w	800f042 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800dc32:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800dc36:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800dc3a:	fb03 f202 	mul.w	r2, r3, r2
 800dc3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc42:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc4c:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800dc50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc54:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800dc5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc60:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800dc64:	2300      	movs	r3, #0
 800dc66:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800dc68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc6c:	f04f 0300 	mov.w	r3, #0
 800dc70:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800dc74:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800dc78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc7c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	0fdb      	lsrs	r3, r3, #31
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dc8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	0fdb      	lsrs	r3, r3, #31
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	4053      	eors	r3, r2
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d012      	beq.n	800dcc2 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800dc9c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	2100      	movs	r1, #0
 800dca6:	f1d2 0001 	rsbs	r0, r2, #1
 800dcaa:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800dcae:	eb61 0303 	sbc.w	r3, r1, r3
 800dcb2:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800dcb6:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800dcba:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800dcbe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800dcc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dcc6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	17da      	asrs	r2, r3, #31
 800dcce:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800dcd2:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800dcd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dcda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	17da      	asrs	r2, r3, #31
 800dce2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800dce6:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800dcea:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800dcee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800dcf8:	fb02 f203 	mul.w	r2, r2, r3
 800dcfc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800dd00:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800dd04:	e9c4 0100 	strd	r0, r1, [r4]
 800dd08:	4601      	mov	r1, r0
 800dd0a:	fb01 f303 	mul.w	r3, r1, r3
 800dd0e:	4413      	add	r3, r2
 800dd10:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800dd14:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800dd18:	fba2 1201 	umull	r1, r2, r2, r1
 800dd1c:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800dd20:	460a      	mov	r2, r1
 800dd22:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800dd26:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800dd30:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800dd3c:	1851      	adds	r1, r2, r1
 800dd3e:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800dd42:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800dd46:	414b      	adcs	r3, r1
 800dd48:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800dd4c:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800dd50:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800dd54:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800dd58:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	da0a      	bge.n	800dd7a <arm_softmax_s8+0x232>
 800dd64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd68:	1851      	adds	r1, r2, r1
 800dd6a:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800dd6e:	f143 0300 	adc.w	r3, r3, #0
 800dd72:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800dd76:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800dd7a:	f04f 0000 	mov.w	r0, #0
 800dd7e:	f04f 0100 	mov.w	r1, #0
 800dd82:	0fd0      	lsrs	r0, r2, #31
 800dd84:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800dd88:	17d9      	asrs	r1, r3, #31
 800dd8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dd8e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800dd92:	4603      	mov	r3, r0
 800dd94:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800dd96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dd9a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800dd9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dda2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800dda6:	6812      	ldr	r2, [r2, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d10e      	bne.n	800ddcc <arm_softmax_s8+0x284>
 800ddae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddb2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddbc:	d106      	bne.n	800ddcc <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800ddbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddc2:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ddc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddca:	6013      	str	r3, [r2, #0]
    return result;
 800ddcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ddd0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800dde0:	2318      	movs	r3, #24
 800dde2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800dde6:	2201      	movs	r2, #1
 800dde8:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800ddec:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf0:	1e5a      	subs	r2, r3, #1
 800ddf2:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800ddf6:	ea02 0103 	and.w	r1, r2, r3
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800de00:	fa02 f303 	lsl.w	r3, r2, r3
 800de04:	1acb      	subs	r3, r1, r3
 800de06:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800de0a:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800de0e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800de18:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800de1c:	015b      	lsls	r3, r3, #5
 800de1e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800de22:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800de26:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800de2a:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800de2e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800de32:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800de3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800de40:	f04f 0300 	mov.w	r3, #0
 800de44:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800de48:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800de4c:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800de50:	0fdb      	lsrs	r3, r3, #31
 800de52:	b2da      	uxtb	r2, r3
 800de54:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800de58:	0fdb      	lsrs	r3, r3, #31
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	4053      	eors	r3, r2
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d012      	beq.n	800de8a <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800de64:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800de68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6c:	2100      	movs	r1, #0
 800de6e:	f1d2 0001 	rsbs	r0, r2, #1
 800de72:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800de76:	eb61 0303 	sbc.w	r3, r1, r3
 800de7a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800de7e:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800de82:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800de86:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800de8a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800de8e:	17da      	asrs	r2, r3, #31
 800de90:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800de94:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 800de98:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800de9c:	17da      	asrs	r2, r3, #31
 800de9e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 800dea2:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 800dea6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800deaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deae:	460b      	mov	r3, r1
 800deb0:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800deb4:	fb02 f203 	mul.w	r2, r2, r3
 800deb8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800debc:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 800dec0:	e9c4 0100 	strd	r0, r1, [r4]
 800dec4:	4601      	mov	r1, r0
 800dec6:	fb01 f303 	mul.w	r3, r1, r3
 800deca:	4413      	add	r3, r2
 800decc:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800ded0:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800ded4:	fba2 8901 	umull	r8, r9, r2, r1
 800ded8:	444b      	add	r3, r9
 800deda:	4699      	mov	r9, r3
 800dedc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	eb12 0108 	adds.w	r1, r2, r8
 800dee8:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 800deec:	eb43 0309 	adc.w	r3, r3, r9
 800def0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800def4:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800def8:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800defc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800df00:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	da0a      	bge.n	800df22 <arm_softmax_s8+0x3da>
 800df0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df10:	1851      	adds	r1, r2, r1
 800df12:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800df16:	f143 0300 	adc.w	r3, r3, #0
 800df1a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800df1e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800df22:	f04f 0000 	mov.w	r0, #0
 800df26:	f04f 0100 	mov.w	r1, #0
 800df2a:	0fd0      	lsrs	r0, r2, #31
 800df2c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800df30:	17d9      	asrs	r1, r3, #31
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	4613      	mov	r3, r2
 800df38:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800df3c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800df40:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800df44:	429a      	cmp	r2, r3
 800df46:	d108      	bne.n	800df5a <arm_softmax_s8+0x412>
 800df48:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800df4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df50:	d103      	bne.n	800df5a <arm_softmax_s8+0x412>
        result = Q31_MAX;
 800df52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800df56:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 800df5a:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 800df5e:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800df62:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800df66:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 800df6a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800df6e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 800df78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df7c:	f04f 0300 	mov.w	r3, #0
 800df80:	f607 1128 	addw	r1, r7, #2344	; 0x928
 800df84:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800df88:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800df8c:	0fdb      	lsrs	r3, r3, #31
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800df94:	0fdb      	lsrs	r3, r3, #31
 800df96:	b2db      	uxtb	r3, r3
 800df98:	4053      	eors	r3, r2
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d012      	beq.n	800dfc6 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 800dfa0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	f1d2 0001 	rsbs	r0, r2, #1
 800dfae:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 800dfb2:	eb61 0303 	sbc.w	r3, r1, r3
 800dfb6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800dfba:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800dfbe:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800dfc2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800dfc6:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800dfca:	17da      	asrs	r2, r3, #31
 800dfcc:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800dfd0:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 800dfd4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800dfd8:	17da      	asrs	r2, r3, #31
 800dfda:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800dfde:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 800dfe2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800dfe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfea:	460b      	mov	r3, r1
 800dfec:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800dff0:	fb02 f203 	mul.w	r2, r2, r3
 800dff4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800dff8:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 800dffc:	e9c4 0100 	strd	r0, r1, [r4]
 800e000:	4601      	mov	r1, r0
 800e002:	fb01 f303 	mul.w	r3, r1, r3
 800e006:	4413      	add	r3, r2
 800e008:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800e00c:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800e010:	fba2 ab01 	umull	sl, fp, r2, r1
 800e014:	445b      	add	r3, fp
 800e016:	469b      	mov	fp, r3
 800e018:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	eb12 010a 	adds.w	r1, r2, sl
 800e024:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800e028:	eb43 030b 	adc.w	r3, r3, fp
 800e02c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800e030:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800e034:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800e038:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e03c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	2b00      	cmp	r3, #0
 800e046:	da0a      	bge.n	800e05e <arm_softmax_s8+0x516>
 800e048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e04c:	1851      	adds	r1, r2, r1
 800e04e:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800e052:	f143 0300 	adc.w	r3, r3, #0
 800e056:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800e05a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800e05e:	f04f 0000 	mov.w	r0, #0
 800e062:	f04f 0100 	mov.w	r1, #0
 800e066:	0fd0      	lsrs	r0, r2, #31
 800e068:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e06c:	17d9      	asrs	r1, r3, #31
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	4613      	mov	r3, r2
 800e074:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e078:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 800e07c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800e080:	429a      	cmp	r2, r3
 800e082:	d108      	bne.n	800e096 <arm_softmax_s8+0x54e>
 800e084:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800e088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e08c:	d103      	bne.n	800e096 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 800e08e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e092:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 800e096:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 800e09a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e0a4:	2304      	movs	r3, #4
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 800e0ac:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 800e0b0:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800e0b4:	4013      	ands	r3, r2
 800e0b6:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 800e0ba:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800e0be:	109b      	asrs	r3, r3, #2
 800e0c0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 800e0c4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800e0c8:	105b      	asrs	r3, r3, #1
 800e0ca:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 800e0ce:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	da04      	bge.n	800e0e0 <arm_softmax_s8+0x598>
        threshold++;
 800e0d6:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800e0da:	3301      	adds	r3, #1
 800e0dc:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 800e0e0:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 800e0e4:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	dd04      	ble.n	800e0f6 <arm_softmax_s8+0x5ae>
        result++;
 800e0ec:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 800e0f6:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 800e0fa:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800e0fe:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800e102:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800e106:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 800e110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e114:	f04f 0300 	mov.w	r3, #0
 800e118:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800e11c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e120:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800e124:	0fdb      	lsrs	r3, r3, #31
 800e126:	b2da      	uxtb	r2, r3
 800e128:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800e12c:	0fdb      	lsrs	r3, r3, #31
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	4053      	eors	r3, r2
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d012      	beq.n	800e15e <arm_softmax_s8+0x616>
        mult = 1 - mult;
 800e138:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	2100      	movs	r1, #0
 800e142:	f1d2 0001 	rsbs	r0, r2, #1
 800e146:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 800e14a:	eb61 0303 	sbc.w	r3, r1, r3
 800e14e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800e152:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800e156:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800e15a:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800e15e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800e162:	17da      	asrs	r2, r3, #31
 800e164:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800e168:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 800e16c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800e170:	17da      	asrs	r2, r3, #31
 800e172:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800e176:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 800e17a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800e17e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e182:	460b      	mov	r3, r1
 800e184:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800e188:	fb02 f203 	mul.w	r2, r2, r3
 800e18c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800e190:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 800e194:	e9cc 0100 	strd	r0, r1, [ip]
 800e198:	4601      	mov	r1, r0
 800e19a:	fb01 f303 	mul.w	r3, r1, r3
 800e19e:	4413      	add	r3, r2
 800e1a0:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800e1a4:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 800e1a8:	fba2 5601 	umull	r5, r6, r2, r1
 800e1ac:	4433      	add	r3, r6
 800e1ae:	461e      	mov	r6, r3
 800e1b0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	1951      	adds	r1, r2, r5
 800e1ba:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 800e1be:	4173      	adcs	r3, r6
 800e1c0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800e1c4:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800e1c8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800e1cc:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800e1d0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	da0a      	bge.n	800e1f2 <arm_softmax_s8+0x6aa>
 800e1dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1e0:	1851      	adds	r1, r2, r1
 800e1e2:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 800e1e6:	f143 0300 	adc.w	r3, r3, #0
 800e1ea:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800e1ee:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800e1f2:	f04f 0000 	mov.w	r0, #0
 800e1f6:	f04f 0100 	mov.w	r1, #0
 800e1fa:	0fd0      	lsrs	r0, r2, #31
 800e1fc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e200:	17d9      	asrs	r1, r3, #31
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4613      	mov	r3, r2
 800e208:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e20c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 800e210:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800e214:	429a      	cmp	r2, r3
 800e216:	d108      	bne.n	800e22a <arm_softmax_s8+0x6e2>
 800e218:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800e21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e220:	d103      	bne.n	800e22a <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 800e222:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e226:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 800e22a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800e22e:	4423      	add	r3, r4
 800e230:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 800e23a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e23e:	f04f 0300 	mov.w	r3, #0
 800e242:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800e246:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e24a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800e24e:	0fdb      	lsrs	r3, r3, #31
 800e250:	b2da      	uxtb	r2, r3
 800e252:	2300      	movs	r3, #0
 800e254:	4053      	eors	r3, r2
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d012      	beq.n	800e282 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 800e25c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	2100      	movs	r1, #0
 800e266:	f1d2 0001 	rsbs	r0, r2, #1
 800e26a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 800e26e:	eb61 0303 	sbc.w	r3, r1, r3
 800e272:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800e276:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800e27a:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800e27e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e282:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800e286:	17da      	asrs	r2, r3, #31
 800e288:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800e28c:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 800e290:	a3f0      	add	r3, pc, #960	; (adr r3, 800e654 <arm_softmax_s8+0xb0c>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 800e29a:	fb02 f001 	mul.w	r0, r2, r1
 800e29e:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 800e2a2:	fb01 f103 	mul.w	r1, r1, r3
 800e2a6:	4401      	add	r1, r0
 800e2a8:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 800e2ac:	fba0 2302 	umull	r2, r3, r0, r2
 800e2b0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800e2ba:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800e2be:	18cb      	adds	r3, r1, r3
 800e2c0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800e2c4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800e2d0:	1851      	adds	r1, r2, r1
 800e2d2:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800e2d6:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800e2da:	414b      	adcs	r3, r1
 800e2dc:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800e2e0:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800e2e4:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800e2e8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e2ec:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da0a      	bge.n	800e30e <arm_softmax_s8+0x7c6>
 800e2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e2fc:	1851      	adds	r1, r2, r1
 800e2fe:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800e302:	f143 0300 	adc.w	r3, r3, #0
 800e306:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800e30a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800e30e:	f04f 0000 	mov.w	r0, #0
 800e312:	f04f 0100 	mov.w	r1, #0
 800e316:	0fd0      	lsrs	r0, r2, #31
 800e318:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e31c:	17d9      	asrs	r1, r3, #31
 800e31e:	4602      	mov	r2, r0
 800e320:	460b      	mov	r3, r1
 800e322:	4613      	mov	r3, r2
 800e324:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e328:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800e32c:	4bc6      	ldr	r3, [pc, #792]	; (800e648 <arm_softmax_s8+0xb00>)
 800e32e:	429a      	cmp	r2, r3
 800e330:	d108      	bne.n	800e344 <arm_softmax_s8+0x7fc>
 800e332:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800e336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e33a:	d103      	bne.n	800e344 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 800e33c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e340:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 800e344:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800e348:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800e34c:	4413      	add	r3, r2
 800e34e:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e358:	2302      	movs	r3, #2
 800e35a:	3b01      	subs	r3, #1
 800e35c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 800e360:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 800e364:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800e368:	4013      	ands	r3, r2
 800e36a:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 800e36e:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800e372:	105b      	asrs	r3, r3, #1
 800e374:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 800e378:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800e37c:	105b      	asrs	r3, r3, #1
 800e37e:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 800e382:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800e386:	2b00      	cmp	r3, #0
 800e388:	da04      	bge.n	800e394 <arm_softmax_s8+0x84c>
        threshold++;
 800e38a:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800e38e:	3301      	adds	r3, #1
 800e390:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 800e394:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800e398:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800e39c:	429a      	cmp	r2, r3
 800e39e:	dd04      	ble.n	800e3aa <arm_softmax_s8+0x862>
        result++;
 800e3a0:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 800e3aa:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800e3ae:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 800e3be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e3c2:	f04f 0300 	mov.w	r3, #0
 800e3c6:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800e3ca:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800e3d4:	0fdb      	lsrs	r3, r3, #31
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	4053      	eors	r3, r2
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d012      	beq.n	800e406 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 800e3e0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	f1d2 0001 	rsbs	r0, r2, #1
 800e3ee:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 800e3f2:	eb61 0303 	sbc.w	r3, r1, r3
 800e3f6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800e3fa:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800e3fe:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800e402:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e406:	a18c      	add	r1, pc, #560	; (adr r1, 800e638 <arm_softmax_s8+0xaf0>)
 800e408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e40c:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800e410:	17da      	asrs	r2, r3, #31
 800e412:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800e416:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 800e41a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800e41e:	fb03 f201 	mul.w	r2, r3, r1
 800e422:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800e426:	fb00 f303 	mul.w	r3, r0, r3
 800e42a:	4413      	add	r3, r2
 800e42c:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800e430:	fba0 1202 	umull	r1, r2, r0, r2
 800e434:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 800e438:	460a      	mov	r2, r1
 800e43a:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 800e43e:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800e442:	4413      	add	r3, r2
 800e444:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800e448:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800e454:	1851      	adds	r1, r2, r1
 800e456:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800e45a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800e45e:	414b      	adcs	r3, r1
 800e460:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800e464:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800e468:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800e46c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e470:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	da0a      	bge.n	800e492 <arm_softmax_s8+0x94a>
 800e47c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e480:	1851      	adds	r1, r2, r1
 800e482:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800e486:	f143 0300 	adc.w	r3, r3, #0
 800e48a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800e48e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800e492:	f04f 0000 	mov.w	r0, #0
 800e496:	f04f 0100 	mov.w	r1, #0
 800e49a:	0fd0      	lsrs	r0, r2, #31
 800e49c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e4a0:	17d9      	asrs	r1, r3, #31
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 800e4ac:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 800e4b0:	4b66      	ldr	r3, [pc, #408]	; (800e64c <arm_softmax_s8+0xb04>)
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800e4b8:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e4bc:	1c53      	adds	r3, r2, #1
 800e4be:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	fa03 f202 	lsl.w	r2, r3, r2
 800e4c8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <arm_softmax_s8+0x990>
 800e4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d6:	e000      	b.n	800e4da <arm_softmax_s8+0x992>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e4de:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e4e2:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 800e4ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800e4f8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e4fc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800e500:	0fdb      	lsrs	r3, r3, #31
 800e502:	b2da      	uxtb	r2, r3
 800e504:	2300      	movs	r3, #0
 800e506:	4053      	eors	r3, r2
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d012      	beq.n	800e534 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 800e50e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	2100      	movs	r1, #0
 800e518:	f1d2 0001 	rsbs	r0, r2, #1
 800e51c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800e520:	eb61 0303 	sbc.w	r3, r1, r3
 800e524:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800e528:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800e52c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800e530:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e534:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800e538:	17da      	asrs	r2, r3, #31
 800e53a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800e53e:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 800e542:	a33f      	add	r3, pc, #252	; (adr r3, 800e640 <arm_softmax_s8+0xaf8>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800e54c:	fb02 f001 	mul.w	r0, r2, r1
 800e550:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 800e554:	fb01 f103 	mul.w	r1, r1, r3
 800e558:	4401      	add	r1, r0
 800e55a:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800e55e:	fba0 2302 	umull	r2, r3, r0, r2
 800e562:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800e566:	4613      	mov	r3, r2
 800e568:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800e56c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800e570:	18cb      	adds	r3, r1, r3
 800e572:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800e576:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800e582:	1851      	adds	r1, r2, r1
 800e584:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800e588:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800e58c:	414b      	adcs	r3, r1
 800e58e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800e592:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800e596:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800e59a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e59e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	da0a      	bge.n	800e5c0 <arm_softmax_s8+0xa78>
 800e5aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5ae:	1851      	adds	r1, r2, r1
 800e5b0:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800e5b4:	f143 0300 	adc.w	r3, r3, #0
 800e5b8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800e5bc:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800e5c0:	f04f 0000 	mov.w	r0, #0
 800e5c4:	f04f 0100 	mov.w	r1, #0
 800e5c8:	0fd0      	lsrs	r0, r2, #31
 800e5ca:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e5ce:	17d9      	asrs	r1, r3, #31
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e5da:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800e5de:	4b1c      	ldr	r3, [pc, #112]	; (800e650 <arm_softmax_s8+0xb08>)
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d108      	bne.n	800e5f6 <arm_softmax_s8+0xaae>
 800e5e4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800e5e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5ec:	d103      	bne.n	800e5f6 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 800e5ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e5f2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 800e5f6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 800e5fa:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e5fe:	ea02 0103 	and.w	r1, r2, r3
 800e602:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e606:	43da      	mvns	r2, r3
 800e608:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e60c:	4013      	ands	r3, r2
 800e60e:	404b      	eors	r3, r1
 800e610:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 800e614:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e618:	1c53      	adds	r3, r2, #1
 800e61a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e61e:	2301      	movs	r3, #1
 800e620:	fa03 f202 	lsl.w	r2, r3, r2
 800e624:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e628:	4013      	ands	r3, r2
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d016      	beq.n	800e65c <arm_softmax_s8+0xb14>
 800e62e:	f04f 33ff 	mov.w	r3, #4294967295
 800e632:	e014      	b.n	800e65e <arm_softmax_s8+0xb16>
 800e634:	f3af 8000 	nop.w
 800e638:	70f5a894 	.word	0x70f5a894
 800e63c:	00000000 	.word	0x00000000
 800e640:	63afbe7b 	.word	0x63afbe7b
 800e644:	00000000 	.word	0x00000000
 800e648:	2aaaaaab 	.word	0x2aaaaaab
 800e64c:	70f5a894 	.word	0x70f5a894
 800e650:	63afbe7b 	.word	0x63afbe7b
 800e654:	2aaaaaab 	.word	0x2aaaaaab
 800e658:	00000000 	.word	0x00000000
 800e65c:	2300      	movs	r3, #0
 800e65e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e662:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e666:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 800e66a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e66e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800e672:	2300      	movs	r3, #0
 800e674:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e67a:	f04f 0300 	mov.w	r3, #0
 800e67e:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800e682:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e686:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800e68a:	0fdb      	lsrs	r3, r3, #31
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	2300      	movs	r3, #0
 800e690:	4053      	eors	r3, r2
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b00      	cmp	r3, #0
 800e696:	d012      	beq.n	800e6be <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 800e698:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	f1d2 0001 	rsbs	r0, r2, #1
 800e6a6:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 800e6aa:	eb61 0303 	sbc.w	r3, r1, r3
 800e6ae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800e6b2:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800e6b6:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800e6ba:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e6be:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800e6c2:	17da      	asrs	r2, r3, #31
 800e6c4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800e6c8:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 800e6cc:	a3a8      	add	r3, pc, #672	; (adr r3, 800e970 <arm_softmax_s8+0xe28>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 800e6d6:	fb02 f001 	mul.w	r0, r2, r1
 800e6da:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800e6de:	fb01 f103 	mul.w	r1, r1, r3
 800e6e2:	4401      	add	r1, r0
 800e6e4:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 800e6e8:	fba0 2302 	umull	r2, r3, r0, r2
 800e6ec:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800e6f6:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800e6fa:	18cb      	adds	r3, r1, r3
 800e6fc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800e700:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800e70c:	1851      	adds	r1, r2, r1
 800e70e:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800e712:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800e716:	414b      	adcs	r3, r1
 800e718:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800e71c:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800e720:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800e724:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e728:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800e72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e730:	2b00      	cmp	r3, #0
 800e732:	da0a      	bge.n	800e74a <arm_softmax_s8+0xc02>
 800e734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e738:	1851      	adds	r1, r2, r1
 800e73a:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800e73e:	f143 0300 	adc.w	r3, r3, #0
 800e742:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800e746:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800e74a:	f04f 0000 	mov.w	r0, #0
 800e74e:	f04f 0100 	mov.w	r1, #0
 800e752:	0fd0      	lsrs	r0, r2, #31
 800e754:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e758:	17d9      	asrs	r1, r3, #31
 800e75a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e75e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800e762:	4603      	mov	r3, r0
 800e764:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e766:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 800e76a:	4b7f      	ldr	r3, [pc, #508]	; (800e968 <arm_softmax_s8+0xe20>)
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d10b      	bne.n	800e788 <arm_softmax_s8+0xc40>
 800e770:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800e774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e778:	d106      	bne.n	800e788 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 800e77a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e77e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800e782:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e786:	6013      	str	r3, [r2, #0]
    return result;
 800e788:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e78c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e790:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800e792:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e796:	ea02 0103 	and.w	r1, r2, r3
 800e79a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e79e:	43da      	mvns	r2, r3
 800e7a0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	404b      	eors	r3, r1
 800e7a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 800e7ac:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e7b0:	1c53      	adds	r3, r2, #1
 800e7b2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	fa03 f202 	lsl.w	r2, r3, r2
 800e7bc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d002      	beq.n	800e7cc <arm_softmax_s8+0xc84>
 800e7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ca:	e000      	b.n	800e7ce <arm_softmax_s8+0xc86>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e7d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7d6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800e7da:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e7de:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e7e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7e4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e7ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e7f0:	f04f 0300 	mov.w	r3, #0
 800e7f4:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 800e7f8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e7fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e800:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	0fdb      	lsrs	r3, r3, #31
 800e808:	b2da      	uxtb	r2, r3
 800e80a:	2300      	movs	r3, #0
 800e80c:	4053      	eors	r3, r2
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	2b00      	cmp	r3, #0
 800e812:	d012      	beq.n	800e83a <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 800e814:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800e818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81c:	2100      	movs	r1, #0
 800e81e:	f1d2 0001 	rsbs	r0, r2, #1
 800e822:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 800e826:	eb61 0303 	sbc.w	r3, r1, r3
 800e82a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800e82e:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800e832:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800e836:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e83a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e83e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	17da      	asrs	r2, r3, #31
 800e846:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800e84a:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 800e84e:	a344      	add	r3, pc, #272	; (adr r3, 800e960 <arm_softmax_s8+0xe18>)
 800e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e854:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800e858:	fb02 f001 	mul.w	r0, r2, r1
 800e85c:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 800e860:	fb01 f103 	mul.w	r1, r1, r3
 800e864:	4401      	add	r1, r0
 800e866:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800e86a:	fba0 2302 	umull	r2, r3, r0, r2
 800e86e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800e872:	4613      	mov	r3, r2
 800e874:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800e878:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800e87c:	18cb      	adds	r3, r1, r3
 800e87e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800e882:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800e886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800e88e:	1851      	adds	r1, r2, r1
 800e890:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800e894:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800e898:	414b      	adcs	r3, r1
 800e89a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800e89e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800e8a2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800e8a6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e8aa:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	da0a      	bge.n	800e8cc <arm_softmax_s8+0xd84>
 800e8b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e8ba:	1851      	adds	r1, r2, r1
 800e8bc:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800e8c0:	f143 0300 	adc.w	r3, r3, #0
 800e8c4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800e8c8:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800e8cc:	f04f 0000 	mov.w	r0, #0
 800e8d0:	f04f 0100 	mov.w	r1, #0
 800e8d4:	0fd0      	lsrs	r0, r2, #31
 800e8d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e8da:	17d9      	asrs	r1, r3, #31
 800e8dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8e0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e8e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	4b1e      	ldr	r3, [pc, #120]	; (800e96c <arm_softmax_s8+0xe24>)
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d10e      	bne.n	800e916 <arm_softmax_s8+0xdce>
 800e8f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e8fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e906:	d106      	bne.n	800e916 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 800e908:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e90c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e910:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e914:	6013      	str	r3, [r2, #0]
    return result;
 800e916:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e91a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e91e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800e920:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e924:	ea02 0103 	and.w	r1, r2, r3
 800e928:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e92c:	43da      	mvns	r2, r3
 800e92e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e932:	4013      	ands	r3, r2
 800e934:	404b      	eors	r3, r1
 800e936:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 800e93a:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e93e:	1c53      	adds	r3, r2, #1
 800e940:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e944:	2301      	movs	r3, #1
 800e946:	fa03 f202 	lsl.w	r2, r3, r2
 800e94a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e94e:	4013      	ands	r3, r2
 800e950:	2b00      	cmp	r3, #0
 800e952:	d011      	beq.n	800e978 <arm_softmax_s8+0xe30>
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	e00f      	b.n	800e97a <arm_softmax_s8+0xe32>
 800e95a:	bf00      	nop
 800e95c:	f3af 8000 	nop.w
 800e960:	2f16ac6c 	.word	0x2f16ac6c
 800e964:	00000000 	.word	0x00000000
 800e968:	4da2cbf2 	.word	0x4da2cbf2
 800e96c:	2f16ac6c 	.word	0x2f16ac6c
 800e970:	4da2cbf2 	.word	0x4da2cbf2
 800e974:	00000000 	.word	0x00000000
 800e978:	2300      	movs	r3, #0
 800e97a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e97e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e982:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800e986:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e98a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e98c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e990:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800e994:	2300      	movs	r3, #0
 800e996:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e99c:	f04f 0300 	mov.w	r3, #0
 800e9a0:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800e9a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e9a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e9ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	0fdb      	lsrs	r3, r3, #31
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	4053      	eors	r3, r2
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d012      	beq.n	800e9e6 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 800e9c0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	f1d2 0001 	rsbs	r0, r2, #1
 800e9ce:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 800e9d2:	eb61 0303 	sbc.w	r3, r1, r3
 800e9d6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e9da:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800e9de:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800e9e2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e9e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e9ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	17da      	asrs	r2, r3, #31
 800e9f2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800e9f6:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 800e9fa:	a3ab      	add	r3, pc, #684	; (adr r3, 800eca8 <arm_softmax_s8+0x1160>)
 800e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea00:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800ea04:	fb02 f001 	mul.w	r0, r2, r1
 800ea08:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 800ea0c:	fb01 f103 	mul.w	r1, r1, r3
 800ea10:	4401      	add	r1, r0
 800ea12:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800ea16:	fba0 2302 	umull	r2, r3, r0, r2
 800ea1a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800ea1e:	4613      	mov	r3, r2
 800ea20:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800ea24:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800ea28:	18cb      	adds	r3, r1, r3
 800ea2a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800ea2e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800ea3a:	1851      	adds	r1, r2, r1
 800ea3c:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800ea40:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800ea44:	414b      	adcs	r3, r1
 800ea46:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800ea4a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800ea4e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800ea52:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ea56:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	da0a      	bge.n	800ea78 <arm_softmax_s8+0xf30>
 800ea62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea66:	1851      	adds	r1, r2, r1
 800ea68:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800ea6c:	f143 0300 	adc.w	r3, r3, #0
 800ea70:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800ea74:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800ea78:	f04f 0000 	mov.w	r0, #0
 800ea7c:	f04f 0100 	mov.w	r1, #0
 800ea80:	0fd0      	lsrs	r0, r2, #31
 800ea82:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ea86:	17d9      	asrs	r1, r3, #31
 800ea88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea8c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800ea90:	4603      	mov	r3, r0
 800ea92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ea94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	4b80      	ldr	r3, [pc, #512]	; (800eca0 <arm_softmax_s8+0x1158>)
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d10e      	bne.n	800eac2 <arm_softmax_s8+0xf7a>
 800eaa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eaa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eab2:	d106      	bne.n	800eac2 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 800eab4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eab8:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800eabc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eac0:	6013      	str	r3, [r2, #0]
    return result;
 800eac2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eac6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800eaca:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800eacc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ead0:	ea02 0103 	and.w	r1, r2, r3
 800ead4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ead8:	43da      	mvns	r2, r3
 800eada:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800eade:	4013      	ands	r3, r2
 800eae0:	404b      	eors	r3, r1
 800eae2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 800eae6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800eaea:	1c53      	adds	r3, r2, #1
 800eaec:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	fa03 f202 	lsl.w	r2, r3, r2
 800eaf6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800eafa:	4013      	ands	r3, r2
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <arm_softmax_s8+0xfbe>
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	e000      	b.n	800eb08 <arm_softmax_s8+0xfc0>
 800eb06:	2300      	movs	r3, #0
 800eb08:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800eb0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb10:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800eb14:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800eb18:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800eb1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb1e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800eb22:	2300      	movs	r3, #0
 800eb24:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800eb26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eb2a:	f04f 0300 	mov.w	r3, #0
 800eb2e:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800eb32:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800eb36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	0fdb      	lsrs	r3, r3, #31
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	2300      	movs	r3, #0
 800eb46:	4053      	eors	r3, r2
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d012      	beq.n	800eb74 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 800eb4e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	2100      	movs	r1, #0
 800eb58:	f1d2 0001 	rsbs	r0, r2, #1
 800eb5c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800eb60:	eb61 0303 	sbc.w	r3, r1, r3
 800eb64:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800eb68:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800eb6c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800eb70:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800eb74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	17da      	asrs	r2, r3, #31
 800eb80:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800eb84:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 800eb88:	a343      	add	r3, pc, #268	; (adr r3, 800ec98 <arm_softmax_s8+0x1150>)
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 800eb92:	fb02 f001 	mul.w	r0, r2, r1
 800eb96:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800eb9a:	fb01 f103 	mul.w	r1, r1, r3
 800eb9e:	4401      	add	r1, r0
 800eba0:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800eba4:	fba0 2302 	umull	r2, r3, r0, r2
 800eba8:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800ebac:	4613      	mov	r3, r2
 800ebae:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800ebb2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800ebb6:	18cb      	adds	r3, r1, r3
 800ebb8:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800ebbc:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800ebc8:	1851      	adds	r1, r2, r1
 800ebca:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800ebce:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800ebd2:	414b      	adcs	r3, r1
 800ebd4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800ebd8:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800ebdc:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800ebe0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ebe4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	da0a      	bge.n	800ec06 <arm_softmax_s8+0x10be>
 800ebf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebf4:	1851      	adds	r1, r2, r1
 800ebf6:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800ebfa:	f143 0300 	adc.w	r3, r3, #0
 800ebfe:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800ec02:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800ec06:	f04f 0000 	mov.w	r0, #0
 800ec0a:	f04f 0100 	mov.w	r1, #0
 800ec0e:	0fd0      	lsrs	r0, r2, #31
 800ec10:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ec14:	17d9      	asrs	r1, r3, #31
 800ec16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec1a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800ec1e:	4603      	mov	r3, r0
 800ec20:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ec22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	4b1d      	ldr	r3, [pc, #116]	; (800eca4 <arm_softmax_s8+0x115c>)
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d10e      	bne.n	800ec50 <arm_softmax_s8+0x1108>
 800ec32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec40:	d106      	bne.n	800ec50 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 800ec42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec46:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800ec4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ec4e:	6013      	str	r3, [r2, #0]
    return result;
 800ec50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec58:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800ec5a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ec5e:	ea02 0103 	and.w	r1, r2, r3
 800ec62:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ec66:	43da      	mvns	r2, r3
 800ec68:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	404b      	eors	r3, r1
 800ec70:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 800ec74:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800ec78:	1c53      	adds	r3, r2, #1
 800ec7a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800ec7e:	2301      	movs	r3, #1
 800ec80:	fa03 f202 	lsl.w	r2, r3, r2
 800ec84:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800ec88:	4013      	ands	r3, r2
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d010      	beq.n	800ecb0 <arm_softmax_s8+0x1168>
 800ec8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec92:	e00e      	b.n	800ecb2 <arm_softmax_s8+0x116a>
 800ec94:	f3af 8000 	nop.w
 800ec98:	02582ab7 	.word	0x02582ab7
 800ec9c:	00000000 	.word	0x00000000
 800eca0:	1152aaa4 	.word	0x1152aaa4
 800eca4:	02582ab7 	.word	0x02582ab7
 800eca8:	1152aaa4 	.word	0x1152aaa4
 800ecac:	00000000 	.word	0x00000000
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800ecb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecba:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ecbe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ecc2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ecc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecc8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800eccc:	2300      	movs	r3, #0
 800ecce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ecd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ecd4:	f04f 0300 	mov.w	r3, #0
 800ecd8:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 800ecdc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ece0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ece4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	0fdb      	lsrs	r3, r3, #31
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4053      	eors	r3, r2
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d012      	beq.n	800ed1e <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 800ecf8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	2100      	movs	r1, #0
 800ed02:	f1d2 0001 	rsbs	r0, r2, #1
 800ed06:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 800ed0a:	eb61 0303 	sbc.w	r3, r1, r3
 800ed0e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800ed12:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800ed16:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800ed1a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ed1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	17da      	asrs	r2, r3, #31
 800ed2a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800ed2e:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 800ed32:	4ad3      	ldr	r2, [pc, #844]	; (800f080 <arm_softmax_s8+0x1538>)
 800ed34:	f04f 0300 	mov.w	r3, #0
 800ed38:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800ed3c:	fb02 f001 	mul.w	r0, r2, r1
 800ed40:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800ed44:	fb01 f103 	mul.w	r1, r1, r3
 800ed48:	4401      	add	r1, r0
 800ed4a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800ed4e:	fba0 2302 	umull	r2, r3, r0, r2
 800ed52:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800ed56:	4613      	mov	r3, r2
 800ed58:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800ed5c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800ed60:	18cb      	adds	r3, r1, r3
 800ed62:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800ed66:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800ed72:	1851      	adds	r1, r2, r1
 800ed74:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800ed78:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800ed7c:	414b      	adcs	r3, r1
 800ed7e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800ed82:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800ed86:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800ed8a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ed8e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	da0a      	bge.n	800edb0 <arm_softmax_s8+0x1268>
 800ed9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed9e:	1851      	adds	r1, r2, r1
 800eda0:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800eda4:	f143 0300 	adc.w	r3, r3, #0
 800eda8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800edac:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800edb0:	f04f 0000 	mov.w	r0, #0
 800edb4:	f04f 0100 	mov.w	r1, #0
 800edb8:	0fd0      	lsrs	r0, r2, #31
 800edba:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800edbe:	17d9      	asrs	r1, r3, #31
 800edc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800edc4:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800edc8:	4603      	mov	r3, r0
 800edca:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800edcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800edd0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	4baa      	ldr	r3, [pc, #680]	; (800f080 <arm_softmax_s8+0x1538>)
 800edd8:	429a      	cmp	r2, r3
 800edda:	d10e      	bne.n	800edfa <arm_softmax_s8+0x12b2>
 800eddc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ede0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800edea:	d106      	bne.n	800edfa <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 800edec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800edf0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800edf4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800edf8:	6013      	str	r3, [r2, #0]
    return result;
 800edfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800edfe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ee02:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800ee04:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ee08:	ea02 0103 	and.w	r1, r2, r3
 800ee0c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ee10:	43da      	mvns	r2, r3
 800ee12:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ee16:	4013      	ands	r3, r2
 800ee18:	404b      	eors	r3, r1
 800ee1a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 800ee1e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800ee22:	1c53      	adds	r3, r2, #1
 800ee24:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800ee28:	2301      	movs	r3, #1
 800ee2a:	fa03 f202 	lsl.w	r2, r3, r2
 800ee2e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800ee32:	4013      	ands	r3, r2
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d002      	beq.n	800ee3e <arm_softmax_s8+0x12f6>
 800ee38:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3c:	e000      	b.n	800ee40 <arm_softmax_s8+0x12f8>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800ee44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee48:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800ee4c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ee50:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ee52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee56:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ee5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ee62:	f04f 0300 	mov.w	r3, #0
 800ee66:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800ee6a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ee6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee72:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	0fdb      	lsrs	r3, r3, #31
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4053      	eors	r3, r2
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d012      	beq.n	800eeac <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 800ee86:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ee8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8e:	2100      	movs	r1, #0
 800ee90:	f1d2 0001 	rsbs	r0, r2, #1
 800ee94:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 800ee98:	eb61 0303 	sbc.w	r3, r1, r3
 800ee9c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800eea0:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800eea4:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800eea8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800eeac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eeb0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	17da      	asrs	r2, r3, #31
 800eeb8:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800eebc:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 800eec0:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800eec4:	f04f 0300 	mov.w	r3, #0
 800eec8:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 800eecc:	fb02 f001 	mul.w	r0, r2, r1
 800eed0:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 800eed4:	fb01 f103 	mul.w	r1, r1, r3
 800eed8:	4401      	add	r1, r0
 800eeda:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800eede:	fba0 2302 	umull	r2, r3, r0, r2
 800eee2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800eee6:	4613      	mov	r3, r2
 800eee8:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800eeec:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800eef0:	18cb      	adds	r3, r1, r3
 800eef2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800eef6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800ef02:	1851      	adds	r1, r2, r1
 800ef04:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800ef08:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800ef0c:	414b      	adcs	r3, r1
 800ef0e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800ef12:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800ef16:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ef1a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ef1e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ef22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da0a      	bge.n	800ef40 <arm_softmax_s8+0x13f8>
 800ef2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef2e:	1851      	adds	r1, r2, r1
 800ef30:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 800ef34:	f143 0300 	adc.w	r3, r3, #0
 800ef38:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800ef3c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800ef40:	f04f 0000 	mov.w	r0, #0
 800ef44:	f04f 0100 	mov.w	r1, #0
 800ef48:	0fd0      	lsrs	r0, r2, #31
 800ef4a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ef4e:	17d9      	asrs	r1, r3, #31
 800ef50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef54:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800ef58:	4603      	mov	r3, r0
 800ef5a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ef5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef60:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2bf2      	cmp	r3, #242	; 0xf2
 800ef68:	d10e      	bne.n	800ef88 <arm_softmax_s8+0x1440>
 800ef6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef78:	d106      	bne.n	800ef88 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 800ef7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef7e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800ef82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef86:	6013      	str	r3, [r2, #0]
    return result;
 800ef88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ef90:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 800ef92:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ef96:	ea02 0103 	and.w	r1, r2, r3
 800ef9a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800ef9e:	43da      	mvns	r2, r3
 800efa0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800efa4:	4013      	ands	r3, r2
 800efa6:	404b      	eors	r3, r1
 800efa8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 800efac:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d102      	bne.n	800efba <arm_softmax_s8+0x1472>
 800efb4:	f04f 33ff 	mov.w	r3, #4294967295
 800efb8:	e000      	b.n	800efbc <arm_softmax_s8+0x1474>
 800efba:	2300      	movs	r3, #0
 800efbc:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 800efc0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800efc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800efc8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800efcc:	43da      	mvns	r2, r3
 800efce:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800efd2:	4013      	ands	r3, r2
 800efd4:	404b      	eors	r3, r1
 800efd6:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 800efe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efe4:	3b01      	subs	r3, #1
 800efe6:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 800efea:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 800efee:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800eff2:	4013      	ands	r3, r2
 800eff4:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 800eff8:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 800effc:	131b      	asrs	r3, r3, #12
 800effe:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 800f002:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800f006:	105b      	asrs	r3, r3, #1
 800f008:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 800f00c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800f010:	2b00      	cmp	r3, #0
 800f012:	da04      	bge.n	800f01e <arm_softmax_s8+0x14d6>
        threshold++;
 800f014:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f018:	3301      	adds	r3, #1
 800f01a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 800f01e:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 800f022:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f026:	429a      	cmp	r2, r3
 800f028:	dd04      	ble.n	800f034 <arm_softmax_s8+0x14ec>
        result++;
 800f02a:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800f02e:	3301      	adds	r3, #1
 800f030:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 800f034:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 800f038:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f03c:	4413      	add	r3, r2
 800f03e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 800f042:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800f046:	3301      	adds	r3, #1
 800f048:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800f04c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f050:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800f054:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	f6fe add2 	blt.w	800dc04 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 800f060:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 800f064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f068:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f06c:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 800f06e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f072:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d103      	bne.n	800f084 <arm_softmax_s8+0x153c>
    return 32U;
 800f07c:	2320      	movs	r3, #32
 800f07e:	e009      	b.n	800f094 <arm_softmax_s8+0x154c>
 800f080:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 800f084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f088:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	fab3 f383 	clz	r3, r3
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 800f098:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 800f09c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 800f0a0:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 800f0a4:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 800f0a8:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 800f0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b0:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800f0b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800f0bc:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 800f0be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0c2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	17da      	asrs	r2, r3, #31
 800f0ca:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800f0ce:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800f0d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f0d6:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 800f0da:	4602      	mov	r2, r0
 800f0dc:	18d3      	adds	r3, r2, r3
 800f0de:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	f143 0300 	adc.w	r3, r3, #0
 800f0e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800f0ec:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800f0f0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800f0f4:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 800f0f8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	2b00      	cmp	r3, #0
 800f102:	db04      	blt.n	800f10e <arm_softmax_s8+0x15c6>
 800f104:	f04f 0001 	mov.w	r0, #1
 800f108:	f04f 0100 	mov.w	r1, #0
 800f10c:	e003      	b.n	800f116 <arm_softmax_s8+0x15ce>
 800f10e:	f04f 30ff 	mov.w	r0, #4294967295
 800f112:	f04f 31ff 	mov.w	r1, #4294967295
 800f116:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	1884      	adds	r4, r0, r2
 800f120:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800f124:	eb41 0303 	adc.w	r3, r1, r3
 800f128:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800f12c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800f130:	460b      	mov	r3, r1
 800f132:	0fdb      	lsrs	r3, r3, #31
 800f134:	2200      	movs	r2, #0
 800f136:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800f13a:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 800f13e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800f142:	4602      	mov	r2, r0
 800f144:	189b      	adds	r3, r3, r2
 800f146:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800f14a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800f14e:	460a      	mov	r2, r1
 800f150:	4153      	adcs	r3, r2
 800f152:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f156:	f04f 0200 	mov.w	r2, #0
 800f15a:	f04f 0300 	mov.w	r3, #0
 800f15e:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 800f162:	084a      	lsrs	r2, r1, #1
 800f164:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 800f168:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800f16c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 800f170:	104b      	asrs	r3, r1, #1
 800f172:	4610      	mov	r0, r2
 800f174:	4619      	mov	r1, r3
 800f176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f17a:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 800f17e:	4603      	mov	r3, r0
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f186:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800f18a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f18e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f196:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f19a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800f19e:	2300      	movs	r3, #0
 800f1a0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f1a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f1a6:	f04f 0300 	mov.w	r3, #0
 800f1aa:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 800f1ae:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f1b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	0fdb      	lsrs	r3, r3, #31
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	4053      	eors	r3, r2
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d012      	beq.n	800f1f0 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 800f1ca:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	f1d2 0001 	rsbs	r0, r2, #1
 800f1d8:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 800f1dc:	eb61 0303 	sbc.w	r3, r1, r3
 800f1e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800f1e4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800f1e8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800f1ec:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f1f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	17da      	asrs	r2, r3, #31
 800f1fc:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800f200:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 800f204:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 800f210:	fb02 f001 	mul.w	r0, r2, r1
 800f214:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800f218:	fb01 f103 	mul.w	r1, r1, r3
 800f21c:	4401      	add	r1, r0
 800f21e:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800f222:	fba0 2302 	umull	r2, r3, r0, r2
 800f226:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800f22a:	4613      	mov	r3, r2
 800f22c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 800f230:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800f234:	18cb      	adds	r3, r1, r3
 800f236:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800f23a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800f23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f242:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800f246:	1851      	adds	r1, r2, r1
 800f248:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800f24c:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800f250:	414b      	adcs	r3, r1
 800f252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800f256:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800f25a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800f25e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f262:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	da0a      	bge.n	800f284 <arm_softmax_s8+0x173c>
 800f26e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f272:	1851      	adds	r1, r2, r1
 800f274:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800f278:	f143 0300 	adc.w	r3, r3, #0
 800f27c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800f280:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800f284:	f04f 0000 	mov.w	r0, #0
 800f288:	f04f 0100 	mov.w	r1, #0
 800f28c:	0fd0      	lsrs	r0, r2, #31
 800f28e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f292:	17d9      	asrs	r1, r3, #31
 800f294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f298:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800f29c:	4603      	mov	r3, r0
 800f29e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f2a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 800f2ae:	d10e      	bne.n	800f2ce <arm_softmax_s8+0x1786>
 800f2b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2be:	d106      	bne.n	800f2ce <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 800f2c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2c4:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800f2c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f2cc:	6013      	str	r3, [r2, #0]
    return result;
 800f2ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800f2d6:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 800f2d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2dc:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800f2e0:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 800f2e4:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 800f2e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2ea:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 800f2ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f2f2:	6013      	str	r3, [r2, #0]
 800f2f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2f8:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800f2fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f300:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f30c:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 800f310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f314:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f31c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f320:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800f324:	2300      	movs	r3, #0
 800f326:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f32c:	f04f 0300 	mov.w	r3, #0
 800f330:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 800f334:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f33c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	0fdb      	lsrs	r3, r3, #31
 800f344:	b2da      	uxtb	r2, r3
 800f346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f34a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	0fdb      	lsrs	r3, r3, #31
 800f352:	b2db      	uxtb	r3, r3
 800f354:	4053      	eors	r3, r2
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d012      	beq.n	800f382 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 800f35c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	2100      	movs	r1, #0
 800f366:	f1d2 0001 	rsbs	r0, r2, #1
 800f36a:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 800f36e:	eb61 0303 	sbc.w	r3, r1, r3
 800f372:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800f376:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800f37a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800f37e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f382:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f386:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	17da      	asrs	r2, r3, #31
 800f38e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800f392:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 800f396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f39a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	17da      	asrs	r2, r3, #31
 800f3a2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800f3a6:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 800f3aa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800f3ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800f3b8:	fb02 f203 	mul.w	r2, r2, r3
 800f3bc:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800f3c0:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 800f3c4:	e9c4 0100 	strd	r0, r1, [r4]
 800f3c8:	4601      	mov	r1, r0
 800f3ca:	fb01 f303 	mul.w	r3, r1, r3
 800f3ce:	4413      	add	r3, r2
 800f3d0:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800f3d4:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 800f3d8:	fba2 1201 	umull	r1, r2, r2, r1
 800f3dc:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 800f3e0:	460a      	mov	r2, r1
 800f3e2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800f3e6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800f3f0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800f3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800f3fc:	1851      	adds	r1, r2, r1
 800f3fe:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 800f402:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800f406:	414b      	adcs	r3, r1
 800f408:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800f40c:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800f410:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800f414:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f418:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	2b00      	cmp	r3, #0
 800f422:	da0a      	bge.n	800f43a <arm_softmax_s8+0x18f2>
 800f424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f428:	1851      	adds	r1, r2, r1
 800f42a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800f42e:	f143 0300 	adc.w	r3, r3, #0
 800f432:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800f436:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800f43a:	f04f 0000 	mov.w	r0, #0
 800f43e:	f04f 0100 	mov.w	r1, #0
 800f442:	0fd0      	lsrs	r0, r2, #31
 800f444:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f448:	17d9      	asrs	r1, r3, #31
 800f44a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f44e:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800f452:	4603      	mov	r3, r0
 800f454:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f456:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f45a:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800f45e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f462:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800f466:	6812      	ldr	r2, [r2, #0]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d10e      	bne.n	800f48c <arm_softmax_s8+0x1944>
 800f46e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f472:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f47c:	d106      	bne.n	800f48c <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 800f47e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f482:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800f486:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f48a:	6013      	str	r3, [r2, #0]
    return result;
 800f48c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f490:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800f494:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f496:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f49a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	1a99      	subs	r1, r3, r2
 800f4a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4a6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800f4aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	6013      	str	r3, [r2, #0]
 800f4b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f4be:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800f4c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4c4:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f4cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f4d0:	f04f 0300 	mov.w	r3, #0
 800f4d4:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 800f4d8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f4dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	0fdb      	lsrs	r3, r3, #31
 800f4e8:	b2da      	uxtb	r2, r3
 800f4ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	0fdb      	lsrs	r3, r3, #31
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	4053      	eors	r3, r2
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d012      	beq.n	800f526 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 800f500:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	2100      	movs	r1, #0
 800f50a:	f1d2 0001 	rsbs	r0, r2, #1
 800f50e:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 800f512:	eb61 0303 	sbc.w	r3, r1, r3
 800f516:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800f51a:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800f51e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800f522:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f526:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f52a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	17da      	asrs	r2, r3, #31
 800f532:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800f536:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 800f53a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f53e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	17da      	asrs	r2, r3, #31
 800f546:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800f54a:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 800f54e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800f552:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f556:	460b      	mov	r3, r1
 800f558:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800f55c:	fb02 f203 	mul.w	r2, r2, r3
 800f560:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800f564:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 800f568:	e9c4 0100 	strd	r0, r1, [r4]
 800f56c:	4601      	mov	r1, r0
 800f56e:	fb01 f303 	mul.w	r3, r1, r3
 800f572:	4413      	add	r3, r2
 800f574:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 800f578:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 800f57c:	fba2 1201 	umull	r1, r2, r2, r1
 800f580:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 800f584:	460a      	mov	r2, r1
 800f586:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 800f58a:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800f58e:	4413      	add	r3, r2
 800f590:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800f594:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800f598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 800f5a0:	1851      	adds	r1, r2, r1
 800f5a2:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 800f5a6:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800f5aa:	414b      	adcs	r3, r1
 800f5ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800f5b0:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800f5b4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800f5b8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f5bc:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	da0a      	bge.n	800f5de <arm_softmax_s8+0x1a96>
 800f5c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f5cc:	1851      	adds	r1, r2, r1
 800f5ce:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 800f5d2:	f143 0300 	adc.w	r3, r3, #0
 800f5d6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800f5da:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800f5de:	f04f 0000 	mov.w	r0, #0
 800f5e2:	f04f 0100 	mov.w	r1, #0
 800f5e6:	0fd0      	lsrs	r0, r2, #31
 800f5e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f5ec:	17d9      	asrs	r1, r3, #31
 800f5ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5f2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f5fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5fe:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800f602:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f606:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800f60a:	6812      	ldr	r2, [r2, #0]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d10e      	bne.n	800f630 <arm_softmax_s8+0x1ae8>
 800f612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f616:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f620:	d106      	bne.n	800f630 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 800f622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f626:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800f62a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f62e:	6013      	str	r3, [r2, #0]
    return result;
 800f630:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f634:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f63e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f642:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800f644:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f648:	4619      	mov	r1, r3
 800f64a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f64e:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 800f652:	1e4b      	subs	r3, r1, #1
 800f654:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800f656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f65a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800f65e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f662:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800f66c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f670:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800f674:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f678:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f67c:	6812      	ldr	r2, [r2, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	dd02      	ble.n	800f68a <arm_softmax_s8+0x1b42>
 800f684:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f688:	e000      	b.n	800f68c <arm_softmax_s8+0x1b44>
 800f68a:	2000      	movs	r0, #0
 800f68c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f690:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800f694:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f698:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f69c:	6812      	ldr	r2, [r2, #0]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	dd01      	ble.n	800f6a8 <arm_softmax_s8+0x1b60>
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	e001      	b.n	800f6ac <arm_softmax_s8+0x1b64>
 800f6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	ea02 0103 	and.w	r1, r2, r3
 800f6ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6be:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800f6c2:	ea81 0300 	eor.w	r3, r1, r0
 800f6c6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800f6c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	425a      	negs	r2, r3
 800f6d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	da02      	bge.n	800f6e8 <arm_softmax_s8+0x1ba0>
 800f6e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f6e6:	e000      	b.n	800f6ea <arm_softmax_s8+0x1ba2>
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6ee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	425a      	negs	r2, r3
 800f6f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4293      	cmp	r3, r2
 800f702:	da01      	bge.n	800f708 <arm_softmax_s8+0x1bc0>
 800f704:	2200      	movs	r2, #0
 800f706:	e001      	b.n	800f70c <arm_softmax_s8+0x1bc4>
 800f708:	f04f 32ff 	mov.w	r2, #4294967295
 800f70c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f710:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	ea02 0103 	and.w	r1, r2, r3
 800f71a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f71e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800f722:	ea81 0300 	eor.w	r3, r1, r0
 800f726:	6013      	str	r3, [r2, #0]
    return result;
 800f728:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f72c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f730:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f736:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800f73a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f73e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	440b      	add	r3, r1
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f74c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800f750:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f754:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f760:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 800f764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f768:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f770:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f774:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f778:	2300      	movs	r3, #0
 800f77a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f77c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f780:	f04f 0300 	mov.w	r3, #0
 800f784:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 800f788:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f78c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f790:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	0fdb      	lsrs	r3, r3, #31
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f79e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	0fdb      	lsrs	r3, r3, #31
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	4053      	eors	r3, r2
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d012      	beq.n	800f7d6 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 800f7b0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800f7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	f1d2 0001 	rsbs	r0, r2, #1
 800f7be:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 800f7c2:	eb61 0303 	sbc.w	r3, r1, r3
 800f7c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800f7ca:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800f7ce:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800f7d2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f7d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	17da      	asrs	r2, r3, #31
 800f7e2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800f7e6:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 800f7ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	17da      	asrs	r2, r3, #31
 800f7f6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800f7fa:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 800f7fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f802:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f806:	460b      	mov	r3, r1
 800f808:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800f80c:	fb02 f203 	mul.w	r2, r2, r3
 800f810:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800f814:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 800f818:	e9c4 0100 	strd	r0, r1, [r4]
 800f81c:	4601      	mov	r1, r0
 800f81e:	fb01 f303 	mul.w	r3, r1, r3
 800f822:	4413      	add	r3, r2
 800f824:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800f828:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 800f82c:	fba2 1201 	umull	r1, r2, r2, r1
 800f830:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 800f834:	460a      	mov	r2, r1
 800f836:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 800f83a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800f83e:	4413      	add	r3, r2
 800f840:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800f844:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800f848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84c:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800f850:	1851      	adds	r1, r2, r1
 800f852:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 800f856:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 800f85a:	414b      	adcs	r3, r1
 800f85c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800f860:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800f864:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800f868:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f86c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	2b00      	cmp	r3, #0
 800f876:	da0a      	bge.n	800f88e <arm_softmax_s8+0x1d46>
 800f878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f87c:	1851      	adds	r1, r2, r1
 800f87e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800f882:	f143 0300 	adc.w	r3, r3, #0
 800f886:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800f88a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800f88e:	f04f 0000 	mov.w	r0, #0
 800f892:	f04f 0100 	mov.w	r1, #0
 800f896:	0fd0      	lsrs	r0, r2, #31
 800f898:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f89c:	17d9      	asrs	r1, r3, #31
 800f89e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8a2:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f8aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8ae:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800f8b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8b6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f8ba:	6812      	ldr	r2, [r2, #0]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d10e      	bne.n	800f8e0 <arm_softmax_s8+0x1d98>
 800f8c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8d0:	d106      	bne.n	800f8e0 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 800f8d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8d6:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f8da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f8de:	6013      	str	r3, [r2, #0]
    return result;
 800f8e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800f8e8:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f8ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8ee:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	1a99      	subs	r1, r3, r2
 800f8f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8fa:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800f8fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f902:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6013      	str	r3, [r2, #0]
 800f90a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f90e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f912:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800f914:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f918:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800f91c:	2300      	movs	r3, #0
 800f91e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f924:	f04f 0300 	mov.w	r3, #0
 800f928:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 800f92c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f930:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f934:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	0fdb      	lsrs	r3, r3, #31
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f942:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	0fdb      	lsrs	r3, r3, #31
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	4053      	eors	r3, r2
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b00      	cmp	r3, #0
 800f952:	d012      	beq.n	800f97a <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 800f954:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	2100      	movs	r1, #0
 800f95e:	f1d2 0001 	rsbs	r0, r2, #1
 800f962:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800f966:	eb61 0303 	sbc.w	r3, r1, r3
 800f96a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800f96e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800f972:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800f976:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f97a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f97e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	17da      	asrs	r2, r3, #31
 800f986:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 800f98a:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 800f98e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f992:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	17da      	asrs	r2, r3, #31
 800f99a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800f99e:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 800f9a2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f9a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800f9b0:	fb02 f203 	mul.w	r2, r2, r3
 800f9b4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800f9b8:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 800f9bc:	e9c4 0100 	strd	r0, r1, [r4]
 800f9c0:	4601      	mov	r1, r0
 800f9c2:	fb01 f303 	mul.w	r3, r1, r3
 800f9c6:	4413      	add	r3, r2
 800f9c8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800f9cc:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 800f9d0:	fba2 1201 	umull	r1, r2, r2, r1
 800f9d4:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 800f9d8:	460a      	mov	r2, r1
 800f9da:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 800f9de:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 800f9e2:	4413      	add	r3, r2
 800f9e4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800f9e8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800f9f4:	1851      	adds	r1, r2, r1
 800f9f6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 800f9fa:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 800f9fe:	414b      	adcs	r3, r1
 800fa00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800fa04:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800fa08:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800fa0c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fa10:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800fa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	da0a      	bge.n	800fa32 <arm_softmax_s8+0x1eea>
 800fa1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa20:	1851      	adds	r1, r2, r1
 800fa22:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 800fa26:	f143 0300 	adc.w	r3, r3, #0
 800fa2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800fa2e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800fa32:	f04f 0000 	mov.w	r0, #0
 800fa36:	f04f 0100 	mov.w	r1, #0
 800fa3a:	0fd0      	lsrs	r0, r2, #31
 800fa3c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fa40:	17d9      	asrs	r1, r3, #31
 800fa42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa46:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fa4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa52:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800fa56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa5a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800fa5e:	6812      	ldr	r2, [r2, #0]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d10e      	bne.n	800fa84 <arm_softmax_s8+0x1f3c>
 800fa66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa6a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa74:	d106      	bne.n	800fa84 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 800fa76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa7a:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800fa7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fa82:	6013      	str	r3, [r2, #0]
    return result;
 800fa84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa92:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800fa96:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800fa98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faa2:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800faa6:	1e4b      	subs	r3, r1, #1
 800faa8:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800faaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faae:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800fab2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fab6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800fac0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fac4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800fac8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800facc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800fad0:	6812      	ldr	r2, [r2, #0]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	dd02      	ble.n	800fade <arm_softmax_s8+0x1f96>
 800fad8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800fadc:	e000      	b.n	800fae0 <arm_softmax_s8+0x1f98>
 800fade:	2000      	movs	r0, #0
 800fae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fae4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800fae8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faec:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800faf0:	6812      	ldr	r2, [r2, #0]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	dd01      	ble.n	800fafc <arm_softmax_s8+0x1fb4>
 800faf8:	2200      	movs	r2, #0
 800fafa:	e001      	b.n	800fb00 <arm_softmax_s8+0x1fb8>
 800fafc:	f04f 32ff 	mov.w	r2, #4294967295
 800fb00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb04:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	ea02 0103 	and.w	r1, r2, r3
 800fb0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb12:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800fb16:	ea81 0300 	eor.w	r3, r1, r0
 800fb1a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800fb1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb20:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	425a      	negs	r2, r3
 800fb28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb2c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4293      	cmp	r3, r2
 800fb34:	da02      	bge.n	800fb3c <arm_softmax_s8+0x1ff4>
 800fb36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fb3a:	e000      	b.n	800fb3e <arm_softmax_s8+0x1ff6>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb42:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	425a      	negs	r2, r3
 800fb4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb4e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4293      	cmp	r3, r2
 800fb56:	da01      	bge.n	800fb5c <arm_softmax_s8+0x2014>
 800fb58:	2200      	movs	r2, #0
 800fb5a:	e001      	b.n	800fb60 <arm_softmax_s8+0x2018>
 800fb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb64:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	ea02 0103 	and.w	r1, r2, r3
 800fb6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb72:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800fb76:	ea81 0300 	eor.w	r3, r1, r0
 800fb7a:	6013      	str	r3, [r2, #0]
    return result;
 800fb7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb80:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800fb84:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800fb86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb8a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800fb8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb92:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	440b      	add	r3, r1
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fba0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800fba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fba8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbb4:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800fbb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbbc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fbc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbc8:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800fbcc:	2300      	movs	r3, #0
 800fbce:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fbd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fbd4:	f04f 0300 	mov.w	r3, #0
 800fbd8:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 800fbdc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fbe0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbe4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	0fdb      	lsrs	r3, r3, #31
 800fbec:	b2da      	uxtb	r2, r3
 800fbee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbf2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	0fdb      	lsrs	r3, r3, #31
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	4053      	eors	r3, r2
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d012      	beq.n	800fc2a <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 800fc04:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800fc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	f1d2 0001 	rsbs	r0, r2, #1
 800fc12:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 800fc16:	eb61 0303 	sbc.w	r3, r1, r3
 800fc1a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800fc1e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800fc22:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800fc26:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fc2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc2e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	17da      	asrs	r2, r3, #31
 800fc36:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800fc3a:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 800fc3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc42:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	17da      	asrs	r2, r3, #31
 800fc4a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800fc4e:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 800fc52:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800fc56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 800fc60:	fb02 f203 	mul.w	r2, r2, r3
 800fc64:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800fc68:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 800fc6c:	e9c4 0100 	strd	r0, r1, [r4]
 800fc70:	4601      	mov	r1, r0
 800fc72:	fb01 f303 	mul.w	r3, r1, r3
 800fc76:	4413      	add	r3, r2
 800fc78:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800fc7c:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800fc80:	fba2 1201 	umull	r1, r2, r2, r1
 800fc84:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800fc88:	460a      	mov	r2, r1
 800fc8a:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 800fc8e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800fc92:	4413      	add	r3, r2
 800fc94:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800fc98:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 800fca4:	1851      	adds	r1, r2, r1
 800fca6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800fcaa:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 800fcae:	414b      	adcs	r3, r1
 800fcb0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800fcb4:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800fcb8:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800fcbc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fcc0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	da0a      	bge.n	800fce2 <arm_softmax_s8+0x219a>
 800fccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fcd0:	1851      	adds	r1, r2, r1
 800fcd2:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800fcd6:	f143 0300 	adc.w	r3, r3, #0
 800fcda:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800fcde:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800fce2:	f04f 0000 	mov.w	r0, #0
 800fce6:	f04f 0100 	mov.w	r1, #0
 800fcea:	0fd0      	lsrs	r0, r2, #31
 800fcec:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fcf0:	17d9      	asrs	r1, r3, #31
 800fcf2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcf6:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fcfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd02:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800fd06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd0a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fd0e:	6812      	ldr	r2, [r2, #0]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d10e      	bne.n	800fd34 <arm_softmax_s8+0x21ec>
 800fd16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd1a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd24:	d106      	bne.n	800fd34 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 800fd26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd2a:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800fd2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd32:	6013      	str	r3, [r2, #0]
    return result;
 800fd34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd38:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800fd3c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800fd3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd42:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	1a99      	subs	r1, r3, r2
 800fd4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd4e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800fd52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd56:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6013      	str	r3, [r2, #0]
 800fd5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd62:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd66:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800fd68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd6c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800fd70:	2300      	movs	r3, #0
 800fd72:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fd74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fd78:	f04f 0300 	mov.w	r3, #0
 800fd7c:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800fd80:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fd84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd88:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	0fdb      	lsrs	r3, r3, #31
 800fd90:	b2da      	uxtb	r2, r3
 800fd92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd96:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	0fdb      	lsrs	r3, r3, #31
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	4053      	eors	r3, r2
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d012      	beq.n	800fdce <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 800fda8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	f1d2 0001 	rsbs	r0, r2, #1
 800fdb6:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 800fdba:	eb61 0303 	sbc.w	r3, r1, r3
 800fdbe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800fdc2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800fdc6:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 800fdca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fdce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdd2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	17da      	asrs	r2, r3, #31
 800fdda:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 800fdde:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 800fde2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fde6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	17da      	asrs	r2, r3, #31
 800fdee:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800fdf2:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 800fdf6:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 800fe00:	fb02 f203 	mul.w	r2, r2, r3
 800fe04:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800fe08:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 800fe0c:	4601      	mov	r1, r0
 800fe0e:	fb01 f303 	mul.w	r3, r1, r3
 800fe12:	4413      	add	r3, r2
 800fe14:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800fe18:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 800fe1c:	fba2 1201 	umull	r1, r2, r2, r1
 800fe20:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 800fe24:	460a      	mov	r2, r1
 800fe26:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 800fe2a:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 800fe2e:	4413      	add	r3, r2
 800fe30:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800fe34:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3c:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 800fe40:	1851      	adds	r1, r2, r1
 800fe42:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 800fe46:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 800fe4a:	414b      	adcs	r3, r1
 800fe4c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800fe50:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800fe54:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 800fe58:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fe5c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800fe60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	da0a      	bge.n	800fe7e <arm_softmax_s8+0x2336>
 800fe68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe6c:	1851      	adds	r1, r2, r1
 800fe6e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800fe72:	f143 0300 	adc.w	r3, r3, #0
 800fe76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800fe7a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800fe7e:	f04f 0000 	mov.w	r0, #0
 800fe82:	f04f 0100 	mov.w	r1, #0
 800fe86:	0fd0      	lsrs	r0, r2, #31
 800fe88:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fe8c:	17d9      	asrs	r1, r3, #31
 800fe8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe92:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800fe96:	4603      	mov	r3, r0
 800fe98:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fe9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe9e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800fea2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fea6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800feaa:	6812      	ldr	r2, [r2, #0]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d10e      	bne.n	800fed0 <arm_softmax_s8+0x2388>
 800feb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feb6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fec0:	d106      	bne.n	800fed0 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 800fec2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fec6:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800feca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fece:	6013      	str	r3, [r2, #0]
    return result;
 800fed0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fed4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fede:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fee2:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800fee4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800fee8:	4619      	mov	r1, r3
 800feea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feee:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800fef2:	1e4b      	subs	r3, r1, #1
 800fef4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800fef6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fefa:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800fefe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff02:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800ff0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff10:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800ff14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff18:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ff1c:	6812      	ldr	r2, [r2, #0]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	dd02      	ble.n	800ff2a <arm_softmax_s8+0x23e2>
 800ff24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ff28:	e000      	b.n	800ff2c <arm_softmax_s8+0x23e4>
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff30:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800ff34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff38:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ff3c:	6812      	ldr	r2, [r2, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	dd01      	ble.n	800ff48 <arm_softmax_s8+0x2400>
 800ff44:	2200      	movs	r2, #0
 800ff46:	e001      	b.n	800ff4c <arm_softmax_s8+0x2404>
 800ff48:	f04f 32ff 	mov.w	r2, #4294967295
 800ff4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	ea02 0103 	and.w	r1, r2, r3
 800ff5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff5e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800ff62:	ea81 0300 	eor.w	r3, r1, r0
 800ff66:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800ff68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff6c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	425a      	negs	r2, r3
 800ff74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff78:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	da02      	bge.n	800ff88 <arm_softmax_s8+0x2440>
 800ff82:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ff86:	e000      	b.n	800ff8a <arm_softmax_s8+0x2442>
 800ff88:	2000      	movs	r0, #0
 800ff8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff8e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	425a      	negs	r2, r3
 800ff96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff9a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	da05      	bge.n	800ffb0 <arm_softmax_s8+0x2468>
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	e005      	b.n	800ffb4 <arm_softmax_s8+0x246c>
 800ffa8:	c3c3c3c4 	.word	0xc3c3c3c4
 800ffac:	ffffffff 	.word	0xffffffff
 800ffb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	ea02 0103 	and.w	r1, r2, r3
 800ffc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffc6:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800ffca:	ea81 0300 	eor.w	r3, r1, r0
 800ffce:	6013      	str	r3, [r2, #0]
    return result;
 800ffd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800ffd8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800ffda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffde:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ffe2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ffe6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	440b      	add	r3, r1
 800ffee:	6013      	str	r3, [r2, #0]
 800fff0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fff4:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800fff8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fffc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010008:	4619      	mov	r1, r3
 801000a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801000e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8010012:	1e4b      	subs	r3, r1, #1
 8010014:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010016:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801001a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801001e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010022:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801002c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010030:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8010034:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010038:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801003c:	6812      	ldr	r2, [r2, #0]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	dd02      	ble.n	801004a <arm_softmax_s8+0x2502>
 8010044:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010048:	e000      	b.n	801004c <arm_softmax_s8+0x2504>
 801004a:	2000      	movs	r0, #0
 801004c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010050:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8010054:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010058:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801005c:	6812      	ldr	r2, [r2, #0]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	429a      	cmp	r2, r3
 8010062:	dd01      	ble.n	8010068 <arm_softmax_s8+0x2520>
 8010064:	2200      	movs	r2, #0
 8010066:	e001      	b.n	801006c <arm_softmax_s8+0x2524>
 8010068:	f04f 32ff 	mov.w	r2, #4294967295
 801006c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010070:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	ea02 0103 	and.w	r1, r2, r3
 801007a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801007e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8010082:	ea81 0300 	eor.w	r3, r1, r0
 8010086:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010088:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801008c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	425a      	negs	r2, r3
 8010094:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010098:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4293      	cmp	r3, r2
 80100a0:	da02      	bge.n	80100a8 <arm_softmax_s8+0x2560>
 80100a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80100a6:	e000      	b.n	80100aa <arm_softmax_s8+0x2562>
 80100a8:	2000      	movs	r0, #0
 80100aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ae:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	425a      	negs	r2, r3
 80100b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ba:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4293      	cmp	r3, r2
 80100c2:	da01      	bge.n	80100c8 <arm_softmax_s8+0x2580>
 80100c4:	2200      	movs	r2, #0
 80100c6:	e001      	b.n	80100cc <arm_softmax_s8+0x2584>
 80100c8:	f04f 32ff 	mov.w	r2, #4294967295
 80100cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	ea02 0103 	and.w	r1, r2, r3
 80100da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100de:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80100e2:	ea81 0300 	eor.w	r3, r1, r0
 80100e6:	6013      	str	r3, [r2, #0]
    return result;
 80100e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80100f0:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 80100f2:	bf00      	nop
 80100f4:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 80100f8:	2300      	movs	r3, #0
 80100fa:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80100fe:	f001 bd85 	b.w	8011c0c <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 8010102:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8010106:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801010a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4413      	add	r3, r2
 8010112:	f993 3000 	ldrsb.w	r3, [r3]
 8010116:	461a      	mov	r2, r3
 8010118:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8010122:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8010126:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 801012a:	429a      	cmp	r2, r3
 801012c:	f2c1 8562 	blt.w	8011bf4 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8010130:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8010134:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8010138:	fb03 f202 	mul.w	r2, r3, r2
 801013c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010140:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8010144:	601a      	str	r2, [r3, #0]
 8010146:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801014a:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801014e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010152:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801015a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801015e:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8010162:	2300      	movs	r3, #0
 8010164:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801016a:	f04f 0300 	mov.w	r3, #0
 801016e:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8010172:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801017a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	0fdb      	lsrs	r3, r3, #31
 8010182:	b2da      	uxtb	r2, r3
 8010184:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010188:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	0fdb      	lsrs	r3, r3, #31
 8010190:	b2db      	uxtb	r3, r3
 8010192:	4053      	eors	r3, r2
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	d012      	beq.n	80101c0 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 801019a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801019e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a2:	2100      	movs	r1, #0
 80101a4:	f1d2 0001 	rsbs	r0, r2, #1
 80101a8:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 80101ac:	eb61 0303 	sbc.w	r3, r1, r3
 80101b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80101b4:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80101b8:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80101bc:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80101c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101c4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	17da      	asrs	r2, r3, #31
 80101cc:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80101d0:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 80101d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101d8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	17da      	asrs	r2, r3, #31
 80101e0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80101e4:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80101e8:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80101ec:	460b      	mov	r3, r1
 80101ee:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80101f2:	fb02 f203 	mul.w	r2, r2, r3
 80101f6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80101fa:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 80101fe:	4601      	mov	r1, r0
 8010200:	fb01 f303 	mul.w	r3, r1, r3
 8010204:	4413      	add	r3, r2
 8010206:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 801020a:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 801020e:	fba2 1201 	umull	r1, r2, r2, r1
 8010212:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8010216:	460a      	mov	r2, r1
 8010218:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 801021c:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8010220:	4413      	add	r3, r2
 8010222:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8010226:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022e:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8010232:	1851      	adds	r1, r2, r1
 8010234:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8010238:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 801023c:	414b      	adcs	r3, r1
 801023e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8010242:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8010246:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 801024a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801024e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	2b00      	cmp	r3, #0
 8010258:	da0a      	bge.n	8010270 <arm_softmax_s8+0x2728>
 801025a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801025e:	1851      	adds	r1, r2, r1
 8010260:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8010264:	f143 0300 	adc.w	r3, r3, #0
 8010268:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801026c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8010270:	f04f 0000 	mov.w	r0, #0
 8010274:	f04f 0100 	mov.w	r1, #0
 8010278:	0fd0      	lsrs	r0, r2, #31
 801027a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801027e:	17d9      	asrs	r1, r3, #31
 8010280:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010284:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8010288:	4603      	mov	r3, r0
 801028a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801028c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010290:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8010294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010298:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d10e      	bne.n	80102c2 <arm_softmax_s8+0x277a>
 80102a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102a8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102b2:	d106      	bne.n	80102c2 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 80102b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102b8:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 80102bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80102c0:	6013      	str	r3, [r2, #0]
    return result;
 80102c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102c6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102d0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80102d4:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 80102d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102da:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 80102de:	2300      	movs	r3, #0
 80102e0:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 80102e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102e6:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80102ea:	2318      	movs	r3, #24
 80102ec:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80102ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102f2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80102f6:	2201      	movs	r2, #1
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	fa02 f303 	lsl.w	r3, r2, r3
 80102fe:	1e5a      	subs	r2, r3, #1
 8010300:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010304:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	ea02 0003 	and.w	r0, r2, r3
 801030e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010312:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010316:	2201      	movs	r2, #1
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	fa02 f103 	lsl.w	r1, r2, r3
 801031e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010322:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8010326:	1a43      	subs	r3, r0, r1
 8010328:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 801032a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801032e:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 8010332:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010336:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 801033a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801033e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8010342:	6812      	ldr	r2, [r2, #0]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 801034a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801034e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	0159      	lsls	r1, r3, #5
 8010356:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801035a:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 801035e:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010368:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801036c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010370:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	6013      	str	r3, [r2, #0]
 8010378:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801037c:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8010380:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010384:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801038c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010390:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8010394:	2300      	movs	r3, #0
 8010396:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801039c:	f04f 0300 	mov.w	r3, #0
 80103a0:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80103a4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80103a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103ac:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	0fdb      	lsrs	r3, r3, #31
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103ba:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	0fdb      	lsrs	r3, r3, #31
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	4053      	eors	r3, r2
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d012      	beq.n	80103f2 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 80103cc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80103d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d4:	2100      	movs	r1, #0
 80103d6:	f1d2 0001 	rsbs	r0, r2, #1
 80103da:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 80103de:	eb61 0303 	sbc.w	r3, r1, r3
 80103e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80103e6:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80103ea:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80103ee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80103f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103f6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	17da      	asrs	r2, r3, #31
 80103fe:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8010402:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8010406:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801040a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	17da      	asrs	r2, r3, #31
 8010412:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8010416:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 801041a:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 801041e:	460b      	mov	r3, r1
 8010420:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8010424:	fb02 f203 	mul.w	r2, r2, r3
 8010428:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801042c:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8010430:	4601      	mov	r1, r0
 8010432:	fb01 f303 	mul.w	r3, r1, r3
 8010436:	4413      	add	r3, r2
 8010438:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801043c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8010440:	fba2 1201 	umull	r1, r2, r2, r1
 8010444:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8010448:	460a      	mov	r2, r1
 801044a:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 801044e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8010452:	4413      	add	r3, r2
 8010454:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8010458:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801045c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010460:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8010464:	1851      	adds	r1, r2, r1
 8010466:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 801046a:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 801046e:	414b      	adcs	r3, r1
 8010470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010474:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8010478:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 801047c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010480:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	2b00      	cmp	r3, #0
 801048a:	da0a      	bge.n	80104a2 <arm_softmax_s8+0x295a>
 801048c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010490:	1851      	adds	r1, r2, r1
 8010492:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8010496:	f143 0300 	adc.w	r3, r3, #0
 801049a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801049e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80104a2:	f04f 0000 	mov.w	r0, #0
 80104a6:	f04f 0100 	mov.w	r1, #0
 80104aa:	0fd0      	lsrs	r0, r2, #31
 80104ac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80104b0:	17d9      	asrs	r1, r3, #31
 80104b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104b6:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80104ba:	4603      	mov	r3, r0
 80104bc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80104be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104c2:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 80104c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104ca:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80104ce:	6812      	ldr	r2, [r2, #0]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d10e      	bne.n	80104f4 <arm_softmax_s8+0x29ac>
 80104d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104da:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104e4:	d106      	bne.n	80104f4 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 80104e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104ea:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80104ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80104f2:	6013      	str	r3, [r2, #0]
    return result;
 80104f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104f8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80104fc:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80104fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010502:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010506:	601a      	str	r2, [r3, #0]
 8010508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801050c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8010510:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010514:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	6013      	str	r3, [r2, #0]
 801051c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010520:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8010524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010528:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010530:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010534:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8010538:	2300      	movs	r3, #0
 801053a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801053c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010540:	f04f 0300 	mov.w	r3, #0
 8010544:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8010548:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801054c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010550:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	0fdb      	lsrs	r3, r3, #31
 8010558:	b2da      	uxtb	r2, r3
 801055a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801055e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	0fdb      	lsrs	r3, r3, #31
 8010566:	b2db      	uxtb	r3, r3
 8010568:	4053      	eors	r3, r2
 801056a:	b2db      	uxtb	r3, r3
 801056c:	2b00      	cmp	r3, #0
 801056e:	d012      	beq.n	8010596 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8010570:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	2100      	movs	r1, #0
 801057a:	f1d2 0001 	rsbs	r0, r2, #1
 801057e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8010582:	eb61 0303 	sbc.w	r3, r1, r3
 8010586:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801058a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 801058e:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8010592:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801059a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	17da      	asrs	r2, r3, #31
 80105a2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80105a6:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 80105aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105ae:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	17da      	asrs	r2, r3, #31
 80105b6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80105ba:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 80105be:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 80105c2:	460b      	mov	r3, r1
 80105c4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80105c8:	fb02 f203 	mul.w	r2, r2, r3
 80105cc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80105d0:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 80105d4:	4601      	mov	r1, r0
 80105d6:	fb01 f303 	mul.w	r3, r1, r3
 80105da:	4413      	add	r3, r2
 80105dc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80105e0:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 80105e4:	fba2 1201 	umull	r1, r2, r2, r1
 80105e8:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 80105ec:	460a      	mov	r2, r1
 80105ee:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 80105f2:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 80105f6:	4413      	add	r3, r2
 80105f8:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80105fc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8010608:	1851      	adds	r1, r2, r1
 801060a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 801060e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8010612:	414b      	adcs	r3, r1
 8010614:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010618:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801061c:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8010620:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010624:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8010628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062c:	2b00      	cmp	r3, #0
 801062e:	da0a      	bge.n	8010646 <arm_softmax_s8+0x2afe>
 8010630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010634:	1851      	adds	r1, r2, r1
 8010636:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801063a:	f143 0300 	adc.w	r3, r3, #0
 801063e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010642:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8010646:	f04f 0000 	mov.w	r0, #0
 801064a:	f04f 0100 	mov.w	r1, #0
 801064e:	0fd0      	lsrs	r0, r2, #31
 8010650:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010654:	17d9      	asrs	r1, r3, #31
 8010656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801065a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801065e:	4603      	mov	r3, r0
 8010660:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010666:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 801066a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801066e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8010672:	6812      	ldr	r2, [r2, #0]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	429a      	cmp	r2, r3
 8010678:	d10e      	bne.n	8010698 <arm_softmax_s8+0x2b50>
 801067a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801067e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010688:	d106      	bne.n	8010698 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 801068a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801068e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8010692:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010696:	6013      	str	r3, [r2, #0]
    return result;
 8010698:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801069c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106a6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80106aa:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80106ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106b0:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80106b4:	2300      	movs	r3, #0
 80106b6:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80106b8:	2104      	movs	r1, #4
 80106ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106be:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 80106c2:	1e4b      	subs	r3, r1, #1
 80106c4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80106c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106ca:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 80106ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106d2:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 80106d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106da:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80106de:	6812      	ldr	r2, [r2, #0]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	4013      	ands	r3, r2
 80106e4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80106e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106ea:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80106ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106f2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	109b      	asrs	r3, r3, #2
 80106fa:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80106fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010700:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8010704:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010708:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	105b      	asrs	r3, r3, #1
 8010710:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8010712:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010716:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	da0a      	bge.n	8010736 <arm_softmax_s8+0x2bee>
        threshold++;
 8010720:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010724:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8010728:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801072c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8010736:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801073a:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 801073e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010742:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8010746:	6812      	ldr	r2, [r2, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	429a      	cmp	r2, r3
 801074c:	dd0a      	ble.n	8010764 <arm_softmax_s8+0x2c1c>
        result++;
 801074e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010752:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8010756:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801075a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3301      	adds	r3, #1
 8010762:	6013      	str	r3, [r2, #0]
    return result;
 8010764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010768:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801076c:	681c      	ldr	r4, [r3, #0]
 801076e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010772:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8010776:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801077a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6013      	str	r3, [r2, #0]
 8010782:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010786:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 801078a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801078e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010796:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801079a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801079e:	2300      	movs	r3, #0
 80107a0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80107a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80107a6:	f04f 0300 	mov.w	r3, #0
 80107aa:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80107ae:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80107b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107b6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	0fdb      	lsrs	r3, r3, #31
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107c4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	0fdb      	lsrs	r3, r3, #31
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	4053      	eors	r3, r2
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d012      	beq.n	80107fc <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 80107d6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80107da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107de:	2100      	movs	r1, #0
 80107e0:	f1d2 0001 	rsbs	r0, r2, #1
 80107e4:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80107e8:	eb61 0303 	sbc.w	r3, r1, r3
 80107ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80107f0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80107f4:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80107f8:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80107fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010800:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	17da      	asrs	r2, r3, #31
 8010808:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 801080c:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8010810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010814:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	17da      	asrs	r2, r3, #31
 801081c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8010820:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8010824:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8010828:	460b      	mov	r3, r1
 801082a:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 801082e:	fb02 f203 	mul.w	r2, r2, r3
 8010832:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8010836:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 801083a:	4601      	mov	r1, r0
 801083c:	fb01 f303 	mul.w	r3, r1, r3
 8010840:	4413      	add	r3, r2
 8010842:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8010846:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801084a:	fba2 1201 	umull	r1, r2, r2, r1
 801084e:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8010852:	460a      	mov	r2, r1
 8010854:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8010858:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 801085c:	4413      	add	r3, r2
 801085e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8010862:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 801086e:	1851      	adds	r1, r2, r1
 8010870:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8010874:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8010878:	414b      	adcs	r3, r1
 801087a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801087e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8010882:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8010886:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 801088a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801088e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010892:	2b00      	cmp	r3, #0
 8010894:	da0a      	bge.n	80108ac <arm_softmax_s8+0x2d64>
 8010896:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801089a:	1851      	adds	r1, r2, r1
 801089c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80108a0:	f143 0300 	adc.w	r3, r3, #0
 80108a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80108a8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80108ac:	f04f 0000 	mov.w	r0, #0
 80108b0:	f04f 0100 	mov.w	r1, #0
 80108b4:	0fd0      	lsrs	r0, r2, #31
 80108b6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80108ba:	17d9      	asrs	r1, r3, #31
 80108bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108c0:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80108c4:	4603      	mov	r3, r0
 80108c6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80108c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108cc:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80108d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108d4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80108d8:	6812      	ldr	r2, [r2, #0]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d10e      	bne.n	80108fe <arm_softmax_s8+0x2db6>
 80108e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108e4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108ee:	d106      	bne.n	80108fe <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 80108f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108f4:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80108f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80108fc:	6013      	str	r3, [r2, #0]
    return result;
 80108fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010902:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8010906:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8010908:	18e2      	adds	r2, r4, r3
 801090a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801090e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010912:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8010914:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010918:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801091c:	2300      	movs	r3, #0
 801091e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010924:	f04f 0300 	mov.w	r3, #0
 8010928:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 801092c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010930:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010934:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	0fdb      	lsrs	r3, r3, #31
 801093c:	b2da      	uxtb	r2, r3
 801093e:	2300      	movs	r3, #0
 8010940:	4053      	eors	r3, r2
 8010942:	b2db      	uxtb	r3, r3
 8010944:	2b00      	cmp	r3, #0
 8010946:	d012      	beq.n	801096e <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8010948:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010950:	2100      	movs	r1, #0
 8010952:	f1d2 0001 	rsbs	r0, r2, #1
 8010956:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 801095a:	eb61 0303 	sbc.w	r3, r1, r3
 801095e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010962:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8010966:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801096a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801096e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010972:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	17da      	asrs	r2, r3, #31
 801097a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 801097e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8010982:	a3c9      	add	r3, pc, #804	; (adr r3, 8010ca8 <arm_softmax_s8+0x3160>)
 8010984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010988:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 801098c:	fb02 f001 	mul.w	r0, r2, r1
 8010990:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8010994:	fb01 f103 	mul.w	r1, r1, r3
 8010998:	4401      	add	r1, r0
 801099a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 801099e:	fba0 2302 	umull	r2, r3, r0, r2
 80109a2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80109a6:	4613      	mov	r3, r2
 80109a8:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80109ac:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80109b0:	18cb      	adds	r3, r1, r3
 80109b2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80109b6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109be:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 80109c2:	1851      	adds	r1, r2, r1
 80109c4:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80109c8:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 80109cc:	414b      	adcs	r3, r1
 80109ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80109d2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80109d6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80109da:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80109de:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80109e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	da0a      	bge.n	8010a00 <arm_softmax_s8+0x2eb8>
 80109ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80109ee:	1851      	adds	r1, r2, r1
 80109f0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80109f4:	f143 0300 	adc.w	r3, r3, #0
 80109f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80109fc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8010a00:	f04f 0000 	mov.w	r0, #0
 8010a04:	f04f 0100 	mov.w	r1, #0
 8010a08:	0fd0      	lsrs	r0, r2, #31
 8010a0a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010a0e:	17d9      	asrs	r1, r3, #31
 8010a10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a14:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8010a18:	4603      	mov	r3, r0
 8010a1a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010a1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a20:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	4b9e      	ldr	r3, [pc, #632]	; (8010ca0 <arm_softmax_s8+0x3158>)
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d10e      	bne.n	8010a4a <arm_softmax_s8+0x2f02>
 8010a2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a30:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010a3a:	d106      	bne.n	8010a4a <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8010a3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a40:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8010a44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010a48:	6013      	str	r3, [r2, #0]
    return result;
 8010a4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a4e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8010a52:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8010a54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a58:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	441a      	add	r2, r3
 8010a60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a64:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8010a68:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8010a6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a6e:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8010a72:	2300      	movs	r3, #0
 8010a74:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8010a76:	2102      	movs	r1, #2
 8010a78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a7c:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8010a80:	1e4b      	subs	r3, r1, #1
 8010a82:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8010a84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a88:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8010a8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a90:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8010a94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a98:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8010a9c:	6812      	ldr	r2, [r2, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8010aa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010aa8:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8010aac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ab0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	105b      	asrs	r3, r3, #1
 8010ab8:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8010aba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010abe:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8010ac2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ac6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	105b      	asrs	r3, r3, #1
 8010ace:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8010ad0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ad4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	da0a      	bge.n	8010af4 <arm_softmax_s8+0x2fac>
        threshold++;
 8010ade:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ae2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8010ae6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010aea:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	3301      	adds	r3, #1
 8010af2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8010af4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010af8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8010afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b00:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8010b04:	6812      	ldr	r2, [r2, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	dd0a      	ble.n	8010b22 <arm_softmax_s8+0x2fda>
        result++;
 8010b0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b10:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8010b14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b18:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3301      	adds	r3, #1
 8010b20:	6013      	str	r3, [r2, #0]
    return result;
 8010b22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b26:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8010b2a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8010b2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b30:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	441a      	add	r2, r3
 8010b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b3c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8010b40:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8010b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b46:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010b52:	f04f 0300 	mov.w	r3, #0
 8010b56:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8010b5a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b64:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	0fdb      	lsrs	r3, r3, #31
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	4053      	eors	r3, r2
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d012      	beq.n	8010b9c <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8010b76:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8010b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7e:	2100      	movs	r1, #0
 8010b80:	f1d2 0001 	rsbs	r0, r2, #1
 8010b84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8010b88:	eb61 0303 	sbc.w	r3, r1, r3
 8010b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010b90:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8010b94:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8010b98:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010b9c:	a13e      	add	r1, pc, #248	; (adr r1, 8010c98 <arm_softmax_s8+0x3150>)
 8010b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ba2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ba6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	17da      	asrs	r2, r3, #31
 8010bae:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8010bb2:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8010bb6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8010bba:	fb03 f201 	mul.w	r2, r3, r1
 8010bbe:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8010bc2:	fb00 f303 	mul.w	r3, r0, r3
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8010bcc:	fba0 1202 	umull	r1, r2, r0, r2
 8010bd0:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8010bd4:	460a      	mov	r2, r1
 8010bd6:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8010bda:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8010bde:	4413      	add	r3, r2
 8010be0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8010be4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8010be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bec:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8010bf0:	1851      	adds	r1, r2, r1
 8010bf2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8010bf6:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8010bfa:	414b      	adcs	r3, r1
 8010bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010c00:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8010c04:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8010c08:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010c0c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	da0a      	bge.n	8010c2e <arm_softmax_s8+0x30e6>
 8010c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c1c:	1851      	adds	r1, r2, r1
 8010c1e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8010c22:	f143 0300 	adc.w	r3, r3, #0
 8010c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010c2a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8010c2e:	f04f 0000 	mov.w	r0, #0
 8010c32:	f04f 0100 	mov.w	r1, #0
 8010c36:	0fd0      	lsrs	r0, r2, #31
 8010c38:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010c3c:	17d9      	asrs	r1, r3, #31
 8010c3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c42:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8010c46:	4603      	mov	r3, r0
 8010c48:	6013      	str	r3, [r2, #0]
    return result;
 8010c4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c4e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8010c52:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8010c54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c58:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010c5c:	4b11      	ldr	r3, [pc, #68]	; (8010ca4 <arm_softmax_s8+0x315c>)
 8010c5e:	440b      	add	r3, r1
 8010c60:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8010c62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c66:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010c6a:	6819      	ldr	r1, [r3, #0]
 8010c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c70:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010c74:	1c4b      	adds	r3, r1, #1
 8010c76:	6013      	str	r3, [r2, #0]
 8010c78:	2301      	movs	r3, #1
 8010c7a:	fa03 f201 	lsl.w	r2, r3, r1
 8010c7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c82:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4013      	ands	r3, r2
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d010      	beq.n	8010cb0 <arm_softmax_s8+0x3168>
 8010c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c92:	e00e      	b.n	8010cb2 <arm_softmax_s8+0x316a>
 8010c94:	f3af 8000 	nop.w
 8010c98:	70f5a894 	.word	0x70f5a894
 8010c9c:	00000000 	.word	0x00000000
 8010ca0:	2aaaaaab 	.word	0x2aaaaaab
 8010ca4:	70f5a894 	.word	0x70f5a894
 8010ca8:	2aaaaaab 	.word	0x2aaaaaab
 8010cac:	00000000 	.word	0x00000000
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cb6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010cba:	601a      	str	r2, [r3, #0]
 8010cbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cc0:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8010cc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cc8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010cd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cd4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8010cd8:	2300      	movs	r3, #0
 8010cda:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010ce0:	f04f 0300 	mov.w	r3, #0
 8010ce4:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8010ce8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010cec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cf0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	0fdb      	lsrs	r3, r3, #31
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	4053      	eors	r3, r2
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d012      	beq.n	8010d2a <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8010d04:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	f1d2 0001 	rsbs	r0, r2, #1
 8010d12:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8010d16:	eb61 0303 	sbc.w	r3, r1, r3
 8010d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010d1e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8010d22:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8010d26:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010d2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d2e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	17da      	asrs	r2, r3, #31
 8010d36:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8010d3a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8010d3e:	a3c4      	add	r3, pc, #784	; (adr r3, 8011050 <arm_softmax_s8+0x3508>)
 8010d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d44:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8010d48:	fb02 f001 	mul.w	r0, r2, r1
 8010d4c:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8010d50:	fb01 f103 	mul.w	r1, r1, r3
 8010d54:	4401      	add	r1, r0
 8010d56:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8010d5a:	fba0 2302 	umull	r2, r3, r0, r2
 8010d5e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8010d62:	4613      	mov	r3, r2
 8010d64:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8010d68:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8010d6c:	18cb      	adds	r3, r1, r3
 8010d6e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8010d72:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8010d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7a:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8010d7e:	1851      	adds	r1, r2, r1
 8010d80:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8010d84:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8010d88:	414b      	adcs	r3, r1
 8010d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d8e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8010d92:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8010d96:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010d9a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8010d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	da0a      	bge.n	8010dbc <arm_softmax_s8+0x3274>
 8010da6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010daa:	1851      	adds	r1, r2, r1
 8010dac:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8010db0:	f143 0300 	adc.w	r3, r3, #0
 8010db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010db8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010dbc:	f04f 0000 	mov.w	r0, #0
 8010dc0:	f04f 0100 	mov.w	r1, #0
 8010dc4:	0fd0      	lsrs	r0, r2, #31
 8010dc6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010dca:	17d9      	asrs	r1, r3, #31
 8010dcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dd0:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010dd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ddc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	4b99      	ldr	r3, [pc, #612]	; (8011048 <arm_softmax_s8+0x3500>)
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d10e      	bne.n	8010e06 <arm_softmax_s8+0x32be>
 8010de8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dec:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010df6:	d106      	bne.n	8010e06 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8010df8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dfc:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8010e00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010e04:	6013      	str	r3, [r2, #0]
    return result;
 8010e06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e0a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8010e0e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8010e10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e14:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	ea02 0003 	and.w	r0, r2, r3
 8010e1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e22:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	43da      	mvns	r2, r3
 8010e2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e2e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	ea02 0103 	and.w	r1, r2, r3
 8010e38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e3c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010e40:	ea80 0301 	eor.w	r3, r0, r1
 8010e44:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8010e46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e4a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010e4e:	6819      	ldr	r1, [r3, #0]
 8010e50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e54:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010e58:	1c4b      	adds	r3, r1, #1
 8010e5a:	6013      	str	r3, [r2, #0]
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	fa03 f201 	lsl.w	r2, r3, r1
 8010e62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e66:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4013      	ands	r3, r2
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d002      	beq.n	8010e78 <arm_softmax_s8+0x3330>
 8010e72:	f04f 32ff 	mov.w	r2, #4294967295
 8010e76:	e000      	b.n	8010e7a <arm_softmax_s8+0x3332>
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e7e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e88:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8010e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e90:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010e98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e9c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010ea8:	f04f 0300 	mov.w	r3, #0
 8010eac:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8010eb0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010eb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010eb8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	0fdb      	lsrs	r3, r3, #31
 8010ec0:	b2da      	uxtb	r2, r3
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	4053      	eors	r3, r2
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d012      	beq.n	8010ef2 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8010ecc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8010ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	f1d2 0001 	rsbs	r0, r2, #1
 8010eda:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8010ede:	eb61 0303 	sbc.w	r3, r1, r3
 8010ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010ee6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8010eea:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8010eee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ef6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	17da      	asrs	r2, r3, #31
 8010efe:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8010f02:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8010f06:	a34e      	add	r3, pc, #312	; (adr r3, 8011040 <arm_softmax_s8+0x34f8>)
 8010f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0c:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8010f10:	fb02 f001 	mul.w	r0, r2, r1
 8010f14:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8010f18:	fb01 f103 	mul.w	r1, r1, r3
 8010f1c:	4401      	add	r1, r0
 8010f1e:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8010f22:	fba0 2302 	umull	r2, r3, r0, r2
 8010f26:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8010f30:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8010f34:	18cb      	adds	r3, r1, r3
 8010f36:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8010f3a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8010f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f42:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 8010f46:	1851      	adds	r1, r2, r1
 8010f48:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010f4c:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8010f50:	414b      	adcs	r3, r1
 8010f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010f56:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8010f5a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8010f5e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010f62:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8010f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	da0a      	bge.n	8010f84 <arm_softmax_s8+0x343c>
 8010f6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f72:	1851      	adds	r1, r2, r1
 8010f74:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8010f78:	f143 0300 	adc.w	r3, r3, #0
 8010f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f80:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8010f84:	f04f 0000 	mov.w	r0, #0
 8010f88:	f04f 0100 	mov.w	r1, #0
 8010f8c:	0fd0      	lsrs	r0, r2, #31
 8010f8e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010f92:	17d9      	asrs	r1, r3, #31
 8010f94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f98:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010fa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fa4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	4b28      	ldr	r3, [pc, #160]	; (801104c <arm_softmax_s8+0x3504>)
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d10e      	bne.n	8010fce <arm_softmax_s8+0x3486>
 8010fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fb4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fbe:	d106      	bne.n	8010fce <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8010fc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fc4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8010fc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010fcc:	6013      	str	r3, [r2, #0]
    return result;
 8010fce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fd2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8010fd6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8010fd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fdc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	ea02 0003 	and.w	r0, r2, r3
 8010fe6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	43da      	mvns	r2, r3
 8010ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ff6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	ea02 0103 	and.w	r1, r2, r3
 8011000:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011004:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011008:	ea80 0301 	eor.w	r3, r0, r1
 801100c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 801100e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011012:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011016:	6819      	ldr	r1, [r3, #0]
 8011018:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801101c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011020:	1c4b      	adds	r3, r1, #1
 8011022:	6013      	str	r3, [r2, #0]
 8011024:	2301      	movs	r3, #1
 8011026:	fa03 f201 	lsl.w	r2, r3, r1
 801102a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801102e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4013      	ands	r3, r2
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00e      	beq.n	8011058 <arm_softmax_s8+0x3510>
 801103a:	f04f 32ff 	mov.w	r2, #4294967295
 801103e:	e00c      	b.n	801105a <arm_softmax_s8+0x3512>
 8011040:	4da2cbf2 	.word	0x4da2cbf2
 8011044:	00000000 	.word	0x00000000
 8011048:	63afbe7b 	.word	0x63afbe7b
 801104c:	4da2cbf2 	.word	0x4da2cbf2
 8011050:	63afbe7b 	.word	0x63afbe7b
 8011054:	00000000 	.word	0x00000000
 8011058:	2200      	movs	r2, #0
 801105a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801105e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011062:	601a      	str	r2, [r3, #0]
 8011064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011068:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 801106c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011070:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011078:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801107c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8011080:	2300      	movs	r3, #0
 8011082:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011088:	f04f 0300 	mov.w	r3, #0
 801108c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8011090:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011094:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011098:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	0fdb      	lsrs	r3, r3, #31
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	2300      	movs	r3, #0
 80110a4:	4053      	eors	r3, r2
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d012      	beq.n	80110d2 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 80110ac:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80110b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b4:	2100      	movs	r1, #0
 80110b6:	f1d2 0001 	rsbs	r0, r2, #1
 80110ba:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 80110be:	eb61 0303 	sbc.w	r3, r1, r3
 80110c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80110c6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80110ca:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80110ce:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80110d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110d6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	17da      	asrs	r2, r3, #31
 80110de:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80110e2:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80110e6:	a3c0      	add	r3, pc, #768	; (adr r3, 80113e8 <arm_softmax_s8+0x38a0>)
 80110e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ec:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80110f0:	fb02 f001 	mul.w	r0, r2, r1
 80110f4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80110f8:	fb01 f103 	mul.w	r1, r1, r3
 80110fc:	4401      	add	r1, r0
 80110fe:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8011102:	fba0 2302 	umull	r2, r3, r0, r2
 8011106:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 801110a:	4613      	mov	r3, r2
 801110c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8011110:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8011114:	18cb      	adds	r3, r1, r3
 8011116:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 801111a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8011126:	1851      	adds	r1, r2, r1
 8011128:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801112c:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8011130:	414b      	adcs	r3, r1
 8011132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011136:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 801113a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 801113e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011142:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	2b00      	cmp	r3, #0
 801114c:	da08      	bge.n	8011160 <arm_softmax_s8+0x3618>
 801114e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011152:	1851      	adds	r1, r2, r1
 8011154:	67b9      	str	r1, [r7, #120]	; 0x78
 8011156:	f143 0300 	adc.w	r3, r3, #0
 801115a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801115c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011160:	f04f 0000 	mov.w	r0, #0
 8011164:	f04f 0100 	mov.w	r1, #0
 8011168:	0fd0      	lsrs	r0, r2, #31
 801116a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801116e:	17d9      	asrs	r1, r3, #31
 8011170:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011174:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8011178:	4603      	mov	r3, r0
 801117a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801117c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011180:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	4b96      	ldr	r3, [pc, #600]	; (80113e0 <arm_softmax_s8+0x3898>)
 8011188:	429a      	cmp	r2, r3
 801118a:	d10e      	bne.n	80111aa <arm_softmax_s8+0x3662>
 801118c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011190:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801119a:	d106      	bne.n	80111aa <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 801119c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111a0:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 80111a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80111a8:	6013      	str	r3, [r2, #0]
    return result;
 80111aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ae:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80111b2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80111b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111b8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	ea02 0003 	and.w	r0, r2, r3
 80111c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111c6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	43da      	mvns	r2, r3
 80111ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111d2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	ea02 0103 	and.w	r1, r2, r3
 80111dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111e0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80111e4:	ea80 0301 	eor.w	r3, r0, r1
 80111e8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80111ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ee:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111f8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80111fc:	1c4b      	adds	r3, r1, #1
 80111fe:	6013      	str	r3, [r2, #0]
 8011200:	2301      	movs	r3, #1
 8011202:	fa03 f201 	lsl.w	r2, r3, r1
 8011206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801120a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4013      	ands	r3, r2
 8011212:	2b00      	cmp	r3, #0
 8011214:	d002      	beq.n	801121c <arm_softmax_s8+0x36d4>
 8011216:	f04f 32ff 	mov.w	r2, #4294967295
 801121a:	e000      	b.n	801121e <arm_softmax_s8+0x36d6>
 801121c:	2200      	movs	r2, #0
 801121e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011222:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011226:	601a      	str	r2, [r3, #0]
 8011228:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801122c:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8011230:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011234:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801123c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011240:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8011244:	2300      	movs	r3, #0
 8011246:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801124c:	f04f 0300 	mov.w	r3, #0
 8011250:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8011254:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011258:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801125c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	0fdb      	lsrs	r3, r3, #31
 8011264:	b2da      	uxtb	r2, r3
 8011266:	2300      	movs	r3, #0
 8011268:	4053      	eors	r3, r2
 801126a:	b2db      	uxtb	r3, r3
 801126c:	2b00      	cmp	r3, #0
 801126e:	d010      	beq.n	8011292 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8011270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011278:	2100      	movs	r1, #0
 801127a:	f1d2 0001 	rsbs	r0, r2, #1
 801127e:	6738      	str	r0, [r7, #112]	; 0x70
 8011280:	eb61 0303 	sbc.w	r3, r1, r3
 8011284:	677b      	str	r3, [r7, #116]	; 0x74
 8011286:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801128a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801128e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011292:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011296:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	17da      	asrs	r2, r3, #31
 801129e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 80112a2:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 80112a6:	a34c      	add	r3, pc, #304	; (adr r3, 80113d8 <arm_softmax_s8+0x3890>)
 80112a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ac:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 80112b0:	fb02 f001 	mul.w	r0, r2, r1
 80112b4:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 80112b8:	fb01 f103 	mul.w	r1, r1, r3
 80112bc:	4401      	add	r1, r0
 80112be:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 80112c2:	fba0 2302 	umull	r2, r3, r0, r2
 80112c6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80112ca:	4613      	mov	r3, r2
 80112cc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80112d0:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80112d4:	18cb      	adds	r3, r1, r3
 80112d6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80112da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80112de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e2:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 80112e6:	1851      	adds	r1, r2, r1
 80112e8:	66b9      	str	r1, [r7, #104]	; 0x68
 80112ea:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 80112ee:	414b      	adcs	r3, r1
 80112f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80112f2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80112f6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80112fa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80112fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011306:	2b00      	cmp	r3, #0
 8011308:	da08      	bge.n	801131c <arm_softmax_s8+0x37d4>
 801130a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801130e:	1851      	adds	r1, r2, r1
 8011310:	6639      	str	r1, [r7, #96]	; 0x60
 8011312:	f143 0300 	adc.w	r3, r3, #0
 8011316:	667b      	str	r3, [r7, #100]	; 0x64
 8011318:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801131c:	f04f 0000 	mov.w	r0, #0
 8011320:	f04f 0100 	mov.w	r1, #0
 8011324:	0fd0      	lsrs	r0, r2, #31
 8011326:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801132a:	17d9      	asrs	r1, r3, #31
 801132c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011330:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8011334:	4603      	mov	r3, r0
 8011336:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801133c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	4b28      	ldr	r3, [pc, #160]	; (80113e4 <arm_softmax_s8+0x389c>)
 8011344:	429a      	cmp	r2, r3
 8011346:	d10e      	bne.n	8011366 <arm_softmax_s8+0x381e>
 8011348:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801134c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011356:	d106      	bne.n	8011366 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8011358:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801135c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8011360:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011364:	6013      	str	r3, [r2, #0]
    return result;
 8011366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801136a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801136e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8011370:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011374:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	ea02 0003 	and.w	r0, r2, r3
 801137e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011382:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	43da      	mvns	r2, r3
 801138a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801138e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	ea02 0103 	and.w	r1, r2, r3
 8011398:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801139c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80113a0:	ea80 0301 	eor.w	r3, r0, r1
 80113a4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 80113a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113aa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80113ae:	6819      	ldr	r1, [r3, #0]
 80113b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113b4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80113b8:	1c4b      	adds	r3, r1, #1
 80113ba:	6013      	str	r3, [r2, #0]
 80113bc:	2301      	movs	r3, #1
 80113be:	fa03 f201 	lsl.w	r2, r3, r1
 80113c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4013      	ands	r3, r2
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00e      	beq.n	80113f0 <arm_softmax_s8+0x38a8>
 80113d2:	f04f 32ff 	mov.w	r2, #4294967295
 80113d6:	e00c      	b.n	80113f2 <arm_softmax_s8+0x38aa>
 80113d8:	1152aaa4 	.word	0x1152aaa4
 80113dc:	00000000 	.word	0x00000000
 80113e0:	2f16ac6c 	.word	0x2f16ac6c
 80113e4:	1152aaa4 	.word	0x1152aaa4
 80113e8:	2f16ac6c 	.word	0x2f16ac6c
 80113ec:	00000000 	.word	0x00000000
 80113f0:	2200      	movs	r2, #0
 80113f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113f6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011400:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8011404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011408:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011410:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011414:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8011418:	2300      	movs	r3, #0
 801141a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801141c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011420:	f04f 0300 	mov.w	r3, #0
 8011424:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8011428:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801142c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011430:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	0fdb      	lsrs	r3, r3, #31
 8011438:	b2da      	uxtb	r2, r3
 801143a:	2300      	movs	r3, #0
 801143c:	4053      	eors	r3, r2
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	d010      	beq.n	8011466 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8011444:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8011448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144c:	2100      	movs	r1, #0
 801144e:	f1d2 0001 	rsbs	r0, r2, #1
 8011452:	65b8      	str	r0, [r7, #88]	; 0x58
 8011454:	eb61 0303 	sbc.w	r3, r1, r3
 8011458:	65fb      	str	r3, [r7, #92]	; 0x5c
 801145a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 801145e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8011462:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011466:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801146a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	17da      	asrs	r2, r3, #31
 8011472:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8011476:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 801147a:	a3bd      	add	r3, pc, #756	; (adr r3, 8011770 <arm_softmax_s8+0x3c28>)
 801147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011480:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8011484:	fb02 f001 	mul.w	r0, r2, r1
 8011488:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 801148c:	fb01 f103 	mul.w	r1, r1, r3
 8011490:	4401      	add	r1, r0
 8011492:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8011496:	fba0 2302 	umull	r2, r3, r0, r2
 801149a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 801149e:	4613      	mov	r3, r2
 80114a0:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 80114a4:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80114a8:	18cb      	adds	r3, r1, r3
 80114aa:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 80114ae:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80114b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b6:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 80114ba:	1851      	adds	r1, r2, r1
 80114bc:	6539      	str	r1, [r7, #80]	; 0x50
 80114be:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 80114c2:	414b      	adcs	r3, r1
 80114c4:	657b      	str	r3, [r7, #84]	; 0x54
 80114c6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80114ca:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80114ce:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80114d2:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80114d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	da08      	bge.n	80114f0 <arm_softmax_s8+0x39a8>
 80114de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80114e2:	1851      	adds	r1, r2, r1
 80114e4:	64b9      	str	r1, [r7, #72]	; 0x48
 80114e6:	f143 0300 	adc.w	r3, r3, #0
 80114ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80114f0:	f04f 0000 	mov.w	r0, #0
 80114f4:	f04f 0100 	mov.w	r1, #0
 80114f8:	0fd0      	lsrs	r0, r2, #31
 80114fa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80114fe:	17d9      	asrs	r1, r3, #31
 8011500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011504:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8011508:	4603      	mov	r3, r0
 801150a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801150c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011510:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	4b94      	ldr	r3, [pc, #592]	; (8011768 <arm_softmax_s8+0x3c20>)
 8011518:	429a      	cmp	r2, r3
 801151a:	d10e      	bne.n	801153a <arm_softmax_s8+0x39f2>
 801151c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011520:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801152a:	d106      	bne.n	801153a <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 801152c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011530:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8011534:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011538:	6013      	str	r3, [r2, #0]
    return result;
 801153a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801153e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8011542:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8011544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011548:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	ea02 0003 	and.w	r0, r2, r3
 8011552:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011556:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	43da      	mvns	r2, r3
 801155e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011562:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	ea02 0103 	and.w	r1, r2, r3
 801156c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011570:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011574:	ea80 0301 	eor.w	r3, r0, r1
 8011578:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 801157a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801157e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011582:	6819      	ldr	r1, [r3, #0]
 8011584:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011588:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801158c:	1c4b      	adds	r3, r1, #1
 801158e:	6013      	str	r3, [r2, #0]
 8011590:	2301      	movs	r3, #1
 8011592:	fa03 f201 	lsl.w	r2, r3, r1
 8011596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801159a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4013      	ands	r3, r2
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d002      	beq.n	80115ac <arm_softmax_s8+0x3a64>
 80115a6:	f04f 32ff 	mov.w	r2, #4294967295
 80115aa:	e000      	b.n	80115ae <arm_softmax_s8+0x3a66>
 80115ac:	2200      	movs	r2, #0
 80115ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115b2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80115b6:	601a      	str	r2, [r3, #0]
 80115b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115bc:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 80115c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115c4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80115cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115d0:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80115d4:	2300      	movs	r3, #0
 80115d6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80115d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80115dc:	f04f 0300 	mov.w	r3, #0
 80115e0:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80115e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80115e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115ec:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	0fdb      	lsrs	r3, r3, #31
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	2300      	movs	r3, #0
 80115f8:	4053      	eors	r3, r2
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d010      	beq.n	8011622 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8011600:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8011604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011608:	2100      	movs	r1, #0
 801160a:	f1d2 0001 	rsbs	r0, r2, #1
 801160e:	6438      	str	r0, [r7, #64]	; 0x40
 8011610:	eb61 0303 	sbc.w	r3, r1, r3
 8011614:	647b      	str	r3, [r7, #68]	; 0x44
 8011616:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801161a:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801161e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011626:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	17da      	asrs	r2, r3, #31
 801162e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8011632:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8011636:	4a4d      	ldr	r2, [pc, #308]	; (801176c <arm_softmax_s8+0x3c24>)
 8011638:	f04f 0300 	mov.w	r3, #0
 801163c:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8011640:	fb02 f001 	mul.w	r0, r2, r1
 8011644:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8011648:	fb01 f103 	mul.w	r1, r1, r3
 801164c:	4401      	add	r1, r0
 801164e:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8011652:	fba0 2302 	umull	r2, r3, r0, r2
 8011656:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801165a:	4613      	mov	r3, r2
 801165c:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8011660:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8011664:	18cb      	adds	r3, r1, r3
 8011666:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801166a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011672:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8011676:	1851      	adds	r1, r2, r1
 8011678:	63b9      	str	r1, [r7, #56]	; 0x38
 801167a:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 801167e:	414b      	adcs	r3, r1
 8011680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011682:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8011686:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801168a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801168e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8011692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011696:	2b00      	cmp	r3, #0
 8011698:	da08      	bge.n	80116ac <arm_softmax_s8+0x3b64>
 801169a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801169e:	1851      	adds	r1, r2, r1
 80116a0:	6339      	str	r1, [r7, #48]	; 0x30
 80116a2:	f143 0300 	adc.w	r3, r3, #0
 80116a6:	637b      	str	r3, [r7, #52]	; 0x34
 80116a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80116ac:	f04f 0000 	mov.w	r0, #0
 80116b0:	f04f 0100 	mov.w	r1, #0
 80116b4:	0fd0      	lsrs	r0, r2, #31
 80116b6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80116ba:	17d9      	asrs	r1, r3, #31
 80116bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116c0:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80116c4:	4603      	mov	r3, r0
 80116c6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80116c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116cc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	4b26      	ldr	r3, [pc, #152]	; (801176c <arm_softmax_s8+0x3c24>)
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d10e      	bne.n	80116f6 <arm_softmax_s8+0x3bae>
 80116d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116dc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80116e6:	d106      	bne.n	80116f6 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80116e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116ec:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80116f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80116f4:	6013      	str	r3, [r2, #0]
    return result;
 80116f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80116fa:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80116fe:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8011700:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011704:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	ea02 0003 	and.w	r0, r2, r3
 801170e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011712:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	43da      	mvns	r2, r3
 801171a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801171e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	ea02 0103 	and.w	r1, r2, r3
 8011728:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801172c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011730:	ea80 0301 	eor.w	r3, r0, r1
 8011734:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8011736:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801173a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801173e:	6819      	ldr	r1, [r3, #0]
 8011740:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011744:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011748:	1c4b      	adds	r3, r1, #1
 801174a:	6013      	str	r3, [r2, #0]
 801174c:	2301      	movs	r3, #1
 801174e:	fa03 f201 	lsl.w	r2, r3, r1
 8011752:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011756:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4013      	ands	r3, r2
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00a      	beq.n	8011778 <arm_softmax_s8+0x3c30>
 8011762:	f04f 32ff 	mov.w	r2, #4294967295
 8011766:	e008      	b.n	801177a <arm_softmax_s8+0x3c32>
 8011768:	02582ab7 	.word	0x02582ab7
 801176c:	000afe11 	.word	0x000afe11
 8011770:	02582ab7 	.word	0x02582ab7
 8011774:	00000000 	.word	0x00000000
 8011778:	2200      	movs	r2, #0
 801177a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801177e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011788:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 801178c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011790:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011798:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801179c:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 80117a0:	2300      	movs	r3, #0
 80117a2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80117a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80117a8:	f04f 0300 	mov.w	r3, #0
 80117ac:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80117b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80117b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117b8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	0fdb      	lsrs	r3, r3, #31
 80117c0:	b2da      	uxtb	r2, r3
 80117c2:	2300      	movs	r3, #0
 80117c4:	4053      	eors	r3, r2
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d010      	beq.n	80117ee <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 80117cc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	2100      	movs	r1, #0
 80117d6:	f1d2 0001 	rsbs	r0, r2, #1
 80117da:	62b8      	str	r0, [r7, #40]	; 0x28
 80117dc:	eb61 0303 	sbc.w	r3, r1, r3
 80117e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117e2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80117e6:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80117ea:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80117ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117f2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	17da      	asrs	r2, r3, #31
 80117fa:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80117fe:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8011802:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8011806:	f04f 0300 	mov.w	r3, #0
 801180a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 801180e:	fb02 f001 	mul.w	r0, r2, r1
 8011812:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8011816:	fb01 f103 	mul.w	r1, r1, r3
 801181a:	4401      	add	r1, r0
 801181c:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8011820:	fba0 2302 	umull	r2, r3, r0, r2
 8011824:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8011828:	4613      	mov	r3, r2
 801182a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 801182e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8011832:	18cb      	adds	r3, r1, r3
 8011834:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8011838:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011840:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8011844:	1851      	adds	r1, r2, r1
 8011846:	6239      	str	r1, [r7, #32]
 8011848:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 801184c:	414b      	adcs	r3, r1
 801184e:	627b      	str	r3, [r7, #36]	; 0x24
 8011850:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011854:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8011858:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801185c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8011860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011864:	2b00      	cmp	r3, #0
 8011866:	da08      	bge.n	801187a <arm_softmax_s8+0x3d32>
 8011868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801186c:	1851      	adds	r1, r2, r1
 801186e:	61b9      	str	r1, [r7, #24]
 8011870:	f143 0300 	adc.w	r3, r3, #0
 8011874:	61fb      	str	r3, [r7, #28]
 8011876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801187a:	f04f 0000 	mov.w	r0, #0
 801187e:	f04f 0100 	mov.w	r1, #0
 8011882:	0fd0      	lsrs	r0, r2, #31
 8011884:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011888:	17d9      	asrs	r1, r3, #31
 801188a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801188e:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8011892:	4603      	mov	r3, r0
 8011894:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011896:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801189a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2bf2      	cmp	r3, #242	; 0xf2
 80118a2:	d10e      	bne.n	80118c2 <arm_softmax_s8+0x3d7a>
 80118a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118a8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118b2:	d106      	bne.n	80118c2 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 80118b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118b8:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 80118bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80118c0:	6013      	str	r3, [r2, #0]
    return result;
 80118c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118c6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80118ca:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80118cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118d0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	ea02 0003 	and.w	r0, r2, r3
 80118da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118de:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	43da      	mvns	r2, r3
 80118e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118ea:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	ea02 0103 	and.w	r1, r2, r3
 80118f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118f8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80118fc:	ea80 0301 	eor.w	r3, r0, r1
 8011900:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8011902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011906:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d102      	bne.n	8011916 <arm_softmax_s8+0x3dce>
 8011910:	f04f 32ff 	mov.w	r2, #4294967295
 8011914:	e000      	b.n	8011918 <arm_softmax_s8+0x3dd0>
 8011916:	2200      	movs	r2, #0
 8011918:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801191c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011920:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8011922:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011926:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011930:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011934:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	43da      	mvns	r2, r3
 801193c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011940:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4013      	ands	r3, r2
 8011948:	4059      	eors	r1, r3
 801194a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801194e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8011952:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8011956:	6013      	str	r3, [r2, #0]
 8011958:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801195c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011960:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8011962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011966:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801196a:	2300      	movs	r3, #0
 801196c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801196e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011972:	f04f 0300 	mov.w	r3, #0
 8011976:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 801197a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801197e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011982:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	0fdb      	lsrs	r3, r3, #31
 801198a:	b2da      	uxtb	r2, r3
 801198c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011990:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	0fdb      	lsrs	r3, r3, #31
 8011998:	b2db      	uxtb	r3, r3
 801199a:	4053      	eors	r3, r2
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d010      	beq.n	80119c4 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 80119a2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	2100      	movs	r1, #0
 80119ac:	f1d2 0001 	rsbs	r0, r2, #1
 80119b0:	6138      	str	r0, [r7, #16]
 80119b2:	eb61 0303 	sbc.w	r3, r1, r3
 80119b6:	617b      	str	r3, [r7, #20]
 80119b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80119bc:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80119c0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80119c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119c8:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	17da      	asrs	r2, r3, #31
 80119d0:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80119d4:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 80119d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119dc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	17da      	asrs	r2, r3, #31
 80119e4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80119e8:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 80119ec:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 80119f0:	460b      	mov	r3, r1
 80119f2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80119f6:	fb02 f203 	mul.w	r2, r2, r3
 80119fa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80119fe:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8011a02:	4601      	mov	r1, r0
 8011a04:	fb01 f303 	mul.w	r3, r1, r3
 8011a08:	4413      	add	r3, r2
 8011a0a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8011a0e:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8011a12:	fba2 1201 	umull	r1, r2, r2, r1
 8011a16:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8011a1a:	460a      	mov	r2, r1
 8011a1c:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8011a20:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8011a24:	4413      	add	r3, r2
 8011a26:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8011a2a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8011a36:	1851      	adds	r1, r2, r1
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8011a3e:	414b      	adcs	r3, r1
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011a46:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8011a4a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011a4e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	da08      	bge.n	8011a6c <arm_softmax_s8+0x3f24>
 8011a5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a5e:	1851      	adds	r1, r2, r1
 8011a60:	6039      	str	r1, [r7, #0]
 8011a62:	f143 0300 	adc.w	r3, r3, #0
 8011a66:	607b      	str	r3, [r7, #4]
 8011a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a6c:	f04f 0000 	mov.w	r0, #0
 8011a70:	f04f 0100 	mov.w	r1, #0
 8011a74:	0fd0      	lsrs	r0, r2, #31
 8011a76:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011a7a:	17d9      	asrs	r1, r3, #31
 8011a7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a80:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8011a84:	4603      	mov	r3, r0
 8011a86:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011a88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a8c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8011a90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a94:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011a98:	6812      	ldr	r2, [r2, #0]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d10e      	bne.n	8011abe <arm_softmax_s8+0x3f76>
 8011aa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011aa4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011aae:	d106      	bne.n	8011abe <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8011ab0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ab4:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8011ab8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011abc:	6013      	str	r3, [r2, #0]
    return result;
 8011abe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ac2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011acc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ad6:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8011ada:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8011ade:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011ae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ae4:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8011ae8:	2300      	movs	r3, #0
 8011aea:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011aec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011af0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011af4:	2201      	movs	r2, #1
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	fa02 f103 	lsl.w	r1, r2, r3
 8011afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b00:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8011b04:	1e4b      	subs	r3, r1, #1
 8011b06:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8011b08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b0c:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8011b10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b14:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8011b18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b1c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011b20:	6812      	ldr	r2, [r2, #0]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4013      	ands	r3, r2
 8011b26:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8011b28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b2c:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8011b30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b34:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8011b38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b3c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011b40:	6812      	ldr	r2, [r2, #0]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	fa42 f303 	asr.w	r3, r2, r3
 8011b48:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8011b4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b4e:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8011b52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b56:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	105b      	asrs	r3, r3, #1
 8011b5e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8011b60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b64:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	da0a      	bge.n	8011b84 <arm_softmax_s8+0x403c>
        threshold++;
 8011b6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b72:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8011b76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b7a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	3301      	adds	r3, #1
 8011b82:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8011b84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b88:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8011b8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b90:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011b94:	6812      	ldr	r2, [r2, #0]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	dd0a      	ble.n	8011bb2 <arm_softmax_s8+0x406a>
        result++;
 8011b9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ba0:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8011ba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ba8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	6013      	str	r3, [r2, #0]
    return result;
 8011bb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bb6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011bba:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8011bbc:	3b80      	subs	r3, #128	; 0x80
 8011bbe:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8011bc2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8011bc6:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8011bca:	db09      	blt.n	8011be0 <arm_softmax_s8+0x4098>
 8011bcc:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8011bd0:	2b7e      	cmp	r3, #126	; 0x7e
 8011bd2:	dc03      	bgt.n	8011bdc <arm_softmax_s8+0x4094>
 8011bd4:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8011bd8:	b259      	sxtb	r1, r3
 8011bda:	e003      	b.n	8011be4 <arm_softmax_s8+0x409c>
 8011bdc:	217f      	movs	r1, #127	; 0x7f
 8011bde:	e001      	b.n	8011be4 <arm_softmax_s8+0x409c>
 8011be0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8011be4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8011be8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8011bec:	441a      	add	r2, r3
 8011bee:	460b      	mov	r3, r1
 8011bf0:	7013      	strb	r3, [r2, #0]
 8011bf2:	e006      	b.n	8011c02 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8011bf4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8011bf8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8011bfc:	441a      	add	r2, r3
 8011bfe:	2380      	movs	r3, #128	; 0x80
 8011c00:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8011c02:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8011c06:	3301      	adds	r3, #1
 8011c08:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8011c0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c10:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011c14:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	f6fe aa71 	blt.w	8010102 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8011c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c24:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011c28:	6819      	ldr	r1, [r3, #0]
 8011c2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c2e:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8011c32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c36:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	440b      	add	r3, r1
 8011c3e:	6013      	str	r3, [r2, #0]
        output += row_size;
 8011c40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c44:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8011c4e:	4413      	add	r3, r2
 8011c50:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8011c54:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8011c58:	3301      	adds	r3, #1
 8011c5a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8011c5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c62:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8011c66:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	f6fb af93 	blt.w	800db98 <arm_softmax_s8+0x50>
    }

#endif
}
 8011c72:	bf00      	nop
 8011c74:	bf00      	nop
 8011c76:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop

08011c84 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8011c8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8011c92:	f006 f9fd 	bl	8018090 <log10f>
 8011c96:	eef0 7a40 	vmov.f32	s15, s0
 8011c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c9e:	3708      	adds	r7, #8
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8011ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	ed87 0b00 	vstr	d0, [r7]
 8011cae:	683c      	ldr	r4, [r7, #0]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	461e      	mov	r6, r3
 8011cba:	f04f 32ff 	mov.w	r2, #4294967295
 8011cbe:	4b10      	ldr	r3, [pc, #64]	; (8011d00 <_ZSt5isinfd+0x5c>)
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	4629      	mov	r1, r5
 8011cc4:	f7ee ff3c 	bl	8000b40 <__aeabi_dcmpun>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d10b      	bne.n	8011ce6 <_ZSt5isinfd+0x42>
 8011cce:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd2:	4b0b      	ldr	r3, [pc, #44]	; (8011d00 <_ZSt5isinfd+0x5c>)
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	f7ee ff14 	bl	8000b04 <__aeabi_dcmple>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <_ZSt5isinfd+0x42>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	461e      	mov	r6, r3
 8011ce6:	b2f3      	uxtb	r3, r6
 8011ce8:	f083 0301 	eor.w	r3, r3, #1
 8011cec:	b2db      	uxtb	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	bf14      	ite	ne
 8011cf2:	2301      	movne	r3, #1
 8011cf4:	2300      	moveq	r3, #0
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d00:	7fefffff 	.word	0x7fefffff

08011d04 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8011d04:	b480      	push	{r7}
 8011d06:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8011d14:	b5b0      	push	{r4, r5, r7, lr}
 8011d16:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8011d18:	f7f2 fcc8 	bl	80046ac <HAL_GetTick>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011d22:	fb02 f303 	mul.w	r3, r2, r3
 8011d26:	2200      	movs	r2, #0
 8011d28:	461c      	mov	r4, r3
 8011d2a:	4615      	mov	r5, r2
 8011d2c:	4622      	mov	r2, r4
 8011d2e:	462b      	mov	r3, r5
}
 8011d30:	4610      	mov	r0, r2
 8011d32:	4619      	mov	r1, r3
 8011d34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011d38 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8011d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3c:	b08c      	sub	sp, #48	; 0x30
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8011d44:	466b      	mov	r3, sp
 8011d46:	4698      	mov	r8, r3
    float n = f;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8011d4c:	4b7e      	ldr	r3, [pc, #504]	; (8011f48 <_Z15ei_printf_floatf+0x210>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	1e5e      	subs	r6, r3, #1
 8011d52:	623e      	str	r6, [r7, #32]
 8011d54:	4633      	mov	r3, r6
 8011d56:	3301      	adds	r3, #1
 8011d58:	2200      	movs	r2, #0
 8011d5a:	461c      	mov	r4, r3
 8011d5c:	4615      	mov	r5, r2
 8011d5e:	f04f 0200 	mov.w	r2, #0
 8011d62:	f04f 0300 	mov.w	r3, #0
 8011d66:	00eb      	lsls	r3, r5, #3
 8011d68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011d6c:	00e2      	lsls	r2, r4, #3
 8011d6e:	4633      	mov	r3, r6
 8011d70:	3301      	adds	r3, #1
 8011d72:	2200      	movs	r2, #0
 8011d74:	4618      	mov	r0, r3
 8011d76:	4611      	mov	r1, r2
 8011d78:	f04f 0200 	mov.w	r2, #0
 8011d7c:	f04f 0300 	mov.w	r3, #0
 8011d80:	00cb      	lsls	r3, r1, #3
 8011d82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011d86:	00c2      	lsls	r2, r0, #3
 8011d88:	4633      	mov	r3, r6
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	3307      	adds	r3, #7
 8011d8e:	08db      	lsrs	r3, r3, #3
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	ebad 0d03 	sub.w	sp, sp, r3
 8011d96:	466b      	mov	r3, sp
 8011d98:	3300      	adds	r3, #0
 8011d9a:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8011d9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da8:	d106      	bne.n	8011db8 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	4967      	ldr	r1, [pc, #412]	; (8011f4c <_Z15ei_printf_floatf+0x214>)
 8011dae:	461a      	mov	r2, r3
 8011db0:	460b      	mov	r3, r1
 8011db2:	881b      	ldrh	r3, [r3, #0]
 8011db4:	8013      	strh	r3, [r2, #0]
 8011db6:	e0b6      	b.n	8011f26 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8011dbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc8:	bf4c      	ite	mi
 8011dca:	2301      	movmi	r3, #1
 8011dcc:	2300      	movpl	r3, #0
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d005      	beq.n	8011de4 <_Z15ei_printf_floatf+0xac>
            n = -n;
 8011dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011ddc:	eef1 7a67 	vneg.f32	s15, s15
 8011de0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8011de4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8011de8:	f7ff ff4c 	bl	8011c84 <_ZSt5log10f>
 8011dec:	eef0 7a40 	vmov.f32	s15, s0
 8011df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011df4:	ee17 3a90 	vmov	r3, s15
 8011df8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8011dfa:	69bb      	ldr	r3, [r7, #24]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d004      	beq.n	8011e0a <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	1c5a      	adds	r2, r3, #1
 8011e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e06:	222d      	movs	r2, #45	; 0x2d
 8011e08:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8011e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	dc01      	bgt.n	8011e14 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8011e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e16:	f7ee fba1 	bl	800055c <__aeabi_f2d>
 8011e1a:	4b4d      	ldr	r3, [pc, #308]	; (8011f50 <_Z15ei_printf_floatf+0x218>)
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	2401      	movs	r4, #1
 8011e22:	f7ee fe83 	bl	8000b2c <__aeabi_dcmpgt>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d101      	bne.n	8011e30 <_Z15ei_printf_floatf+0xf8>
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	461c      	mov	r4, r3
 8011e30:	b2e3      	uxtb	r3, r4
 8011e32:	f083 0301 	eor.w	r3, r3, #1
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d002      	beq.n	8011e42 <_Z15ei_printf_floatf+0x10a>
 8011e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	db6e      	blt.n	8011f20 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8011e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e44:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8011f40 <_Z15ei_printf_floatf+0x208>
 8011e48:	f000 f89f 	bl	8011f8a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8011e4c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8011e50:	f04f 0200 	mov.w	r2, #0
 8011e54:	f04f 0300 	mov.w	r3, #0
 8011e58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011e5c:	f7ee fe66 	bl	8000b2c <__aeabi_dcmpgt>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d00b      	beq.n	8011e7e <_Z15ei_printf_floatf+0x146>
 8011e66:	ed97 0b04 	vldr	d0, [r7, #16]
 8011e6a:	f7ff ff1b 	bl	8011ca4 <_ZSt5isinfd>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	f083 0301 	eor.w	r3, r3, #1
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <_Z15ei_printf_floatf+0x146>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	e000      	b.n	8011e80 <_Z15ei_printf_floatf+0x148>
 8011e7e:	2300      	movs	r3, #0
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d03a      	beq.n	8011efa <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8011e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e86:	f7ee fb69 	bl	800055c <__aeabi_f2d>
 8011e8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011e8e:	f7ee fce7 	bl	8000860 <__aeabi_ddiv>
 8011e92:	4602      	mov	r2, r0
 8011e94:	460b      	mov	r3, r1
 8011e96:	ec43 2b17 	vmov	d7, r2, r3
 8011e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8011e9e:	eef0 0a67 	vmov.f32	s1, s15
 8011ea2:	f005 ff2d 	bl	8017d00 <floor>
 8011ea6:	ec53 2b10 	vmov	r2, r3, d0
 8011eaa:	4610      	mov	r0, r2
 8011eac:	4619      	mov	r1, r3
 8011eae:	f7ee fe5d 	bl	8000b6c <__aeabi_d2iz>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8011eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eb8:	f7ee fb50 	bl	800055c <__aeabi_f2d>
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f7ee fb39 	bl	8000538 <__aeabi_i2d>
 8011ec6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011eca:	f7ee fb9f 	bl	800060c <__aeabi_dmul>
 8011ece:	4602      	mov	r2, r0
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	f7ee f9e1 	bl	800029c <__aeabi_dsub>
 8011eda:	4602      	mov	r2, r0
 8011edc:	460b      	mov	r3, r1
 8011ede:	4610      	mov	r0, r2
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	f7ee fe8b 	bl	8000bfc <__aeabi_d2f>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	b2da      	uxtb	r2, r3
 8011eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef0:	1c59      	adds	r1, r3, #1
 8011ef2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011ef4:	3230      	adds	r2, #48	; 0x30
 8011ef6:	b2d2      	uxtb	r2, r2
 8011ef8:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8011efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10b      	bne.n	8011f18 <_Z15ei_printf_floatf+0x1e0>
 8011f00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0c:	dd04      	ble.n	8011f18 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8011f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f10:	1c5a      	adds	r2, r3, #1
 8011f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011f14:	222e      	movs	r2, #46	; 0x2e
 8011f16:	701a      	strb	r2, [r3, #0]
            m--;
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	3b01      	subs	r3, #1
 8011f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8011f1e:	e779      	b.n	8011e14 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8011f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f22:	2200      	movs	r2, #0
 8011f24:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8011f26:	69f9      	ldr	r1, [r7, #28]
 8011f28:	480a      	ldr	r0, [pc, #40]	; (8011f54 <_Z15ei_printf_floatf+0x21c>)
 8011f2a:	f7f1 f86b 	bl	8003004 <_Z9ei_printfPKcz>
 8011f2e:	46c5      	mov	sp, r8
}
 8011f30:	bf00      	nop
 8011f32:	3730      	adds	r7, #48	; 0x30
 8011f34:	46bd      	mov	sp, r7
 8011f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f3a:	bf00      	nop
 8011f3c:	f3af 8000 	nop.w
 8011f40:	00000000 	.word	0x00000000
 8011f44:	40240000 	.word	0x40240000
 8011f48:	200000e8 	.word	0x200000e8
 8011f4c:	0801b290 	.word	0x0801b290
 8011f50:	200000e0 	.word	0x200000e0
 8011f54:	0801b294 	.word	0x0801b294

08011f58 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8011f62:	6839      	ldr	r1, [r7, #0]
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f007 f9df 	bl	8019328 <calloc>
 8011f6a:	4603      	mov	r3, r0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
    free(ptr);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f007 fa23 	bl	80193c8 <free>
}
 8011f82:	bf00      	nop
 8011f84:	3708      	adds	r7, #8
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b084      	sub	sp, #16
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	ed87 0b02 	vstr	d0, [r7, #8]
 8011f94:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7ee face 	bl	8000538 <__aeabi_i2d>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	ec43 2b11 	vmov	d1, r2, r3
 8011fa4:	ed97 0b02 	vldr	d0, [r7, #8]
 8011fa8:	f005 ffcc 	bl	8017f44 <pow>
 8011fac:	eeb0 7a40 	vmov.f32	s14, s0
 8011fb0:	eef0 7a60 	vmov.f32	s15, s1
    }
 8011fb4:	eeb0 0a47 	vmov.f32	s0, s14
 8011fb8:	eef0 0a67 	vmov.f32	s1, s15
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
	...

08011fc4 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	4603      	mov	r3, r0
 8011fcc:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8011fce:	79fb      	ldrb	r3, [r7, #7]
 8011fd0:	2b10      	cmp	r3, #16
 8011fd2:	d847      	bhi.n	8012064 <TfLiteTypeGetName+0xa0>
 8011fd4:	a201      	add	r2, pc, #4	; (adr r2, 8011fdc <TfLiteTypeGetName+0x18>)
 8011fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fda:	bf00      	nop
 8011fdc:	08012021 	.word	0x08012021
 8011fe0:	08012025 	.word	0x08012025
 8011fe4:	0801202d 	.word	0x0801202d
 8011fe8:	08012035 	.word	0x08012035
 8011fec:	0801203d 	.word	0x0801203d
 8011ff0:	08012051 	.word	0x08012051
 8011ff4:	08012045 	.word	0x08012045
 8011ff8:	08012029 	.word	0x08012029
 8011ffc:	08012049 	.word	0x08012049
 8012000:	08012039 	.word	0x08012039
 8012004:	08012055 	.word	0x08012055
 8012008:	08012059 	.word	0x08012059
 801200c:	0801204d 	.word	0x0801204d
 8012010:	08012041 	.word	0x08012041
 8012014:	0801205d 	.word	0x0801205d
 8012018:	08012061 	.word	0x08012061
 801201c:	08012031 	.word	0x08012031
    case kTfLiteNoType:
      return "NOTYPE";
 8012020:	4b14      	ldr	r3, [pc, #80]	; (8012074 <TfLiteTypeGetName+0xb0>)
 8012022:	e020      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8012024:	4b14      	ldr	r3, [pc, #80]	; (8012078 <TfLiteTypeGetName+0xb4>)
 8012026:	e01e      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8012028:	4b14      	ldr	r3, [pc, #80]	; (801207c <TfLiteTypeGetName+0xb8>)
 801202a:	e01c      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801202c:	4b14      	ldr	r3, [pc, #80]	; (8012080 <TfLiteTypeGetName+0xbc>)
 801202e:	e01a      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8012030:	4b14      	ldr	r3, [pc, #80]	; (8012084 <TfLiteTypeGetName+0xc0>)
 8012032:	e018      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8012034:	4b14      	ldr	r3, [pc, #80]	; (8012088 <TfLiteTypeGetName+0xc4>)
 8012036:	e016      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8012038:	4b14      	ldr	r3, [pc, #80]	; (801208c <TfLiteTypeGetName+0xc8>)
 801203a:	e014      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801203c:	4b14      	ldr	r3, [pc, #80]	; (8012090 <TfLiteTypeGetName+0xcc>)
 801203e:	e012      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8012040:	4b14      	ldr	r3, [pc, #80]	; (8012094 <TfLiteTypeGetName+0xd0>)
 8012042:	e010      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8012044:	4b14      	ldr	r3, [pc, #80]	; (8012098 <TfLiteTypeGetName+0xd4>)
 8012046:	e00e      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8012048:	4b14      	ldr	r3, [pc, #80]	; (801209c <TfLiteTypeGetName+0xd8>)
 801204a:	e00c      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801204c:	4b14      	ldr	r3, [pc, #80]	; (80120a0 <TfLiteTypeGetName+0xdc>)
 801204e:	e00a      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8012050:	4b14      	ldr	r3, [pc, #80]	; (80120a4 <TfLiteTypeGetName+0xe0>)
 8012052:	e008      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8012054:	4b14      	ldr	r3, [pc, #80]	; (80120a8 <TfLiteTypeGetName+0xe4>)
 8012056:	e006      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8012058:	4b14      	ldr	r3, [pc, #80]	; (80120ac <TfLiteTypeGetName+0xe8>)
 801205a:	e004      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801205c:	4b14      	ldr	r3, [pc, #80]	; (80120b0 <TfLiteTypeGetName+0xec>)
 801205e:	e002      	b.n	8012066 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8012060:	4b14      	ldr	r3, [pc, #80]	; (80120b4 <TfLiteTypeGetName+0xf0>)
 8012062:	e000      	b.n	8012066 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8012064:	4b14      	ldr	r3, [pc, #80]	; (80120b8 <TfLiteTypeGetName+0xf4>)
}
 8012066:	4618      	mov	r0, r3
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	0801b298 	.word	0x0801b298
 8012078:	0801b2a0 	.word	0x0801b2a0
 801207c:	0801b2a8 	.word	0x0801b2a8
 8012080:	0801b2b0 	.word	0x0801b2b0
 8012084:	0801b2b8 	.word	0x0801b2b8
 8012088:	0801b2c0 	.word	0x0801b2c0
 801208c:	0801b2c8 	.word	0x0801b2c8
 8012090:	0801b2d0 	.word	0x0801b2d0
 8012094:	0801b2d8 	.word	0x0801b2d8
 8012098:	0801b2e0 	.word	0x0801b2e0
 801209c:	0801b2e8 	.word	0x0801b2e8
 80120a0:	0801b2f4 	.word	0x0801b2f4
 80120a4:	0801b300 	.word	0x0801b300
 80120a8:	0801b308 	.word	0x0801b308
 80120ac:	0801b310 	.word	0x0801b310
 80120b0:	0801b318 	.word	0x0801b318
 80120b4:	0801b324 	.word	0x0801b324
 80120b8:	0801b32c 	.word	0x0801b32c

080120bc <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80120bc:	b480      	push	{r7}
 80120be:	af00      	add	r7, sp, #0
 80120c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80120c4:	4618      	mov	r0, r3
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
	...

080120d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80120d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120d4:	b088      	sub	sp, #32
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80120e0:	f04f 0200 	mov.w	r2, #0
 80120e4:	f04f 0300 	mov.w	r3, #0
 80120e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80120ec:	f7ee fcf6 	bl	8000adc <__aeabi_dcmpeq>
 80120f0:	4603      	mov	r3, r0
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d006      	beq.n	8012104 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2200      	movs	r2, #0
 80120fa:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2200      	movs	r2, #0
 8012100:	601a      	str	r2, [r3, #0]
    return;
 8012102:	e068      	b.n	80121d6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8012104:	6838      	ldr	r0, [r7, #0]
 8012106:	ed97 0b02 	vldr	d0, [r7, #8]
 801210a:	f005 fe79 	bl	8017e00 <frexp>
 801210e:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8012112:	f04f 0200 	mov.w	r2, #0
 8012116:	4b32      	ldr	r3, [pc, #200]	; (80121e0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8012118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801211c:	f7ee fa76 	bl	800060c <__aeabi_dmul>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	ec43 2b17 	vmov	d7, r2, r3
 8012128:	eeb0 0a47 	vmov.f32	s0, s14
 801212c:	eef0 0a67 	vmov.f32	s1, s15
 8012130:	f000 f962 	bl	80123f8 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8012134:	ec53 2b10 	vmov	r2, r3, d0
 8012138:	4610      	mov	r0, r2
 801213a:	4619      	mov	r1, r3
 801213c:	f7ee fe16 	bl	8000d6c <__aeabi_d2lz>
 8012140:	4602      	mov	r2, r0
 8012142:	460b      	mov	r3, r1
 8012144:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8012148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801214c:	4925      	ldr	r1, [pc, #148]	; (80121e4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801214e:	428a      	cmp	r2, r1
 8012150:	f173 0300 	sbcs.w	r3, r3, #0
 8012154:	db01      	blt.n	801215a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8012156:	f007 f8c1 	bl	80192dc <abort>
  if (q_fixed == (1ll << 31)) {
 801215a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801215e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8012162:	430b      	orrs	r3, r1
 8012164:	d118      	bne.n	8012198 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8012166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801216a:	0fd9      	lsrs	r1, r3, #31
 801216c:	2000      	movs	r0, #0
 801216e:	468a      	mov	sl, r1
 8012170:	4683      	mov	fp, r0
 8012172:	eb1a 0402 	adds.w	r4, sl, r2
 8012176:	eb4b 0503 	adc.w	r5, fp, r3
 801217a:	f04f 0200 	mov.w	r2, #0
 801217e:	f04f 0300 	mov.w	r3, #0
 8012182:	0862      	lsrs	r2, r4, #1
 8012184:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8012188:	106b      	asrs	r3, r5, #1
 801218a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	1c5a      	adds	r2, r3, #1
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8012198:	f7ff ff90 	bl	80120bc <_ZNSt14numeric_limitsIlE3maxEv>
 801219c:	4603      	mov	r3, r0
 801219e:	17da      	asrs	r2, r3, #31
 80121a0:	4698      	mov	r8, r3
 80121a2:	4691      	mov	r9, r2
 80121a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80121a8:	4590      	cmp	r8, r2
 80121aa:	eb79 0303 	sbcs.w	r3, r9, r3
 80121ae:	da01      	bge.n	80121b4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 80121b0:	f007 f894 	bl	80192dc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f113 0f1f 	cmn.w	r3, #31
 80121bc:	da08      	bge.n	80121d0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2200      	movs	r2, #0
 80121c2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80121c4:	f04f 0200 	mov.w	r2, #0
 80121c8:	f04f 0300 	mov.w	r3, #0
 80121cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80121d0:	69ba      	ldr	r2, [r7, #24]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	601a      	str	r2, [r3, #0]
}
 80121d6:	3720      	adds	r7, #32
 80121d8:	46bd      	mov	sp, r7
 80121da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80121de:	bf00      	nop
 80121e0:	41e00000 	.word	0x41e00000
 80121e4:	80000001 	.word	0x80000001

080121e8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80121f6:	f04f 0200 	mov.w	r2, #0
 80121fa:	4b0d      	ldr	r3, [pc, #52]	; (8012230 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 80121fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012200:	f7ee fc94 	bl	8000b2c <__aeabi_dcmpgt>
 8012204:	4603      	mov	r3, r0
 8012206:	2b00      	cmp	r3, #0
 8012208:	d101      	bne.n	801220e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801220a:	f007 f867 	bl	80192dc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801220e:	6839      	ldr	r1, [r7, #0]
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	ed97 0b02 	vldr	d0, [r7, #8]
 8012216:	f7ff ff5b 	bl	80120d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	da01      	bge.n	8012226 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8012222:	f007 f85b 	bl	80192dc <abort>
}
 8012226:	bf00      	nop
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	3ff00000 	.word	0x3ff00000

08012234 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224a:	f7ee fc51 	bl	8000af0 <__aeabi_dcmplt>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d001      	beq.n	8012258 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	e000      	b.n	801225a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8012258:	687b      	ldr	r3, [r7, #4]
    }
 801225a:	4618      	mov	r0, r3
 801225c:	3708      	adds	r7, #8
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	0000      	movs	r0, r0
 8012264:	0000      	movs	r0, r0
	...

08012268 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8012268:	b5b0      	push	{r4, r5, r7, lr}
 801226a:	b08e      	sub	sp, #56	; 0x38
 801226c:	af00      	add	r7, sp, #0
 801226e:	ed87 0b06 	vstr	d0, [r7, #24]
 8012272:	ed87 1b04 	vstr	d1, [r7, #16]
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801227c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012280:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012284:	f7ee f9c2 	bl	800060c <__aeabi_dmul>
 8012288:	4602      	mov	r2, r0
 801228a:	460b      	mov	r3, r1
 801228c:	4614      	mov	r4, r2
 801228e:	461d      	mov	r5, r3
 8012290:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	fa22 f303 	lsr.w	r3, r2, r3
 801229a:	4618      	mov	r0, r3
 801229c:	f7ee f94c 	bl	8000538 <__aeabi_i2d>
 80122a0:	4602      	mov	r2, r0
 80122a2:	460b      	mov	r3, r1
 80122a4:	4620      	mov	r0, r4
 80122a6:	4629      	mov	r1, r5
 80122a8:	f7ee f9b0 	bl	800060c <__aeabi_dmul>
 80122ac:	4602      	mov	r2, r0
 80122ae:	460b      	mov	r3, r1
 80122b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80122b4:	a30e      	add	r3, pc, #56	; (adr r3, 80122f0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80122b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80122be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80122c2:	f107 0320 	add.w	r3, r7, #32
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7ff ffb3 	bl	8012234 <_ZSt3minIdERKT_S2_S2_>
 80122ce:	4603      	mov	r3, r0
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	68b8      	ldr	r0, [r7, #8]
 80122dc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80122e0:	f7ff ff82 	bl	80121e8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80122e4:	bf00      	nop
 80122e6:	3738      	adds	r7, #56	; 0x38
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bdb0      	pop	{r4, r5, r7, pc}
 80122ec:	f3af 8000 	nop.w
 80122f0:	ffc00000 	.word	0xffc00000
 80122f4:	41dfffff 	.word	0x41dfffff

080122f8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80122f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122fc:	b087      	sub	sp, #28
 80122fe:	af00      	add	r7, sp, #0
 8012300:	60f8      	str	r0, [r7, #12]
 8012302:	60b9      	str	r1, [r7, #8]
 8012304:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8012306:	2201      	movs	r2, #1
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	fa02 f303 	lsl.w	r3, r2, r3
 801230e:	3b01      	subs	r3, #1
 8012310:	4618      	mov	r0, r3
 8012312:	f7ee f911 	bl	8000538 <__aeabi_i2d>
 8012316:	4682      	mov	sl, r0
 8012318:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	1ad1      	subs	r1, r2, r3
 8012320:	f04f 0201 	mov.w	r2, #1
 8012324:	f04f 0300 	mov.w	r3, #0
 8012328:	f1a1 0620 	sub.w	r6, r1, #32
 801232c:	f1c1 0020 	rsb	r0, r1, #32
 8012330:	fa03 f901 	lsl.w	r9, r3, r1
 8012334:	fa02 f606 	lsl.w	r6, r2, r6
 8012338:	ea49 0906 	orr.w	r9, r9, r6
 801233c:	fa22 f000 	lsr.w	r0, r2, r0
 8012340:	ea49 0900 	orr.w	r9, r9, r0
 8012344:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8012348:	4640      	mov	r0, r8
 801234a:	4649      	mov	r1, r9
 801234c:	f7ee f930 	bl	80005b0 <__aeabi_l2d>
 8012350:	4602      	mov	r2, r0
 8012352:	460b      	mov	r3, r1
 8012354:	4650      	mov	r0, sl
 8012356:	4659      	mov	r1, fp
 8012358:	f7ee f958 	bl	800060c <__aeabi_dmul>
 801235c:	4602      	mov	r2, r0
 801235e:	460b      	mov	r3, r1
 8012360:	4690      	mov	r8, r2
 8012362:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8012364:	f04f 0201 	mov.w	r2, #1
 8012368:	f04f 0300 	mov.w	r3, #0
 801236c:	68b9      	ldr	r1, [r7, #8]
 801236e:	f1a1 0620 	sub.w	r6, r1, #32
 8012372:	f1c1 0020 	rsb	r0, r1, #32
 8012376:	fa03 f501 	lsl.w	r5, r3, r1
 801237a:	fa02 f606 	lsl.w	r6, r2, r6
 801237e:	4335      	orrs	r5, r6
 8012380:	fa22 f000 	lsr.w	r0, r2, r0
 8012384:	4305      	orrs	r5, r0
 8012386:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801238a:	4620      	mov	r0, r4
 801238c:	4629      	mov	r1, r5
 801238e:	f7ee f90f 	bl	80005b0 <__aeabi_l2d>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8012396:	4640      	mov	r0, r8
 8012398:	4649      	mov	r1, r9
 801239a:	f7ee fa61 	bl	8000860 <__aeabi_ddiv>
 801239e:	4602      	mov	r2, r0
 80123a0:	460b      	mov	r3, r1
 80123a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 80123a6:	ed97 0b04 	vldr	d0, [r7, #16]
 80123aa:	f005 fca9 	bl	8017d00 <floor>
 80123ae:	ec53 2b10 	vmov	r2, r3, d0
 80123b2:	4610      	mov	r0, r2
 80123b4:	4619      	mov	r1, r3
 80123b6:	f7ee fbd9 	bl	8000b6c <__aeabi_d2iz>
 80123ba:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 80123bc:	4618      	mov	r0, r3
 80123be:	371c      	adds	r7, #28
 80123c0:	46bd      	mov	sp, r7
 80123c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123c6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80123c6:	b480      	push	{r7}
 80123c8:	b083      	sub	sp, #12
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
 80123ce:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	ed93 7a00 	vldr	s14, [r3]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	edd3 7a00 	vldr	s15, [r3]
 80123dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e4:	d501      	bpl.n	80123ea <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	e000      	b.n	80123ec <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80123ea:	687b      	ldr	r3, [r7, #4]
    }
 80123ec:	4618      	mov	r0, r3
 80123ee:	370c      	adds	r7, #12
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	ed87 0b00 	vstr	d0, [r7]
 8012402:	ed97 0b00 	vldr	d0, [r7]
 8012406:	f005 fd33 	bl	8017e70 <round>
 801240a:	eeb0 7a40 	vmov.f32	s14, s0
 801240e:	eef0 7a60 	vmov.f32	s15, s1
 8012412:	eeb0 0a47 	vmov.f32	s0, s14
 8012416:	eef0 0a67 	vmov.f32	s1, s15
 801241a:	3708      	adds	r7, #8
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	ed87 0a01 	vstr	s0, [r7, #4]
 801242a:	ed97 0a01 	vldr	s0, [r7, #4]
 801242e:	f7ef fa09 	bl	8001844 <_ZSt5roundf>
 8012432:	eef0 7a40 	vmov.f32	s15, s0
 8012436:	eeb0 0a67 	vmov.f32	s0, s15
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8012440:	b480      	push	{r7}
 8012442:	af00      	add	r7, sp, #0
 8012444:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8012448:	4618      	mov	r0, r3
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8012452:	b480      	push	{r7}
 8012454:	af00      	add	r7, sp, #0
 8012456:	237f      	movs	r3, #127	; 0x7f
 8012458:	4618      	mov	r0, r3
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr

08012462 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8012462:	b480      	push	{r7}
 8012464:	af00      	add	r7, sp, #0
 8012466:	2300      	movs	r3, #0
 8012468:	4618      	mov	r0, r3
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr

08012472 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8012472:	b480      	push	{r7}
 8012474:	af00      	add	r7, sp, #0
 8012476:	23ff      	movs	r3, #255	; 0xff
 8012478:	4618      	mov	r0, r3
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr
	...

08012484 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8012484:	b480      	push	{r7}
 8012486:	af00      	add	r7, sp, #0
 8012488:	4b02      	ldr	r3, [pc, #8]	; (8012494 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801248a:	4618      	mov	r0, r3
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr
 8012494:	ffff8000 	.word	0xffff8000

08012498 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8012498:	b480      	push	{r7}
 801249a:	af00      	add	r7, sp, #0
 801249c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80124a0:	4618      	mov	r0, r3
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr

080124aa <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 80124aa:	b480      	push	{r7}
 80124ac:	b083      	sub	sp, #12
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	689b      	ldr	r3, [r3, #8]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4618      	mov	r0, r3
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80124c4:	b480      	push	{r7}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	ed87 0b00 	vstr	d0, [r7]
 80124ce:	683a      	ldr	r2, [r7, #0]
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124d6:	ec43 2b17 	vmov	d7, r2, r3
 80124da:	eeb0 0a47 	vmov.f32	s0, s14
 80124de:	eef0 0a67 	vmov.f32	s1, s15
 80124e2:	370c      	adds	r7, #12
 80124e4:	46bd      	mov	sp, r7
 80124e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ea:	4770      	bx	lr

080124ec <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d005      	beq.n	801250a <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	689a      	ldr	r2, [r3, #8]
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	019b      	lsls	r3, r3, #6
 8012506:	4413      	add	r3, r2
 8012508:	e006      	b.n	8012518 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	4798      	blx	r3
 8012514:	4603      	mov	r3, r0
 8012516:	bf00      	nop
  }
}
 8012518:	4618      	mov	r0, r3
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8012520:	b480      	push	{r7}
 8012522:	b087      	sub	sp, #28
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
 801252c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	2b00      	cmp	r3, #0
 8012532:	db0f      	blt.n	8012554 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	429a      	cmp	r2, r3
 801253a:	da0b      	bge.n	8012554 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	009b      	lsls	r3, r3, #2
 8012540:	683a      	ldr	r2, [r7, #0]
 8012542:	4413      	add	r3, r2
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801254e:	d001      	beq.n	8012554 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	e001      	b.n	8012558 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8012554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012558:	4618      	mov	r0, r3
 801255a:	371c      	adds	r7, #28
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr

08012564 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8012564:	b580      	push	{r7, lr}
 8012566:	b086      	sub	sp, #24
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8012574:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801257c:	6879      	ldr	r1, [r7, #4]
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff ffce 	bl	8012520 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8012584:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	da01      	bge.n	8012590 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801258c:	2300      	movs	r3, #0
 801258e:	e005      	b.n	801259c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8012590:	6979      	ldr	r1, [r7, #20]
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f7ff ffaa 	bl	80124ec <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8012598:	4603      	mov	r3, r0
 801259a:	bf00      	nop
}
 801259c:	4618      	mov	r0, r3
 801259e:	3718      	adds	r7, #24
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	68b9      	ldr	r1, [r7, #8]
 80125b4:	68f8      	ldr	r0, [r7, #12]
 80125b6:	f7ff ffd5 	bl	8012564 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 80125ba:	4603      	mov	r3, r0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80125d4:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80125dc:	6879      	ldr	r1, [r7, #4]
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f7ff ff9e 	bl	8012520 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80125e4:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	da01      	bge.n	80125f0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80125ec:	2300      	movs	r3, #0
 80125ee:	e005      	b.n	80125fc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80125f0:	6979      	ldr	r1, [r7, #20]
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f7ff ff7a 	bl	80124ec <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80125f8:	4603      	mov	r3, r0
 80125fa:	bf00      	nop
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3718      	adds	r7, #24
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	68b9      	ldr	r1, [r7, #8]
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f7ff ffc5 	bl	80125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801261a:	4603      	mov	r3, r0
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	0000      	movs	r0, r0
	...

08012628 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8012628:	b5b0      	push	{r4, r5, r7, lr}
 801262a:	b08e      	sub	sp, #56	; 0x38
 801262c:	af02      	add	r7, sp, #8
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
 8012634:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	4618      	mov	r0, r3
 801263c:	f7ed ff8e 	bl	800055c <__aeabi_f2d>
 8012640:	4604      	mov	r4, r0
 8012642:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	4618      	mov	r0, r3
 801264a:	f7ed ff87 	bl	800055c <__aeabi_f2d>
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8012652:	4620      	mov	r0, r4
 8012654:	4629      	mov	r1, r5
 8012656:	f7ed ffd9 	bl	800060c <__aeabi_dmul>
 801265a:	4602      	mov	r2, r0
 801265c:	460b      	mov	r3, r1
 801265e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d04b      	beq.n	8012700 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	4618      	mov	r0, r3
 801266e:	f7ed ff75 	bl	800055c <__aeabi_f2d>
 8012672:	4602      	mov	r2, r0
 8012674:	460b      	mov	r3, r1
 8012676:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801267a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801267e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8012682:	f7ed fe0b 	bl	800029c <__aeabi_dsub>
 8012686:	4602      	mov	r2, r0
 8012688:	460b      	mov	r3, r1
 801268a:	ec43 2b17 	vmov	d7, r2, r3
 801268e:	eeb0 0a47 	vmov.f32	s0, s14
 8012692:	eef0 0a67 	vmov.f32	s1, s15
 8012696:	f7ff ff15 	bl	80124c4 <_ZSt3absd>
 801269a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801269e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7ed ff5a 	bl	800055c <__aeabi_f2d>
 80126a8:	4602      	mov	r2, r0
 80126aa:	460b      	mov	r3, r1
 80126ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80126b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80126b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80126b8:	f7ee f8d2 	bl	8000860 <__aeabi_ddiv>
 80126bc:	4602      	mov	r2, r0
 80126be:	460b      	mov	r3, r1
 80126c0:	4610      	mov	r0, r2
 80126c2:	4619      	mov	r1, r3
 80126c4:	2301      	movs	r3, #1
 80126c6:	461c      	mov	r4, r3
 80126c8:	a318      	add	r3, pc, #96	; (adr r3, 801272c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	f7ee fa19 	bl	8000b04 <__aeabi_dcmple>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d101      	bne.n	80126dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80126d8:	2300      	movs	r3, #0
 80126da:	461c      	mov	r4, r3
 80126dc:	b2e3      	uxtb	r3, r4
 80126de:	f083 0301 	eor.w	r3, r3, #1
 80126e2:	b2db      	uxtb	r3, r3
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d00b      	beq.n	8012700 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	695c      	ldr	r4, [r3, #20]
 80126ec:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80126ee:	9300      	str	r3, [sp, #0]
 80126f0:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80126f4:	4a0b      	ldr	r2, [pc, #44]	; (8012724 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80126f6:	490c      	ldr	r1, [pc, #48]	; (8012728 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80126f8:	68f8      	ldr	r0, [r7, #12]
 80126fa:	47a0      	blx	r4
 80126fc:	2301      	movs	r3, #1
 80126fe:	e009      	b.n	8012714 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8012700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012702:	9300      	str	r3, [sp, #0]
 8012704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	68b9      	ldr	r1, [r7, #8]
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f000 f812 	bl	8012734 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8012710:	4603      	mov	r3, r0
                                          multiplier);
 8012712:	bf00      	nop
}
 8012714:	4618      	mov	r0, r3
 8012716:	3730      	adds	r7, #48	; 0x30
 8012718:	46bd      	mov	sp, r7
 801271a:	bdb0      	pop	{r4, r5, r7, pc}
 801271c:	f3af 8000 	nop.w
 8012720:	0801b5b0 	.word	0x0801b5b0
 8012724:	0801b39c 	.word	0x0801b39c
 8012728:	0801b49c 	.word	0x0801b49c
 801272c:	47ae147b 	.word	0x47ae147b
 8012730:	3f947ae1 	.word	0x3f947ae1

08012734 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8012734:	b590      	push	{r4, r7, lr}
 8012736:	b089      	sub	sp, #36	; 0x24
 8012738:	af02      	add	r7, sp, #8
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
 8012740:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	ed93 7a03 	vldr	s14, [r3, #12]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	edd3 7a03 	vldr	s15, [r3, #12]
 801274e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8012752:	ee17 0a90 	vmov	r0, s15
 8012756:	f7ed ff01 	bl	800055c <__aeabi_f2d>
 801275a:	4602      	mov	r2, r0
 801275c:	460b      	mov	r3, r1
 801275e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8012762:	2301      	movs	r3, #1
 8012764:	461c      	mov	r4, r3
 8012766:	f04f 0200 	mov.w	r2, #0
 801276a:	f04f 0300 	mov.w	r3, #0
 801276e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012772:	f7ee f9d1 	bl	8000b18 <__aeabi_dcmpge>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d101      	bne.n	8012780 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801277c:	2300      	movs	r3, #0
 801277e:	461c      	mov	r4, r3
 8012780:	b2e3      	uxtb	r3, r4
 8012782:	f083 0301 	eor.w	r3, r3, #1
 8012786:	b2db      	uxtb	r3, r3
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00b      	beq.n	80127a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	695c      	ldr	r4, [r3, #20]
 8012790:	4b0f      	ldr	r3, [pc, #60]	; (80127d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8012792:	9300      	str	r3, [sp, #0]
 8012794:	f240 1351 	movw	r3, #337	; 0x151
 8012798:	4a0e      	ldr	r2, [pc, #56]	; (80127d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801279a:	490f      	ldr	r1, [pc, #60]	; (80127d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	47a0      	blx	r4
 80127a0:	2301      	movs	r3, #1
 80127a2:	e010      	b.n	80127c6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ed fed7 	bl	800055c <__aeabi_f2d>
 80127ae:	4602      	mov	r2, r0
 80127b0:	460b      	mov	r3, r1
 80127b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80127b6:	f7ee f853 	bl	8000860 <__aeabi_ddiv>
 80127ba:	4602      	mov	r2, r0
 80127bc:	460b      	mov	r3, r1
 80127be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80127c0:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80127c4:	2300      	movs	r3, #0
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	371c      	adds	r7, #28
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd90      	pop	{r4, r7, pc}
 80127ce:	bf00      	nop
 80127d0:	0801b5d4 	.word	0x0801b5d4
 80127d4:	0801b39c 	.word	0x0801b39c
 80127d8:	0801b49c 	.word	0x0801b49c

080127dc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	ed87 0a00 	vstr	s0, [r7]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80127ee:	ed97 7a00 	vldr	s14, [r7]
 80127f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80127f6:	eeb0 0a66 	vmov.f32	s0, s13
 80127fa:	f7ff fe11 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80127fe:	eef0 7a40 	vmov.f32	s15, s0
 8012802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012806:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801280e:	4413      	add	r3, r2
  };
 8012810:	4618      	mov	r0, r3
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8012818:	b580      	push	{r7, lr}
 801281a:	b08e      	sub	sp, #56	; 0x38
 801281c:	af00      	add	r7, sp, #0
 801281e:	60b9      	str	r1, [r7, #8]
 8012820:	607a      	str	r2, [r7, #4]
 8012822:	603b      	str	r3, [r7, #0]
 8012824:	4603      	mov	r3, r0
 8012826:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	691b      	ldr	r3, [r3, #16]
 8012832:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8012834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012836:	617b      	str	r3, [r7, #20]
 8012838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283a:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801283c:	7bfb      	ldrb	r3, [r7, #15]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d118      	bne.n	8012874 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8012842:	f107 0314 	add.w	r3, r7, #20
 8012846:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801293c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801284a:	4618      	mov	r0, r3
 801284c:	f7ff ffc6 	bl	80127dc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8012850:	4603      	mov	r3, r0
 8012852:	61fb      	str	r3, [r7, #28]
 8012854:	f107 021c 	add.w	r2, r7, #28
 8012858:	f107 0308 	add.w	r3, r7, #8
 801285c:	4611      	mov	r1, r2
 801285e:	4618      	mov	r0, r3
 8012860:	f000 f8d6 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8012864:	4603      	mov	r3, r0
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801286a:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012870:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8012872:	e05f      	b.n	8012934 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8012874:	7bfb      	ldrb	r3, [r7, #15]
 8012876:	2b03      	cmp	r3, #3
 8012878:	d129      	bne.n	80128ce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801287a:	f107 0314 	add.w	r3, r7, #20
 801287e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801293c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8012882:	4618      	mov	r0, r3
 8012884:	f7ff ffaa 	bl	80127dc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8012888:	4603      	mov	r3, r0
 801288a:	623b      	str	r3, [r7, #32]
 801288c:	f107 0220 	add.w	r2, r7, #32
 8012890:	f107 0308 	add.w	r3, r7, #8
 8012894:	4611      	mov	r1, r2
 8012896:	4618      	mov	r0, r3
 8012898:	f000 f8ba 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 801289c:	4603      	mov	r3, r0
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a2:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80128a4:	f107 0314 	add.w	r3, r7, #20
 80128a8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7ff ff95 	bl	80127dc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80128b2:	4603      	mov	r3, r0
 80128b4:	627b      	str	r3, [r7, #36]	; 0x24
 80128b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80128ba:	1d3b      	adds	r3, r7, #4
 80128bc:	4611      	mov	r1, r2
 80128be:	4618      	mov	r0, r3
 80128c0:	f000 f892 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80128c4:	4603      	mov	r3, r0
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128ca:	601a      	str	r2, [r3, #0]
}
 80128cc:	e032      	b.n	8012934 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 80128ce:	7bfb      	ldrb	r3, [r7, #15]
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d129      	bne.n	8012928 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 80128d4:	f107 0314 	add.w	r3, r7, #20
 80128d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80128dc:	4618      	mov	r0, r3
 80128de:	f7ff ff7d 	bl	80127dc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80128e2:	4603      	mov	r3, r0
 80128e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80128e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80128ea:	f107 0308 	add.w	r3, r7, #8
 80128ee:	4611      	mov	r1, r2
 80128f0:	4618      	mov	r0, r3
 80128f2:	f000 f88d 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 80128f6:	4603      	mov	r3, r0
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128fc:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 80128fe:	f107 0314 	add.w	r3, r7, #20
 8012902:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012906:	4618      	mov	r0, r3
 8012908:	f7ff ff68 	bl	80127dc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801290c:	4603      	mov	r3, r0
 801290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012910:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012914:	1d3b      	adds	r3, r7, #4
 8012916:	4611      	mov	r1, r2
 8012918:	4618      	mov	r0, r3
 801291a:	f000 f865 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 801291e:	4603      	mov	r3, r0
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012924:	601a      	str	r2, [r3, #0]
}
 8012926:	e005      	b.n	8012934 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8012928:	68ba      	ldr	r2, [r7, #8]
 801292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801292c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012932:	601a      	str	r2, [r3, #0]
}
 8012934:	bf00      	nop
 8012936:	3738      	adds	r7, #56	; 0x38
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	00000000 	.word	0x00000000

08012940 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8012940:	b590      	push	{r4, r7, lr}
 8012942:	b089      	sub	sp, #36	; 0x24
 8012944:	af02      	add	r7, sp, #8
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	607a      	str	r2, [r7, #4]
 801294a:	603b      	str	r3, [r7, #0]
 801294c:	460b      	mov	r3, r1
 801294e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8012950:	2300      	movs	r3, #0
 8012952:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8012954:	2300      	movs	r3, #0
 8012956:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b03      	cmp	r3, #3
 801295e:	d108      	bne.n	8012972 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8012960:	f7ff fd7f 	bl	8012462 <_ZNSt14numeric_limitsIhE3minEv>
 8012964:	4603      	mov	r3, r0
 8012966:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8012968:	f7ff fd83 	bl	8012472 <_ZNSt14numeric_limitsIhE3maxEv>
 801296c:	4603      	mov	r3, r0
 801296e:	613b      	str	r3, [r7, #16]
 8012970:	e025      	b.n	80129be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	2b09      	cmp	r3, #9
 8012978:	d108      	bne.n	801298c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801297a:	f7ff fd61 	bl	8012440 <_ZNSt14numeric_limitsIaE3minEv>
 801297e:	4603      	mov	r3, r0
 8012980:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8012982:	f7ff fd66 	bl	8012452 <_ZNSt14numeric_limitsIaE3maxEv>
 8012986:	4603      	mov	r3, r0
 8012988:	613b      	str	r3, [r7, #16]
 801298a:	e018      	b.n	80129be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	2b07      	cmp	r3, #7
 8012992:	d108      	bne.n	80129a6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8012994:	f7ff fd76 	bl	8012484 <_ZNSt14numeric_limitsIsE3minEv>
 8012998:	4603      	mov	r3, r0
 801299a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801299c:	f7ff fd7c 	bl	8012498 <_ZNSt14numeric_limitsIsE3maxEv>
 80129a0:	4603      	mov	r3, r0
 80129a2:	613b      	str	r3, [r7, #16]
 80129a4:	e00b      	b.n	80129be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	695c      	ldr	r4, [r3, #20]
 80129aa:	4b0c      	ldr	r3, [pc, #48]	; (80129dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	f44f 73c2 	mov.w	r3, #388	; 0x184
 80129b2:	4a0b      	ldr	r2, [pc, #44]	; (80129e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80129b4:	490b      	ldr	r1, [pc, #44]	; (80129e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	47a0      	blx	r4
 80129ba:	2301      	movs	r3, #1
 80129bc:	e00a      	b.n	80129d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80129be:	7af8      	ldrb	r0, [r7, #11]
 80129c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c2:	9301      	str	r3, [sp, #4]
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	9300      	str	r3, [sp, #0]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	693a      	ldr	r2, [r7, #16]
 80129cc:	6979      	ldr	r1, [r7, #20]
 80129ce:	f7ff ff23 	bl	8012818 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80129d2:	2300      	movs	r3, #0
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	371c      	adds	r7, #28
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd90      	pop	{r4, r7, pc}
 80129dc:	0801b5f0 	.word	0x0801b5f0
 80129e0:	0801b39c 	.word	0x0801b39c
 80129e4:	0801b49c 	.word	0x0801b49c

080129e8 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	da01      	bge.n	8012a02 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	e000      	b.n	8012a04 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8012a02:	687b      	ldr	r3, [r7, #4]
    }
 8012a04:	4618      	mov	r0, r3
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8012a10:	b480      	push	{r7}
 8012a12:	b083      	sub	sp, #12
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	da01      	bge.n	8012a2a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	e000      	b.n	8012a2c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8012a2a:	687b      	ldr	r3, [r7, #4]
    }
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	601a      	str	r2, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	370c      	adds	r7, #12
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	607a      	str	r2, [r7, #4]
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2200      	movs	r2, #0
 8012a64:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	68b9      	ldr	r1, [r7, #8]
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f000 f866 	bl	8012b3c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	4618      	mov	r0, r3
 8012a74:	3710      	adds	r7, #16
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}

08012a7a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8012a7a:	b580      	push	{r7, lr}
 8012a7c:	b082      	sub	sp, #8
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	2b05      	cmp	r3, #5
 8012a88:	dd08      	ble.n	8012a9c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d004      	beq.n	8012a9c <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f005 f910 	bl	8017cbc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8012aa6:	b480      	push	{r7}
 8012aa8:	b083      	sub	sp, #12
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	370c      	adds	r7, #12
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8012abe:	b480      	push	{r7}
 8012ac0:	b083      	sub	sp, #12
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	2b05      	cmp	r3, #5
 8012acc:	dd02      	ble.n	8012ad4 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	e001      	b.n	8012ad8 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	3304      	adds	r3, #4
  }
 8012ad8:	4618      	mov	r0, r3
 8012ada:	370c      	adds	r7, #12
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr

08012ae4 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b05      	cmp	r3, #5
 8012af4:	dd08      	ble.n	8012b08 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d004      	beq.n	8012b08 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f005 f8da 	bl	8017cbc <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	683a      	ldr	r2, [r7, #0]
 8012b0c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	2b05      	cmp	r3, #5
 8012b12:	dd0f      	ble.n	8012b34 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d201      	bcs.n	8012b22 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	e001      	b.n	8012b26 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8012b22:	f04f 33ff 	mov.w	r3, #4294967295
 8012b26:	4618      	mov	r0, r3
 8012b28:	f005 f8db 	bl	8017ce2 <_Znaj>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	461a      	mov	r2, r3
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8012b34:	bf00      	nop
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b086      	sub	sp, #24
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8012b48:	68b9      	ldr	r1, [r7, #8]
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f7ff ffca 	bl	8012ae4 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	f7ff ffb4 	bl	8012abe <_ZN6tflite12RuntimeShape8DimsDataEv>
 8012b56:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	6879      	ldr	r1, [r7, #4]
 8012b60:	6978      	ldr	r0, [r7, #20]
 8012b62:	f006 fc39 	bl	80193d8 <memcpy>
  }
 8012b66:	bf00      	nop
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8012b6e:	b580      	push	{r7, lr}
 8012b70:	b086      	sub	sp, #24
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
 8012b76:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d103      	bne.n	8012b86 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7ff ff5a 	bl	8012a38 <_ZN6tflite12RuntimeShapeC1Ev>
 8012b84:	e00d      	b.n	8012ba2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	689b      	ldr	r3, [r3, #8]
 8012b8a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	3304      	adds	r3, #4
 8012b96:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	6939      	ldr	r1, [r7, #16]
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f7ff ff59 	bl	8012a54 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	3718      	adds	r7, #24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8012baa:	b480      	push	{r7}
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8012bbc:	b480      	push	{r7}
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8012bc4:	ee07 3a90 	vmov	s15, r3
 8012bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8012bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012bd8:	b092      	sub	sp, #72	; 0x48
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	61f8      	str	r0, [r7, #28]
 8012bde:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8012be0:	69fa      	ldr	r2, [r7, #28]
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d107      	bne.n	8012bf8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8012be8:	f7ff ffdf 	bl	8012baa <_ZNSt14numeric_limitsIlE3minEv>
 8012bec:	4602      	mov	r2, r0
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d101      	bne.n	8012bf8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e000      	b.n	8012bfa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8012bfe:	69fb      	ldr	r3, [r7, #28]
 8012c00:	17da      	asrs	r2, r3, #31
 8012c02:	60bb      	str	r3, [r7, #8]
 8012c04:	60fa      	str	r2, [r7, #12]
 8012c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012c0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	17da      	asrs	r2, r3, #31
 8012c12:	603b      	str	r3, [r7, #0]
 8012c14:	607a      	str	r2, [r7, #4]
 8012c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8012c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c22:	fb03 f202 	mul.w	r2, r3, r2
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c2a:	fb01 f303 	mul.w	r3, r1, r3
 8012c2e:	4413      	add	r3, r2
 8012c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c34:	fba1 4502 	umull	r4, r5, r1, r2
 8012c38:	442b      	add	r3, r5
 8012c3a:	461d      	mov	r5, r3
 8012c3c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8012c40:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8012c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	db02      	blt.n	8012c52 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8012c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c50:	e000      	b.n	8012c54 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8012c52:	4b1a      	ldr	r3, [pc, #104]	; (8012cbc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8012c54:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	17da      	asrs	r2, r3, #31
 8012c5a:	4698      	mov	r8, r3
 8012c5c:	4691      	mov	r9, r2
 8012c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012c62:	eb18 0102 	adds.w	r1, r8, r2
 8012c66:	6139      	str	r1, [r7, #16]
 8012c68:	eb49 0303 	adc.w	r3, r9, r3
 8012c6c:	617b      	str	r3, [r7, #20]
 8012c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	da07      	bge.n	8012c86 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8012c76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8012c7e:	f143 0b00 	adc.w	fp, r3, #0
 8012c82:	4652      	mov	r2, sl
 8012c84:	465b      	mov	r3, fp
 8012c86:	f04f 0000 	mov.w	r0, #0
 8012c8a:	f04f 0100 	mov.w	r1, #0
 8012c8e:	0fd0      	lsrs	r0, r2, #31
 8012c90:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012c94:	17d9      	asrs	r1, r3, #31
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8012c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d003      	beq.n	8012cae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8012ca6:	f7ff fa09 	bl	80120bc <_ZNSt14numeric_limitsIlE3maxEv>
 8012caa:	4603      	mov	r3, r0
 8012cac:	e000      	b.n	8012cb0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8012cae:	6a3b      	ldr	r3, [r7, #32]
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3748      	adds	r7, #72	; 0x48
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012cba:	bf00      	nop
 8012cbc:	c0000001 	.word	0xc0000001

08012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	da01      	bge.n	8012cd4 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8012cd0:	f006 fb04 	bl	80192dc <abort>
    TFLITE_DCHECK_LT(i, size_);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	683a      	ldr	r2, [r7, #0]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	db01      	blt.n	8012ce2 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8012cde:	f006 fafd 	bl	80192dc <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b05      	cmp	r3, #5
 8012ce8:	dd06      	ble.n	8012cf8 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	685a      	ldr	r2, [r3, #4]
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4413      	add	r3, r2
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	e004      	b.n	8012d02 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	685b      	ldr	r3, [r3, #4]
  }
 8012d02:	4618      	mov	r0, r3
 8012d04:	3708      	adds	r7, #8
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8012d0a:	b480      	push	{r7}
 8012d0c:	b083      	sub	sp, #12
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2b05      	cmp	r3, #5
 8012d18:	dd02      	ble.n	8012d20 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	e001      	b.n	8012d24 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	3304      	adds	r3, #4
  }
 8012d24:	4618      	mov	r0, r3
 8012d26:	370c      	adds	r7, #12
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr

08012d30 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7ff ffe4 	bl	8012d0a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8012d42:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8012d44:	2300      	movs	r3, #0
 8012d46:	613b      	str	r3, [r7, #16]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	693a      	ldr	r2, [r7, #16]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	da0c      	bge.n	8012d6c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	4413      	add	r3, r2
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	fb02 f303 	mul.w	r3, r2, r3
 8012d62:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	3301      	adds	r3, #1
 8012d68:	613b      	str	r3, [r7, #16]
 8012d6a:	e7ed      	b.n	8012d48 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8012d6c:	697b      	ldr	r3, [r7, #20]
  }
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3718      	adds	r7, #24
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8012d76:	b590      	push	{r4, r7, lr}
 8012d78:	b085      	sub	sp, #20
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
 8012d7e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fe90 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012d86:	4604      	mov	r4, r0
 8012d88:	6838      	ldr	r0, [r7, #0]
 8012d8a:	f7ff fe8c 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	429c      	cmp	r4, r3
 8012d92:	d001      	beq.n	8012d98 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8012d94:	f006 faa2 	bl	80192dc <abort>
  const int dims_count = shape.DimensionsCount();
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f7ff fe84 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012d9e:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8012da0:	2300      	movs	r3, #0
 8012da2:	60fb      	str	r3, [r7, #12]
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	da11      	bge.n	8012dd0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8012dac:	68f9      	ldr	r1, [r7, #12]
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ff ff86 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012db4:	4604      	mov	r4, r0
 8012db6:	68f9      	ldr	r1, [r7, #12]
 8012db8:	6838      	ldr	r0, [r7, #0]
 8012dba:	f7ff ff81 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	429c      	cmp	r4, r3
 8012dc2:	d001      	beq.n	8012dc8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8012dc4:	f006 fa8a 	bl	80192dc <abort>
  for (int i = 0; i < dims_count; ++i) {
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	60fb      	str	r3, [r7, #12]
 8012dce:	e7e9      	b.n	8012da4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f7ff ffad 	bl	8012d30 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8012dd6:	4603      	mov	r3, r0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3714      	adds	r7, #20
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd90      	pop	{r4, r7, pc}

08012de0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012df2:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	dc02      	bgt.n	8012e00 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	425b      	negs	r3, r3
 8012dfe:	e000      	b.n	8012e02 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8012e00:	2300      	movs	r3, #0
 8012e02:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	fa02 f303 	lsl.w	r3, r2, r3
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7ff fee0 	bl	8012bd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012e14:	4603      	mov	r3, r0
 8012e16:	6939      	ldr	r1, [r7, #16]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f000 fb4b 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012e1e:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3718      	adds	r7, #24
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8012e3a:	f006 fa4f 	bl	80192dc <abort>
  TFLITE_DCHECK(node != nullptr);
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d101      	bne.n	8012e48 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8012e44:	f006 fa4a 	bl	80192dc <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	6819      	ldr	r1, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	440b      	add	r3, r1
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	4619      	mov	r1, r3
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	4790      	blx	r2
 8012e5e:	4603      	mov	r3, r0
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3710      	adds	r7, #16
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8012e74:	687a      	ldr	r2, [r7, #4]
 8012e76:	68b9      	ldr	r1, [r7, #8]
 8012e78:	68f8      	ldr	r0, [r7, #12]
 8012e7a:	f7ff ffd5 	bl	8012e28 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012e7e:	4603      	mov	r3, r0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b084      	sub	sp, #16
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d101      	bne.n	8012e9e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8012e9a:	f006 fa1f 	bl	80192dc <abort>
  TFLITE_DCHECK(node != nullptr);
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d101      	bne.n	8012ea8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8012ea4:	f006 fa1a 	bl	80192dc <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	6859      	ldr	r1, [r3, #4]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	440b      	add	r3, r1
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	68f8      	ldr	r0, [r7, #12]
 8012ebc:	4790      	blx	r2
 8012ebe:	4603      	mov	r3, r0
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3710      	adds	r7, #16
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08a      	sub	sp, #40	; 0x28
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012ed6:	6879      	ldr	r1, [r7, #4]
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f7ff ff4c 	bl	8012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012ede:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee6:	6a3b      	ldr	r3, [r7, #32]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	da1d      	bge.n	8012f28 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8012eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8012ef8:	f04f 0300 	mov.w	r3, #0
 8012efc:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8012efe:	edd7 7a07 	vldr	s15, [r7, #28]
 8012f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0a:	d501      	bpl.n	8012f10 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	e000      	b.n	8012f12 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8012f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	683a      	ldr	r2, [r7, #0]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	697a      	ldr	r2, [r7, #20]
 8012f1e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	3301      	adds	r3, #1
 8012f24:	627b      	str	r3, [r7, #36]	; 0x24
 8012f26:	e7dd      	b.n	8012ee4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8012f28:	bf00      	nop
 8012f2a:	3728      	adds	r7, #40	; 0x28
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b08a      	sub	sp, #40	; 0x28
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	60f8      	str	r0, [r7, #12]
 8012f38:	60b9      	str	r1, [r7, #8]
 8012f3a:	607a      	str	r2, [r7, #4]
 8012f3c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012f3e:	6879      	ldr	r1, [r7, #4]
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	f7ff ff18 	bl	8012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012f46:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8012f48:	2300      	movs	r3, #0
 8012f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f4e:	6a3b      	ldr	r3, [r7, #32]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	da2a      	bge.n	8012faa <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8012f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	68ba      	ldr	r2, [r7, #8]
 8012f5a:	4413      	add	r3, r2
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8012f60:	4b14      	ldr	r3, [pc, #80]	; (8012fb4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8012f62:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8012f64:	f04f 0300 	mov.w	r3, #0
 8012f68:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8012f6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8012f6e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8012f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f7a:	dd01      	ble.n	8012f80 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	e009      	b.n	8012f94 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8012f80:	edd7 7a07 	vldr	s15, [r7, #28]
 8012f84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8c:	d501      	bpl.n	8012f92 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	e000      	b.n	8012f94 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8012f92:	69fb      	ldr	r3, [r7, #28]
 8012f94:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8012f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f98:	009b      	lsls	r3, r3, #2
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	693a      	ldr	r2, [r7, #16]
 8012fa0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8012fa8:	e7d0      	b.n	8012f4c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8012faa:	bf00      	nop
 8012fac:	3728      	adds	r7, #40	; 0x28
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	40c00000 	.word	0x40c00000

08012fb8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d101      	bne.n	8012fd0 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8012fcc:	f006 f986 	bl	80192dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd4:	211c      	movs	r1, #28
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	4798      	blx	r3
 8012fda:	4603      	mov	r3, r0
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8012fe4:	b590      	push	{r4, r7, lr}
 8012fe6:	b089      	sub	sp, #36	; 0x24
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	691b      	ldr	r3, [r3, #16]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012ff6:	f006 f971 	bl	80192dc <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	691b      	ldr	r3, [r3, #16]
 8012ffe:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013000:	2200      	movs	r2, #0
 8013002:	6839      	ldr	r1, [r7, #0]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7ff facd 	bl	80125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801300a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d10a      	bne.n	8013028 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	695c      	ldr	r4, [r3, #20]
 8013016:	4b1a      	ldr	r3, [pc, #104]	; (8013080 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	238e      	movs	r3, #142	; 0x8e
 801301c:	4a19      	ldr	r2, [pc, #100]	; (8013084 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801301e:	491a      	ldr	r1, [pc, #104]	; (8013088 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	47a0      	blx	r4
 8013024:	2301      	movs	r3, #1
 8013026:	e027      	b.n	8013078 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013028:	2200      	movs	r2, #0
 801302a:	6839      	ldr	r1, [r7, #0]
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7ff fac9 	bl	80125c4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013032:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d10a      	bne.n	8013050 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	695c      	ldr	r4, [r3, #20]
 801303e:	4b13      	ldr	r3, [pc, #76]	; (801308c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8013040:	9300      	str	r3, [sp, #0]
 8013042:	2390      	movs	r3, #144	; 0x90
 8013044:	4a0f      	ldr	r2, [pc, #60]	; (8013084 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8013046:	4910      	ldr	r1, [pc, #64]	; (8013088 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	47a0      	blx	r4
 801304c:	2301      	movs	r3, #1
 801304e:	e013      	b.n	8013078 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	2b09      	cmp	r3, #9
 8013056:	d105      	bne.n	8013064 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8013058:	697a      	ldr	r2, [r7, #20]
 801305a:	68f9      	ldr	r1, [r7, #12]
 801305c:	6938      	ldr	r0, [r7, #16]
 801305e:	f000 fa9d 	bl	801359c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8013062:	e008      	b.n	8013076 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b03      	cmp	r3, #3
 801306a:	d104      	bne.n	8013076 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801306c:	697a      	ldr	r2, [r7, #20]
 801306e:	68f9      	ldr	r1, [r7, #12]
 8013070:	6938      	ldr	r0, [r7, #16]
 8013072:	f000 fb35 	bl	80136e0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8013076:	2300      	movs	r3, #0
}
 8013078:	4618      	mov	r0, r3
 801307a:	371c      	adds	r7, #28
 801307c:	46bd      	mov	sp, r7
 801307e:	bd90      	pop	{r4, r7, pc}
 8013080:	0801b71c 	.word	0x0801b71c
 8013084:	0801b670 	.word	0x0801b670
 8013088:	0801b704 	.word	0x0801b704
 801308c:	0801b730 	.word	0x0801b730

08013090 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8013090:	b590      	push	{r4, r7, lr}
 8013092:	b0ad      	sub	sp, #180	; 0xb4
 8013094:	af02      	add	r7, sp, #8
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	691b      	ldr	r3, [r3, #16]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d101      	bne.n	80130a6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80130a2:	f006 f91b 	bl	80192dc <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	691b      	ldr	r3, [r3, #16]
 80130aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80130ae:	2200      	movs	r2, #0
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7ff fed8 	bl	8012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80130b8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80130bc:	2200      	movs	r2, #0
 80130be:	6839      	ldr	r1, [r7, #0]
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7ff fee1 	bl	8012e88 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80130c6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80130ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80130ce:	7a1b      	ldrb	r3, [r3, #8]
 80130d0:	2b09      	cmp	r3, #9
 80130d2:	d032      	beq.n	801313a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80130d4:	2b09      	cmp	r3, #9
 80130d6:	f300 808c 	bgt.w	80131f2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d002      	beq.n	80130e4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d059      	beq.n	8013196 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 80130e2:	e086      	b.n	80131f2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 80130e4:	f107 030c 	add.w	r3, r7, #12
 80130e8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80130ec:	4618      	mov	r0, r3
 80130ee:	f001 fe2f 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80130f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80130f6:	f000 fb95 	bl	8013824 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80130fa:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 80130fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013100:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8013104:	4618      	mov	r0, r3
 8013106:	f001 fe23 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801310a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801310e:	f000 fb98 	bl	8013842 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8013112:	4603      	mov	r3, r0
 8013114:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013118:	f107 000c 	add.w	r0, r7, #12
 801311c:	4621      	mov	r1, r4
 801311e:	f7ff fed3 	bl	8012ec8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8013122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fca7 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801312c:	f107 030c 	add.w	r3, r7, #12
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff fca2 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8013136:	2300      	movs	r3, #0
 8013138:	e069      	b.n	801320e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801313a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801313e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8013142:	4618      	mov	r0, r3
 8013144:	f001 fe04 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8013148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801314c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8013150:	4618      	mov	r0, r3
 8013152:	f001 fdfd 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8013156:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801315a:	f000 fb83 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801315e:	4604      	mov	r4, r0
 8013160:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8013164:	f000 fb8d 	bl	8013882 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8013168:	4603      	mov	r3, r0
 801316a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801316e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	4623      	mov	r3, r4
 8013176:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801317a:	f000 fb93 	bl	80138a4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801317e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013182:	4618      	mov	r0, r3
 8013184:	f7ff fc79 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8013188:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fc74 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8013192:	2300      	movs	r3, #0
 8013194:	e03b      	b.n	801320e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8013196:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801319a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801319e:	4618      	mov	r0, r3
 80131a0:	f001 fdd6 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 80131a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131a8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80131ac:	4618      	mov	r0, r3
 80131ae:	f001 fdcf 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80131b2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80131b6:	f000 fbc1 	bl	801393c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80131ba:	4604      	mov	r4, r0
 80131bc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80131c0:	f000 fbcb 	bl	801395a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80131c4:	4603      	mov	r3, r0
 80131c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80131ca:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80131ce:	9300      	str	r3, [sp, #0]
 80131d0:	4623      	mov	r3, r4
 80131d2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80131d6:	f000 fbd1 	bl	801397c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 80131da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff fc4b 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 80131e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7ff fc46 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80131ee:	2300      	movs	r3, #0
 80131f0:	e00d      	b.n	801320e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	695c      	ldr	r4, [r3, #20]
 80131f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80131fa:	7a1b      	ldrb	r3, [r3, #8]
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fe fee1 	bl	8011fc4 <TfLiteTypeGetName>
 8013202:	4603      	mov	r3, r0
 8013204:	461a      	mov	r2, r3
 8013206:	4904      	ldr	r1, [pc, #16]	; (8013218 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801320c:	2301      	movs	r3, #1
    }
  }
}
 801320e:	4618      	mov	r0, r3
 8013210:	37ac      	adds	r7, #172	; 0xac
 8013212:	46bd      	mov	sp, r7
 8013214:	bd90      	pop	{r4, r7, pc}
 8013216:	bf00      	nop
 8013218:	0801b744 	.word	0x0801b744

0801321c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8013230:	f006 f854 	bl	80192dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013238:	2104      	movs	r1, #4
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	4798      	blx	r3
 801323e:	4603      	mov	r3, r0
}
 8013240:	4618      	mov	r0, r3
 8013242:	3710      	adds	r7, #16
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}

08013248 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013248:	b590      	push	{r4, r7, lr}
 801324a:	b087      	sub	sp, #28
 801324c:	af02      	add	r7, sp, #8
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	691b      	ldr	r3, [r3, #16]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801325a:	f006 f83f 	bl	80192dc <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	691b      	ldr	r3, [r3, #16]
 8013262:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013264:	2200      	movs	r2, #0
 8013266:	6839      	ldr	r1, [r7, #0]
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f7ff f99b 	bl	80125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801326e:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d10a      	bne.n	801328c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	695c      	ldr	r4, [r3, #20]
 801327a:	4b20      	ldr	r3, [pc, #128]	; (80132fc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	23cd      	movs	r3, #205	; 0xcd
 8013280:	4a1f      	ldr	r2, [pc, #124]	; (8013300 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8013282:	4920      	ldr	r1, [pc, #128]	; (8013304 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	47a0      	blx	r4
 8013288:	2301      	movs	r3, #1
 801328a:	e033      	b.n	80132f4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	2b09      	cmp	r3, #9
 8013292:	d115      	bne.n	80132c0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801329e:	4618      	mov	r0, r3
 80132a0:	eef0 0a67 	vmov.f32	s1, s15
 80132a4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80132a8:	f000 fbb3 	bl	8013a12 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 80132ac:	4603      	mov	r3, r0
 80132ae:	461a      	mov	r2, r3
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	691b      	ldr	r3, [r3, #16]
 80132b8:	b25a      	sxtb	r2, r3
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	705a      	strb	r2, [r3, #1]
 80132be:	e018      	b.n	80132f2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	2b03      	cmp	r3, #3
 80132c6:	d114      	bne.n	80132f2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 80132d2:	4618      	mov	r0, r3
 80132d4:	eef0 0a67 	vmov.f32	s1, s15
 80132d8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80132dc:	f000 fbe8 	bl	8013ab0 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 80132e0:	4603      	mov	r3, r0
 80132e2:	461a      	mov	r2, r3
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	691b      	ldr	r3, [r3, #16]
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 80132f2:	2300      	movs	r3, #0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3714      	adds	r7, #20
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd90      	pop	{r4, r7, pc}
 80132fc:	0801b71c 	.word	0x0801b71c
 8013300:	0801b670 	.word	0x0801b670
 8013304:	0801b704 	.word	0x0801b704

08013308 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 8013308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801330a:	b0ad      	sub	sp, #180	; 0xb4
 801330c:	af02      	add	r7, sp, #8
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d101      	bne.n	801331e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801331a:	f005 ffdf 	bl	80192dc <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	691b      	ldr	r3, [r3, #16]
 8013322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8013326:	2200      	movs	r2, #0
 8013328:	6839      	ldr	r1, [r7, #0]
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f7ff fd9c 	bl	8012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013330:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8013334:	2200      	movs	r2, #0
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7ff fda5 	bl	8012e88 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801333e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8013342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013346:	7a1b      	ldrb	r3, [r3, #8]
 8013348:	2b09      	cmp	r3, #9
 801334a:	d032      	beq.n	80133b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801334c:	2b09      	cmp	r3, #9
 801334e:	f300 809c 	bgt.w	801348a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8013352:	2b01      	cmp	r3, #1
 8013354:	d002      	beq.n	801335c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8013356:	2b03      	cmp	r3, #3
 8013358:	d062      	beq.n	8013420 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801335a:	e096      	b.n	801348a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801335c:	f107 030c 	add.w	r3, r7, #12
 8013360:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8013364:	4618      	mov	r0, r3
 8013366:	f001 fcf3 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801336a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801336e:	f000 fa59 	bl	8013824 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8013372:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8013374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013378:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801337c:	4618      	mov	r0, r3
 801337e:	f001 fce7 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8013382:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8013386:	f000 fa5c 	bl	8013842 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801338a:	4603      	mov	r3, r0
 801338c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013390:	f107 000c 	add.w	r0, r7, #12
 8013394:	4621      	mov	r1, r4
 8013396:	f7ff fdcb 	bl	8012f30 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801339a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801339e:	4618      	mov	r0, r3
 80133a0:	f7ff fb6b 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 80133a4:	f107 030c 	add.w	r3, r7, #12
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff fb66 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80133ae:	2300      	movs	r3, #0
 80133b0:	e079      	b.n	80134a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80133b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80133b6:	f993 4001 	ldrsb.w	r4, [r3, #1]
 80133ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80133be:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 80133c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80133c6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80133ca:	4618      	mov	r0, r3
 80133cc:	f001 fcc0 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80133d0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80133d4:	f000 fa46 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80133d8:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 80133da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80133de:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80133e2:	4618      	mov	r0, r3
 80133e4:	f001 fcb4 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80133e8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80133ec:	f000 fa49 	bl	8013882 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80133f0:	4603      	mov	r3, r0
 80133f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80133fc:	9300      	str	r3, [sp, #0]
 80133fe:	4633      	mov	r3, r6
 8013400:	4629      	mov	r1, r5
 8013402:	4620      	mov	r0, r4
 8013404:	f000 fba3 	bl	8013b4e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8013408:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff fb34 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 8013412:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013416:	4618      	mov	r0, r3
 8013418:	f7ff fb2f 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801341c:	2300      	movs	r3, #0
 801341e:	e042      	b.n	80134a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8013420:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013424:	78dc      	ldrb	r4, [r3, #3]
 8013426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801342a:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801342c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013430:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8013434:	4618      	mov	r0, r3
 8013436:	f001 fc8b 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801343a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801343e:	f000 fa7d 	bl	801393c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8013442:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8013444:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013448:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801344c:	4618      	mov	r0, r3
 801344e:	f001 fc7f 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8013452:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8013456:	f000 fa80 	bl	801395a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801345a:	4603      	mov	r3, r0
 801345c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8013460:	9301      	str	r3, [sp, #4]
 8013462:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	4633      	mov	r3, r6
 801346a:	4629      	mov	r1, r5
 801346c:	4620      	mov	r0, r4
 801346e:	f000 fbad 	bl	8013bcc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8013472:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff faff 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801347c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013480:	4618      	mov	r0, r3
 8013482:	f7ff fafa 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8013486:	2300      	movs	r3, #0
 8013488:	e00d      	b.n	80134a6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	695c      	ldr	r4, [r3, #20]
 801348e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013492:	7a1b      	ldrb	r3, [r3, #8]
 8013494:	4618      	mov	r0, r3
 8013496:	f7fe fd95 	bl	8011fc4 <TfLiteTypeGetName>
 801349a:	4603      	mov	r3, r0
 801349c:	461a      	mov	r2, r3
 801349e:	4904      	ldr	r1, [pc, #16]	; (80134b0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80134a4:	2301      	movs	r3, #1
    }
  }
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	37ac      	adds	r7, #172	; 0xac
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134ae:	bf00      	nop
 80134b0:	0801b744 	.word	0x0801b744

080134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 80134b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134b6:	b089      	sub	sp, #36	; 0x24
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	2900      	cmp	r1, #0
 80134c2:	da06      	bge.n	80134d2 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 80134c4:	4b31      	ldr	r3, [pc, #196]	; (801358c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 80134c6:	4a32      	ldr	r2, [pc, #200]	; (8013590 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80134c8:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80134cc:	4831      	ldr	r0, [pc, #196]	; (8013594 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80134ce:	f005 ff0d 	bl	80192ec <__assert_func>
  assert(exponent <= 31);
 80134d2:	6839      	ldr	r1, [r7, #0]
 80134d4:	291f      	cmp	r1, #31
 80134d6:	dd06      	ble.n	80134e6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 80134d8:	4b2f      	ldr	r3, [pc, #188]	; (8013598 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 80134da:	4a2d      	ldr	r2, [pc, #180]	; (8013590 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80134dc:	f240 1167 	movw	r1, #359	; 0x167
 80134e0:	482c      	ldr	r0, [pc, #176]	; (8013594 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80134e2:	f005 ff03 	bl	80192ec <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80134e6:	f04f 0001 	mov.w	r0, #1
 80134ea:	f04f 0100 	mov.w	r1, #0
 80134ee:	683c      	ldr	r4, [r7, #0]
 80134f0:	f1a4 0620 	sub.w	r6, r4, #32
 80134f4:	f1c4 0520 	rsb	r5, r4, #32
 80134f8:	fa01 f304 	lsl.w	r3, r1, r4
 80134fc:	fa00 f606 	lsl.w	r6, r0, r6
 8013500:	4333      	orrs	r3, r6
 8013502:	fa20 f505 	lsr.w	r5, r0, r5
 8013506:	432b      	orrs	r3, r5
 8013508:	fa00 f204 	lsl.w	r2, r0, r4
 801350c:	4613      	mov	r3, r2
 801350e:	3b01      	subs	r3, #1
 8013510:	4618      	mov	r0, r3
 8013512:	f000 fb93 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013516:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8013518:	2000      	movs	r0, #0
 801351a:	f000 fb8f 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801351e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8013520:	2001      	movs	r0, #1
 8013522:	f000 fb8b 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013526:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8013528:	69f9      	ldr	r1, [r7, #28]
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f000 fb91 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013530:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8013532:	2101      	movs	r1, #1
 8013534:	69f8      	ldr	r0, [r7, #28]
 8013536:	f000 fb9a 	bl	8013c6e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801353a:	4604      	mov	r4, r0
 801353c:	69b9      	ldr	r1, [r7, #24]
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f000 fba4 	bl	8013c8c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013544:	4603      	mov	r3, r0
 8013546:	6979      	ldr	r1, [r7, #20]
 8013548:	4618      	mov	r0, r3
 801354a:	f000 fb82 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801354e:	4603      	mov	r3, r0
 8013550:	4619      	mov	r1, r3
 8013552:	4620      	mov	r0, r4
 8013554:	f000 fbae 	bl	8013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013558:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801355a:	6839      	ldr	r1, [r7, #0]
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 fb86 	bl	8013c6e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8013562:	4604      	mov	r4, r0
 8013564:	68f9      	ldr	r1, [r7, #12]
 8013566:	6938      	ldr	r0, [r7, #16]
 8013568:	f000 fbb2 	bl	8013cd0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801356c:	4603      	mov	r3, r0
 801356e:	6979      	ldr	r1, [r7, #20]
 8013570:	4618      	mov	r0, r3
 8013572:	f000 fb6e 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013576:	4603      	mov	r3, r0
 8013578:	4619      	mov	r1, r3
 801357a:	4620      	mov	r0, r4
 801357c:	f000 fb9a 	bl	8013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013580:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8013582:	4618      	mov	r0, r3
 8013584:	3724      	adds	r7, #36	; 0x24
 8013586:	46bd      	mov	sp, r7
 8013588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801358a:	bf00      	nop
 801358c:	0801b7b0 	.word	0x0801b7b0
 8013590:	0801b7c0 	.word	0x0801b7c0
 8013594:	0801b81c 	.word	0x0801b81c
 8013598:	0801b8ac 	.word	0x0801b8ac

0801359c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801359c:	b590      	push	{r4, r7, lr}
 801359e:	b099      	sub	sp, #100	; 0x64
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80135a8:	f04f 0300 	mov.w	r3, #0
 80135ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80135ae:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80135b2:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80135c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80135c4:	ee16 0a90 	vmov	r0, s13
 80135c8:	f7ec ffc8 	bl	800055c <__aeabi_f2d>
 80135cc:	4602      	mov	r2, r0
 80135ce:	460b      	mov	r3, r1
 80135d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80135d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80135d8:	68f9      	ldr	r1, [r7, #12]
 80135da:	4618      	mov	r0, r3
 80135dc:	f7ff fac7 	bl	8012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80135e0:	f107 0310 	add.w	r3, r7, #16
 80135e4:	68b9      	ldr	r1, [r7, #8]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff fac1 	bl	8012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f103 0214 	add.w	r2, r3, #20
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	3318      	adds	r3, #24
 80135f6:	4619      	mov	r1, r3
 80135f8:	4610      	mov	r0, r2
 80135fa:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80135fe:	f7fe fd67 	bl	80120d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8013602:	f7fe ff1d 	bl	8012440 <_ZNSt14numeric_limitsIaE3minEv>
 8013606:	4603      	mov	r3, r0
 8013608:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	edd3 7a03 	vldr	s15, [r3, #12]
 8013614:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013618:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801361c:	eeb0 0a66 	vmov.f32	s0, s13
 8013620:	f004 fc6c 	bl	8017efc <roundf>
 8013624:	eef0 7a40 	vmov.f32	s15, s0
 8013628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801362c:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8013630:	4423      	add	r3, r4
 8013632:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8013634:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801363c:	4611      	mov	r1, r2
 801363e:	4618      	mov	r0, r3
 8013640:	f7ff f9e6 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8013644:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801364c:	f7ff fab6 	bl	8012bbc <_ZNSt14numeric_limitsIfE8infinityEv>
 8013650:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8013654:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013658:	eef4 7a47 	vcmp.f32	s15, s14
 801365c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013660:	d103      	bne.n	801366a <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 8013662:	f7fe fef6 	bl	8012452 <_ZNSt14numeric_limitsIaE3maxEv>
 8013666:	4603      	mov	r3, r0
 8013668:	e022      	b.n	80136b0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801366a:	f7fe fef2 	bl	8012452 <_ZNSt14numeric_limitsIaE3maxEv>
 801366e:	4603      	mov	r3, r0
 8013670:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	edd3 7a03 	vldr	s15, [r3, #12]
 801367c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013680:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013684:	eeb0 0a66 	vmov.f32	s0, s13
 8013688:	f004 fc38 	bl	8017efc <roundf>
 801368c:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8013690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013694:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8013698:	4423      	add	r3, r4
 801369a:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801369c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80136a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136a4:	4611      	mov	r1, r2
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7ff f99e 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80136ac:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80136ae:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	691a      	ldr	r2, [r3, #16]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	691a      	ldr	r2, [r3, #16]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80136c4:	f107 0310 	add.w	r3, r7, #16
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff f9d6 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80136ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff f9d1 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80136d8:	bf00      	nop
 80136da:	3764      	adds	r7, #100	; 0x64
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd90      	pop	{r4, r7, pc}

080136e0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80136e0:	b590      	push	{r4, r7, lr}
 80136e2:	b099      	sub	sp, #100	; 0x64
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80136ec:	f04f 0300 	mov.w	r3, #0
 80136f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80136f2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80136f6:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	edd3 7a03 	vldr	s15, [r3, #12]
 8013704:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8013708:	ee16 0a90 	vmov	r0, s13
 801370c:	f7ec ff26 	bl	800055c <__aeabi_f2d>
 8013710:	4602      	mov	r2, r0
 8013712:	460b      	mov	r3, r1
 8013714:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8013718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801371c:	68f9      	ldr	r1, [r7, #12]
 801371e:	4618      	mov	r0, r3
 8013720:	f7ff fa25 	bl	8012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8013724:	f107 0310 	add.w	r3, r7, #16
 8013728:	68b9      	ldr	r1, [r7, #8]
 801372a:	4618      	mov	r0, r3
 801372c:	f7ff fa1f 	bl	8012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f103 0214 	add.w	r2, r3, #20
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	3318      	adds	r3, #24
 801373a:	4619      	mov	r1, r3
 801373c:	4610      	mov	r0, r2
 801373e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8013742:	f7fe fcc5 	bl	80120d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8013746:	f7fe fe8c 	bl	8012462 <_ZNSt14numeric_limitsIhE3minEv>
 801374a:	4603      	mov	r3, r0
 801374c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	edd3 7a03 	vldr	s15, [r3, #12]
 8013758:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801375c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013760:	eeb0 0a66 	vmov.f32	s0, s13
 8013764:	f004 fbca 	bl	8017efc <roundf>
 8013768:	eef0 7a40 	vmov.f32	s15, s0
 801376c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013770:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8013774:	4423      	add	r3, r4
 8013776:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8013778:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801377c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013780:	4611      	mov	r1, r2
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff f944 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8013788:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801378a:	681a      	ldr	r2, [r3, #0]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8013790:	f7ff fa14 	bl	8012bbc <_ZNSt14numeric_limitsIfE8infinityEv>
 8013794:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8013798:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801379c:	eef4 7a47 	vcmp.f32	s15, s14
 80137a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a4:	d103      	bne.n	80137ae <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80137a6:	f7fe fe64 	bl	8012472 <_ZNSt14numeric_limitsIhE3maxEv>
 80137aa:	4603      	mov	r3, r0
 80137ac:	e022      	b.n	80137f4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80137ae:	f7fe fe60 	bl	8012472 <_ZNSt14numeric_limitsIhE3maxEv>
 80137b2:	4603      	mov	r3, r0
 80137b4:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80137c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80137c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80137c8:	eeb0 0a66 	vmov.f32	s0, s13
 80137cc:	f004 fb96 	bl	8017efc <roundf>
 80137d0:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 80137d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137d8:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 80137dc:	4423      	add	r3, r4
 80137de:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80137e0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80137e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff f8fc 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80137f0:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80137f2:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	691a      	ldr	r2, [r3, #16]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	691a      	ldr	r2, [r3, #16]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8013808:	f107 0310 	add.w	r3, r7, #16
 801380c:	4618      	mov	r0, r3
 801380e:	f7ff f934 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8013812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013816:	4618      	mov	r0, r3
 8013818:	f7ff f92f 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 801381c:	bf00      	nop
 801381e:	3764      	adds	r7, #100	; 0x64
 8013820:	46bd      	mov	sp, r7
 8013822:	bd90      	pop	{r4, r7, pc}

08013824 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8013832:	f005 fd53 	bl	80192dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
}
 801383a:	4618      	mov	r0, r3
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8013842:	b480      	push	{r7}
 8013844:	b083      	sub	sp, #12
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d002      	beq.n	8013856 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	e000      	b.n	8013858 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8013856:	2300      	movs	r3, #0
}
 8013858:	4618      	mov	r0, r3
 801385a:	370c      	adds	r7, #12
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013864:	b580      	push	{r7, lr}
 8013866:	b082      	sub	sp, #8
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d101      	bne.n	8013876 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8013872:	f005 fd33 	bl	80192dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
}
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}

08013882 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8013882:	b480      	push	{r7}
 8013884:	b083      	sub	sp, #12
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d002      	beq.n	8013896 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	e000      	b.n	8013898 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8013896:	2300      	movs	r3, #0
}
 8013898:	4618      	mov	r0, r3
 801389a:	370c      	adds	r7, #12
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr

080138a4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80138a4:	b590      	push	{r4, r7, lr}
 80138a6:	b089      	sub	sp, #36	; 0x24
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
 80138b0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80138b2:	6879      	ldr	r1, [r7, #4]
 80138b4:	68b8      	ldr	r0, [r7, #8]
 80138b6:	f7ff fa5e 	bl	8012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80138ba:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80138bc:	2300      	movs	r3, #0
 80138be:	61fb      	str	r3, [r7, #28]
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	da35      	bge.n	8013934 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	683a      	ldr	r2, [r7, #0]
 80138cc:	4413      	add	r3, r2
 80138ce:	f993 3000 	ldrsb.w	r3, [r3]
 80138d2:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	697a      	ldr	r2, [r7, #20]
 80138de:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80138e8:	461a      	mov	r2, r3
 80138ea:	f7ff fa79 	bl	8012de0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80138ee:	4603      	mov	r3, r0
        data.params.output_offset +
 80138f0:	4423      	add	r3, r4
    int32_t clamped =
 80138f2:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	3304      	adds	r3, #4
 80138f8:	f107 0210 	add.w	r2, r7, #16
 80138fc:	4611      	mov	r1, r2
 80138fe:	4618      	mov	r0, r3
 8013900:	f7ff f886 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8013904:	4603      	mov	r3, r0
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	3308      	adds	r3, #8
 801390e:	f107 0210 	add.w	r2, r7, #16
 8013912:	4611      	mov	r1, r2
 8013914:	4618      	mov	r0, r3
 8013916:	f7ff f867 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 801391a:	4603      	mov	r3, r0
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8013920:	6939      	ldr	r1, [r7, #16]
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013926:	4413      	add	r3, r2
 8013928:	b24a      	sxtb	r2, r1
 801392a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	3301      	adds	r3, #1
 8013930:	61fb      	str	r3, [r7, #28]
 8013932:	e7c5      	b.n	80138c0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8013934:	bf00      	nop
 8013936:	3724      	adds	r7, #36	; 0x24
 8013938:	46bd      	mov	sp, r7
 801393a:	bd90      	pop	{r4, r7, pc}

0801393c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d101      	bne.n	801394e <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801394a:	f005 fcc7 	bl	80192dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
}
 8013952:	4618      	mov	r0, r3
 8013954:	3708      	adds	r7, #8
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}

0801395a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801395a:	b480      	push	{r7}
 801395c:	b083      	sub	sp, #12
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d002      	beq.n	801396e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	e000      	b.n	8013970 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801396e:	2300      	movs	r3, #0
}
 8013970:	4618      	mov	r0, r3
 8013972:	370c      	adds	r7, #12
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr

0801397c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801397c:	b590      	push	{r4, r7, lr}
 801397e:	b089      	sub	sp, #36	; 0x24
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
 8013988:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	68b8      	ldr	r0, [r7, #8]
 801398e:	f7ff f9f2 	bl	8012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013992:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8013994:	2300      	movs	r3, #0
 8013996:	61fb      	str	r3, [r7, #28]
 8013998:	69fa      	ldr	r2, [r7, #28]
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	429a      	cmp	r2, r3
 801399e:	da34      	bge.n	8013a0a <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	683a      	ldr	r2, [r7, #0]
 80139a4:	4413      	add	r3, r2
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80139be:	461a      	mov	r2, r3
 80139c0:	f7ff fa0e 	bl	8012de0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80139c4:	4603      	mov	r3, r0
        data.params.output_offset +
 80139c6:	4423      	add	r3, r4
    int32_t clamped =
 80139c8:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	3304      	adds	r3, #4
 80139ce:	f107 0210 	add.w	r2, r7, #16
 80139d2:	4611      	mov	r1, r2
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7ff f81b 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 80139da:	4603      	mov	r3, r0
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	3308      	adds	r3, #8
 80139e4:	f107 0210 	add.w	r2, r7, #16
 80139e8:	4611      	mov	r1, r2
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fe fffc 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80139f0:	4603      	mov	r3, r0
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80139f6:	6939      	ldr	r1, [r7, #16]
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139fc:	4413      	add	r3, r2
 80139fe:	b2ca      	uxtb	r2, r1
 8013a00:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	3301      	adds	r3, #1
 8013a06:	61fb      	str	r3, [r7, #28]
 8013a08:	e7c6      	b.n	8013998 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8013a0a:	bf00      	nop
 8013a0c:	3724      	adds	r7, #36	; 0x24
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd90      	pop	{r4, r7, pc}

08013a12 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8013a12:	b5b0      	push	{r4, r5, r7, lr}
 8013a14:	b088      	sub	sp, #32
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	ed87 0a03 	vstr	s0, [r7, #12]
 8013a1c:	edc7 0a02 	vstr	s1, [r7, #8]
 8013a20:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8013a22:	ed97 7a03 	vldr	s14, [r7, #12]
 8013a26:	edd7 7a02 	vldr	s15, [r7, #8]
 8013a2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013a2e:	ee16 0a90 	vmov	r0, s13
 8013a32:	f7ec fd93 	bl	800055c <__aeabi_f2d>
 8013a36:	4602      	mov	r2, r0
 8013a38:	460b      	mov	r3, r1
 8013a3a:	ec43 2b10 	vmov	d0, r2, r3
 8013a3e:	f004 fa17 	bl	8017e70 <round>
 8013a42:	ec55 4b10 	vmov	r4, r5, d0
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f7ec fd76 	bl	8000538 <__aeabi_i2d>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	460b      	mov	r3, r1
 8013a50:	4620      	mov	r0, r4
 8013a52:	4629      	mov	r1, r5
 8013a54:	f7ec fc24 	bl	80002a0 <__adddf3>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	460b      	mov	r3, r1
 8013a5c:	4610      	mov	r0, r2
 8013a5e:	4619      	mov	r1, r3
 8013a60:	f7ed f884 	bl	8000b6c <__aeabi_d2iz>
 8013a64:	4603      	mov	r3, r0
 8013a66:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8013a68:	f7fe fcea 	bl	8012440 <_ZNSt14numeric_limitsIaE3minEv>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	61bb      	str	r3, [r7, #24]
 8013a70:	f107 0214 	add.w	r2, r7, #20
 8013a74:	f107 0318 	add.w	r3, r7, #24
 8013a78:	4611      	mov	r1, r2
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fe ffc8 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8013a80:	4603      	mov	r3, r0
  result =
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8013a86:	f7fe fce4 	bl	8012452 <_ZNSt14numeric_limitsIaE3maxEv>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	61fb      	str	r3, [r7, #28]
 8013a8e:	f107 0214 	add.w	r2, r7, #20
 8013a92:	f107 031c 	add.w	r3, r7, #28
 8013a96:	4611      	mov	r1, r2
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7fe ffa5 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 8013a9e:	4603      	mov	r3, r0
  result =
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	617b      	str	r3, [r7, #20]
  return result;
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	b25b      	sxtb	r3, r3
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3720      	adds	r7, #32
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bdb0      	pop	{r4, r5, r7, pc}

08013ab0 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8013ab0:	b5b0      	push	{r4, r5, r7, lr}
 8013ab2:	b088      	sub	sp, #32
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	ed87 0a03 	vstr	s0, [r7, #12]
 8013aba:	edc7 0a02 	vstr	s1, [r7, #8]
 8013abe:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8013ac0:	ed97 7a03 	vldr	s14, [r7, #12]
 8013ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8013ac8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013acc:	ee16 0a90 	vmov	r0, s13
 8013ad0:	f7ec fd44 	bl	800055c <__aeabi_f2d>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	ec43 2b10 	vmov	d0, r2, r3
 8013adc:	f004 f9c8 	bl	8017e70 <round>
 8013ae0:	ec55 4b10 	vmov	r4, r5, d0
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7ec fd27 	bl	8000538 <__aeabi_i2d>
 8013aea:	4602      	mov	r2, r0
 8013aec:	460b      	mov	r3, r1
 8013aee:	4620      	mov	r0, r4
 8013af0:	4629      	mov	r1, r5
 8013af2:	f7ec fbd5 	bl	80002a0 <__adddf3>
 8013af6:	4602      	mov	r2, r0
 8013af8:	460b      	mov	r3, r1
 8013afa:	4610      	mov	r0, r2
 8013afc:	4619      	mov	r1, r3
 8013afe:	f7ed f835 	bl	8000b6c <__aeabi_d2iz>
 8013b02:	4603      	mov	r3, r0
 8013b04:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8013b06:	f7fe fcac 	bl	8012462 <_ZNSt14numeric_limitsIhE3minEv>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	61bb      	str	r3, [r7, #24]
 8013b0e:	f107 0214 	add.w	r2, r7, #20
 8013b12:	f107 0318 	add.w	r3, r7, #24
 8013b16:	4611      	mov	r1, r2
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fe ff79 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8013b1e:	4603      	mov	r3, r0
  result =
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8013b24:	f7fe fca5 	bl	8012472 <_ZNSt14numeric_limitsIhE3maxEv>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	61fb      	str	r3, [r7, #28]
 8013b2c:	f107 0214 	add.w	r2, r7, #20
 8013b30:	f107 031c 	add.w	r3, r7, #28
 8013b34:	4611      	mov	r1, r2
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fe ff56 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 8013b3c:	4603      	mov	r3, r0
  result =
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	617b      	str	r3, [r7, #20]
  return result;
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	b2db      	uxtb	r3, r3
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3720      	adds	r7, #32
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bdb0      	pop	{r4, r5, r7, pc}

08013b4e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8013b4e:	b580      	push	{r7, lr}
 8013b50:	b088      	sub	sp, #32
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	60ba      	str	r2, [r7, #8]
 8013b56:	607b      	str	r3, [r7, #4]
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013b62:	68b8      	ldr	r0, [r7, #8]
 8013b64:	f7ff f907 	bl	8012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013b68:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	61fb      	str	r3, [r7, #28]
 8013b6e:	69fa      	ldr	r2, [r7, #28]
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	da26      	bge.n	8013bc4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	687a      	ldr	r2, [r7, #4]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8013b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b84:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	dd04      	ble.n	8013b96 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8013b8c:	f107 030e 	add.w	r3, r7, #14
 8013b90:	f993 3000 	ldrsb.w	r3, [r3]
 8013b94:	e00c      	b.n	8013bb0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8013b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b9a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	da04      	bge.n	8013bac <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8013ba2:	f107 030f 	add.w	r3, r7, #15
 8013ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8013baa:	e001      	b.n	8013bb0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8013bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013bb0:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bb6:	4413      	add	r3, r2
 8013bb8:	7dba      	ldrb	r2, [r7, #22]
 8013bba:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013bbc:	69fb      	ldr	r3, [r7, #28]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	61fb      	str	r3, [r7, #28]
 8013bc2:	e7d4      	b.n	8013b6e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8013bc4:	bf00      	nop
 8013bc6:	3720      	adds	r7, #32
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b088      	sub	sp, #32
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	60ba      	str	r2, [r7, #8]
 8013bd4:	607b      	str	r3, [r7, #4]
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	73fb      	strb	r3, [r7, #15]
 8013bda:	460b      	mov	r3, r1
 8013bdc:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013be0:	68b8      	ldr	r0, [r7, #8]
 8013be2:	f7ff f8c8 	bl	8012d76 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013be6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8013be8:	2300      	movs	r3, #0
 8013bea:	61fb      	str	r3, [r7, #28]
 8013bec:	69fa      	ldr	r2, [r7, #28]
 8013bee:	69bb      	ldr	r3, [r7, #24]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	da1f      	bge.n	8013c34 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	687a      	ldr	r2, [r7, #4]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8013bfe:	7bbb      	ldrb	r3, [r7, #14]
 8013c00:	7dfa      	ldrb	r2, [r7, #23]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d903      	bls.n	8013c0e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8013c06:	f107 030e 	add.w	r3, r7, #14
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	e008      	b.n	8013c20 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8013c0e:	7bfb      	ldrb	r3, [r7, #15]
 8013c10:	7dfa      	ldrb	r2, [r7, #23]
 8013c12:	429a      	cmp	r2, r3
 8013c14:	d203      	bcs.n	8013c1e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8013c16:	f107 030f 	add.w	r3, r7, #15
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	e000      	b.n	8013c20 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8013c1e:	7dfb      	ldrb	r3, [r7, #23]
 8013c20:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c26:	4413      	add	r3, r2
 8013c28:	7dba      	ldrb	r2, [r7, #22]
 8013c2a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	3301      	adds	r3, #1
 8013c30:	61fb      	str	r3, [r7, #28]
 8013c32:	e7db      	b.n	8013bec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8013c34:	bf00      	nop
 8013c36:	3720      	adds	r7, #32
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8013c3c:	b480      	push	{r7}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  return x;
 8013c44:	687b      	ldr	r3, [r7, #4]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	370c      	adds	r7, #12
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c50:	4770      	bx	lr

08013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8013c52:	b480      	push	{r7}
 8013c54:	b083      	sub	sp, #12
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	6078      	str	r0, [r7, #4]
 8013c5a:	6039      	str	r1, [r7, #0]
  return a & b;
 8013c5c:	687a      	ldr	r2, [r7, #4]
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	4013      	ands	r3, r2
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	370c      	adds	r7, #12
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr

08013c6e <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8013c6e:	b480      	push	{r7}
 8013c70:	b083      	sub	sp, #12
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
 8013c76:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	fa42 f303 	asr.w	r3, r2, r3
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	370c      	adds	r7, #12
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	bfb4      	ite	lt
 8013c9e:	2301      	movlt	r3, #1
 8013ca0:	2300      	movge	r3, #0
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 f827 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013caa:	4603      	mov	r3, r0
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  return a + b;
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	4413      	add	r3, r2
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	bfcc      	ite	gt
 8013ce2:	2301      	movgt	r3, #1
 8013ce4:	2300      	movle	r3, #0
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f000 f805 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013cee:	4603      	mov	r3, r0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3708      	adds	r7, #8
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d004      	beq.n	8013d10 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8013d06:	2000      	movs	r0, #0
 8013d08:	f000 f807 	bl	8013d1a <_ZN8gemmlowp6BitNotIlEET_S1_>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	e000      	b.n	8013d12 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8013d1a:	b480      	push	{r7}
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
  return ~a;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	43db      	mvns	r3, r3
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	370c      	adds	r7, #12
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8013d32:	b480      	push	{r7}
 8013d34:	b083      	sub	sp, #12
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	4618      	mov	r0, r3
 8013d42:	370c      	adds	r7, #12
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr

08013d4c <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	685b      	ldr	r3, [r3, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	370c      	adds	r7, #12
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr

08013d66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b082      	sub	sp, #8
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d101      	bne.n	8013d78 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8013d74:	f005 fab2 	bl	80192dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8013d84:	b590      	push	{r4, r7, lr}
 8013d86:	b087      	sub	sp, #28
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
 8013d90:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8013d92:	68b9      	ldr	r1, [r7, #8]
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f7fe ff93 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f7fe ff8e 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013da4:	4603      	mov	r3, r0
 8013da6:	429c      	cmp	r4, r3
 8013da8:	d001      	beq.n	8013dae <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8013daa:	f005 fa97 	bl	80192dc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8013dae:	68b9      	ldr	r1, [r7, #8]
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f7fe ff85 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013db6:	4603      	mov	r3, r0
 8013db8:	613b      	str	r3, [r7, #16]
 8013dba:	6839      	ldr	r1, [r7, #0]
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7fe ff7f 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	617b      	str	r3, [r7, #20]
 8013dc6:	f107 0214 	add.w	r2, r7, #20
 8013dca:	f107 0310 	add.w	r3, r7, #16
 8013dce:	4611      	mov	r1, r2
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7fe fe09 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	681b      	ldr	r3, [r3, #0]
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	371c      	adds	r7, #28
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd90      	pop	{r4, r7, pc}

08013de2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d101      	bne.n	8013df4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8013df0:	f005 fa74 	bl	80192dc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8013e00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013e04:	b090      	sub	sp, #64	; 0x40
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	61f8      	str	r0, [r7, #28]
 8013e0a:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	17da      	asrs	r2, r3, #31
 8013e10:	613b      	str	r3, [r7, #16]
 8013e12:	617a      	str	r2, [r7, #20]
 8013e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013e18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	17da      	asrs	r2, r3, #31
 8013e20:	60bb      	str	r3, [r7, #8]
 8013e22:	60fa      	str	r2, [r7, #12]
 8013e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013e28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 8013e2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8013e30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013e34:	1886      	adds	r6, r0, r2
 8013e36:	603e      	str	r6, [r7, #0]
 8013e38:	eb41 0303 	adc.w	r3, r1, r3
 8013e3c:	607b      	str	r3, [r7, #4]
 8013e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8013e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	db04      	blt.n	8013e58 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8013e4e:	f04f 0201 	mov.w	r2, #1
 8013e52:	f04f 0300 	mov.w	r3, #0
 8013e56:	e003      	b.n	8013e60 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 8013e58:	f04f 32ff 	mov.w	r2, #4294967295
 8013e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e60:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8013e64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013e68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013e6c:	eb10 0802 	adds.w	r8, r0, r2
 8013e70:	eb41 0903 	adc.w	r9, r1, r3
 8013e74:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8013e78:	2200      	movs	r2, #0
 8013e7a:	469a      	mov	sl, r3
 8013e7c:	4693      	mov	fp, r2
 8013e7e:	eb1a 0408 	adds.w	r4, sl, r8
 8013e82:	eb4b 0509 	adc.w	r5, fp, r9
 8013e86:	f04f 0200 	mov.w	r2, #0
 8013e8a:	f04f 0300 	mov.w	r3, #0
 8013e8e:	0862      	lsrs	r2, r4, #1
 8013e90:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8013e94:	106b      	asrs	r3, r5, #1
 8013e96:	4613      	mov	r3, r2
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3740      	adds	r7, #64	; 0x40
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013ea2:	4770      	bx	lr

08013ea4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8013eb0:	68fa      	ldr	r2, [r7, #12]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8013eb8:	68b9      	ldr	r1, [r7, #8]
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fe fe8a 	bl	8012bd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013ec0:	4603      	mov	r3, r0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3710      	adds	r7, #16
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}

08013eca <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8013eca:	b580      	push	{r7, lr}
 8013ecc:	b088      	sub	sp, #32
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	60f8      	str	r0, [r7, #12]
 8013ed2:	60b9      	str	r1, [r7, #8]
 8013ed4:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 f821 	bl	8013f20 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8013ede:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8013ee0:	68ba      	ldr	r2, [r7, #8]
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	1ad2      	subs	r2, r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8013ef6:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8013ef8:	69b8      	ldr	r0, [r7, #24]
 8013efa:	f000 f823 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013efe:	4603      	mov	r3, r0
 8013f00:	4618      	mov	r0, r3
 8013f02:	f000 f831 	bl	8013f68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8013f06:	4603      	mov	r3, r0
 8013f08:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8013f0a:	f107 0314 	add.w	r3, r7, #20
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f000 f88a 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013f14:	4603      	mov	r3, r0
 8013f16:	681b      	ldr	r3, [r3, #0]
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3720      	adds	r7, #32
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d003      	beq.n	8013f36 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8013f34:	e000      	b.n	8013f38 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8013f36:	2320      	movs	r3, #32
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b084      	sub	sp, #16
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 8013f4c:	f107 030c 	add.w	r3, r7, #12
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 f869 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013f56:	4602      	mov	r2, r0
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6013      	str	r3, [r2, #0]
    return retval;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
  }
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3710      	adds	r7, #16
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
	...

08013f68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b08a      	sub	sp, #40	; 0x28
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8013f70:	f000 f879 	bl	8014066 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8013f74:	4603      	mov	r3, r0
 8013f76:	4619      	mov	r1, r3
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f000 f87f 	bl	801407c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8013f82:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8013f86:	f000 f8ab 	bl	80140e0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f000 f893 	bl	80140b8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013f92:	4603      	mov	r3, r0
 8013f94:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8013f96:	4823      	ldr	r0, [pc, #140]	; (8014024 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8013f98:	f000 f8a2 	bl	80140e0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f000 f88a 	bl	80140b8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8013fa8:	69b9      	ldr	r1, [r7, #24]
 8013faa:	6a38      	ldr	r0, [r7, #32]
 8013fac:	f000 f8a5 	bl	80140fa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	69f8      	ldr	r0, [r7, #28]
 8013fb6:	f000 f8c2 	bl	801413e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc4:	2b02      	cmp	r3, #2
 8013fc6:	dc21      	bgt.n	801400c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8013fc8:	6979      	ldr	r1, [r7, #20]
 8013fca:	6a38      	ldr	r0, [r7, #32]
 8013fcc:	f000 f895 	bl	80140fa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8013fd4:	f000 f8d1 	bl	801417a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	6939      	ldr	r1, [r7, #16]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f000 f8d5 	bl	801418c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8013fe6:	68f9      	ldr	r1, [r7, #12]
 8013fe8:	6978      	ldr	r0, [r7, #20]
 8013fea:	f000 f8ed 	bl	80141c8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f000 f90b 	bl	801420c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	6978      	ldr	r0, [r7, #20]
 8013ffc:	f000 f89f 	bl	801413e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014000:	4603      	mov	r3, r0
 8014002:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	3301      	adds	r3, #1
 8014008:	627b      	str	r3, [r7, #36]	; 0x24
 801400a:	e7da      	b.n	8013fc2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801400c:	6978      	ldr	r0, [r7, #20]
 801400e:	f000 f917 	bl	8014240 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8014012:	4603      	mov	r3, r0
 8014014:	4618      	mov	r0, r3
 8014016:	f000 f929 	bl	801426c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801401a:	4603      	mov	r3, r0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3728      	adds	r7, #40	; 0x28
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	c3c3c3c4 	.word	0xc3c3c3c4

08014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	4618      	mov	r0, r3
 8014034:	370c      	adds	r7, #12
 8014036:	46bd      	mov	sp, r7
 8014038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403c:	4770      	bx	lr

0801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801403e:	b590      	push	{r4, r7, lr}
 8014040:	b085      	sub	sp, #20
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8014046:	f107 030c 	add.w	r3, r7, #12
 801404a:	4618      	mov	r0, r3
 801404c:	f7ff ffec 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014050:	4604      	mov	r4, r0
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f7ff fdf2 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014058:	4603      	mov	r3, r0
 801405a:	6023      	str	r3, [r4, #0]
    return retval;
 801405c:	68fb      	ldr	r3, [r7, #12]
  }
 801405e:	4618      	mov	r0, r3
 8014060:	3714      	adds	r7, #20
 8014062:	46bd      	mov	sp, r7
 8014064:	bd90      	pop	{r4, r7, pc}

08014066 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8014066:	b580      	push	{r7, lr}
 8014068:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801406a:	f000 f927 	bl	80142bc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801406e:	4603      	mov	r3, r0
 8014070:	4618      	mov	r0, r3
 8014072:	f7ff ffe4 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014076:	4603      	mov	r3, r0
  }
 8014078:	4618      	mov	r0, r3
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801407c:	b590      	push	{r4, r7, lr}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
 8014086:	1d3b      	adds	r3, r7, #4
 8014088:	4618      	mov	r0, r3
 801408a:	f7ff ffcd 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801408e:	4603      	mov	r3, r0
 8014090:	681c      	ldr	r4, [r3, #0]
 8014092:	463b      	mov	r3, r7
 8014094:	4618      	mov	r0, r3
 8014096:	f7ff ffc7 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801409a:	4603      	mov	r3, r0
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4619      	mov	r1, r3
 80140a0:	4620      	mov	r0, r4
 80140a2:	f7ff fead 	bl	8013e00 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 80140a6:	4603      	mov	r3, r0
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7ff ff4b 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80140ae:	4603      	mov	r3, r0
 80140b0:	4618      	mov	r0, r3
 80140b2:	370c      	adds	r7, #12
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd90      	pop	{r4, r7, pc}

080140b8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80140b8:	b590      	push	{r4, r7, lr}
 80140ba:	b085      	sub	sp, #20
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80140c0:	f107 030c 	add.w	r3, r7, #12
 80140c4:	4618      	mov	r0, r3
 80140c6:	f000 f900 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80140ca:	4604      	mov	r4, r0
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7ff fdb5 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80140d2:	4603      	mov	r3, r0
 80140d4:	6023      	str	r3, [r4, #0]
    return retval;
 80140d6:	68fb      	ldr	r3, [r7, #12]
  }
 80140d8:	4618      	mov	r0, r3
 80140da:	3714      	adds	r7, #20
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd90      	pop	{r4, r7, pc}

080140e0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80140e8:	2100      	movs	r1, #0
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f7ff f9e2 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80140f0:	4603      	mov	r3, r0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3708      	adds	r7, #8
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80140fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140fc:	b085      	sub	sp, #20
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8014104:	1d3b      	adds	r3, r7, #4
 8014106:	4618      	mov	r0, r3
 8014108:	f7ff ff8e 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801410c:	4603      	mov	r3, r0
 801410e:	681d      	ldr	r5, [r3, #0]
 8014110:	463b      	mov	r3, r7
 8014112:	4618      	mov	r0, r3
 8014114:	f000 f8d9 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014118:	4603      	mov	r3, r0
 801411a:	681e      	ldr	r6, [r3, #0]
 801411c:	f107 030c 	add.w	r3, r7, #12
 8014120:	4618      	mov	r0, r3
 8014122:	f000 f8d2 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014126:	4604      	mov	r4, r0
 8014128:	4631      	mov	r1, r6
 801412a:	4628      	mov	r0, r5
 801412c:	f7fe fd52 	bl	8012bd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014130:	4603      	mov	r3, r0
 8014132:	6023      	str	r3, [r4, #0]
  return c;
 8014134:	68fb      	ldr	r3, [r7, #12]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3714      	adds	r7, #20
 801413a:	46bd      	mov	sp, r7
 801413c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801413e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801413e:	b590      	push	{r4, r7, lr}
 8014140:	b083      	sub	sp, #12
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
 8014146:	6039      	str	r1, [r7, #0]
 8014148:	1d3b      	adds	r3, r7, #4
 801414a:	4618      	mov	r0, r3
 801414c:	f000 f8bd 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014150:	4603      	mov	r3, r0
 8014152:	681c      	ldr	r4, [r3, #0]
 8014154:	463b      	mov	r3, r7
 8014156:	4618      	mov	r0, r3
 8014158:	f000 f8b7 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801415c:	4603      	mov	r3, r0
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4619      	mov	r1, r3
 8014162:	4620      	mov	r0, r4
 8014164:	f7ff fda6 	bl	8013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014168:	4603      	mov	r3, r0
 801416a:	4618      	mov	r0, r3
 801416c:	f000 f8b8 	bl	80142e0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8014170:	4603      	mov	r3, r0
 8014172:	4618      	mov	r0, r3
 8014174:	370c      	adds	r7, #12
 8014176:	46bd      	mov	sp, r7
 8014178:	bd90      	pop	{r4, r7, pc}

0801417a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801417a:	b580      	push	{r7, lr}
 801417c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801417e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8014182:	f7ff ff99 	bl	80140b8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8014186:	4603      	mov	r3, r0
  }
 8014188:	4618      	mov	r0, r3
 801418a:	bd80      	pop	{r7, pc}

0801418c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801418c:	b590      	push	{r4, r7, lr}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
 8014196:	1d3b      	adds	r3, r7, #4
 8014198:	4618      	mov	r0, r3
 801419a:	f000 f896 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801419e:	4603      	mov	r3, r0
 80141a0:	681c      	ldr	r4, [r3, #0]
 80141a2:	463b      	mov	r3, r7
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 f890 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141aa:	4603      	mov	r3, r0
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	4619      	mov	r1, r3
 80141b0:	4620      	mov	r0, r4
 80141b2:	f000 f875 	bl	80142a0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80141b6:	4603      	mov	r3, r0
 80141b8:	4618      	mov	r0, r3
 80141ba:	f000 f891 	bl	80142e0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80141be:	4603      	mov	r3, r0
 80141c0:	4618      	mov	r0, r3
 80141c2:	370c      	adds	r7, #12
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd90      	pop	{r4, r7, pc}

080141c8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80141c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ca:	b085      	sub	sp, #20
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80141d2:	1d3b      	adds	r3, r7, #4
 80141d4:	4618      	mov	r0, r3
 80141d6:	f000 f878 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141da:	4603      	mov	r3, r0
 80141dc:	681d      	ldr	r5, [r3, #0]
 80141de:	463b      	mov	r3, r7
 80141e0:	4618      	mov	r0, r3
 80141e2:	f000 f872 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141e6:	4603      	mov	r3, r0
 80141e8:	681e      	ldr	r6, [r3, #0]
 80141ea:	f107 030c 	add.w	r3, r7, #12
 80141ee:	4618      	mov	r0, r3
 80141f0:	f000 f887 	bl	8014302 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80141f4:	4604      	mov	r4, r0
 80141f6:	4631      	mov	r1, r6
 80141f8:	4628      	mov	r0, r5
 80141fa:	f7fe fceb 	bl	8012bd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80141fe:	4603      	mov	r3, r0
 8014200:	6023      	str	r3, [r4, #0]
  return c;
 8014202:	68fb      	ldr	r3, [r7, #12]
}
 8014204:	4618      	mov	r0, r3
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801420c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801420c:	b5b0      	push	{r4, r5, r7, lr}
 801420e:	b084      	sub	sp, #16
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8014214:	1d3b      	adds	r3, r7, #4
 8014216:	4618      	mov	r0, r3
 8014218:	f000 f873 	bl	8014302 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801421c:	4603      	mov	r3, r0
 801421e:	681d      	ldr	r5, [r3, #0]
 8014220:	f107 030c 	add.w	r3, r7, #12
 8014224:	4618      	mov	r0, r3
 8014226:	f000 f850 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801422a:	4604      	mov	r4, r0
 801422c:	4628      	mov	r0, r5
 801422e:	f000 f873 	bl	8014318 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8014232:	4603      	mov	r3, r0
 8014234:	6023      	str	r3, [r4, #0]
  return result;
 8014236:	68fb      	ldr	r3, [r7, #12]
}
 8014238:	4618      	mov	r0, r3
 801423a:	3710      	adds	r7, #16
 801423c:	46bd      	mov	sp, r7
 801423e:	bdb0      	pop	{r4, r5, r7, pc}

08014240 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8014240:	b590      	push	{r4, r7, lr}
 8014242:	b085      	sub	sp, #20
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8014248:	1d3b      	adds	r3, r7, #4
 801424a:	4618      	mov	r0, r3
 801424c:	f000 f83d 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014250:	4604      	mov	r4, r0
 8014252:	f107 030c 	add.w	r3, r7, #12
 8014256:	4618      	mov	r0, r3
 8014258:	f000 f86a 	bl	8014330 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801425c:	4602      	mov	r2, r0
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	6013      	str	r3, [r2, #0]
  return c;
 8014262:	68fb      	ldr	r3, [r7, #12]
}
 8014264:	4618      	mov	r0, r3
 8014266:	3714      	adds	r7, #20
 8014268:	46bd      	mov	sp, r7
 801426a:	bd90      	pop	{r4, r7, pc}

0801426c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801426c:	b5b0      	push	{r4, r5, r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8014274:	1d3b      	adds	r3, r7, #4
 8014276:	4618      	mov	r0, r3
 8014278:	f000 f85a 	bl	8014330 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801427c:	4603      	mov	r3, r0
 801427e:	681d      	ldr	r5, [r3, #0]
 8014280:	f107 030c 	add.w	r3, r7, #12
 8014284:	4618      	mov	r0, r3
 8014286:	f7ff fecf 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801428a:	4604      	mov	r4, r0
 801428c:	4628      	mov	r0, r5
 801428e:	f000 f85a 	bl	8014346 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8014292:	4603      	mov	r3, r0
 8014294:	6023      	str	r3, [r4, #0]
  return result;
 8014296:	68fb      	ldr	r3, [r7, #12]
}
 8014298:	4618      	mov	r0, r3
 801429a:	3710      	adds	r7, #16
 801429c:	46bd      	mov	sp, r7
 801429e:	bdb0      	pop	{r4, r5, r7, pc}

080142a0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80142a0:	b480      	push	{r7}
 80142a2:	b083      	sub	sp, #12
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
  return a - b;
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	1ad3      	subs	r3, r2, r3
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	370c      	adds	r7, #12
 80142b4:	46bd      	mov	sp, r7
 80142b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ba:	4770      	bx	lr

080142bc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 80142bc:	b580      	push	{r7, lr}
 80142be:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 80142c0:	f7fd fefc 	bl	80120bc <_ZNSt14numeric_limitsIlE3maxEv>
 80142c4:	4603      	mov	r3, r0
  }
 80142c6:	4618      	mov	r0, r3
 80142c8:	bd80      	pop	{r7, pc}

080142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 80142ca:	b480      	push	{r7}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80142e8:	f107 030c 	add.w	r3, r7, #12
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7ff ffec 	bl	80142ca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80142f2:	4602      	mov	r2, r0
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6013      	str	r3, [r2, #0]
    return retval;
 80142f8:	68fb      	ldr	r3, [r7, #12]
  }
 80142fa:	4618      	mov	r0, r3
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}

08014302 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8014302:	b480      	push	{r7}
 8014304:	b083      	sub	sp, #12
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	370c      	adds	r7, #12
 8014310:	46bd      	mov	sp, r7
 8014312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014316:	4770      	bx	lr

08014318 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f000 f81d 	bl	8014360 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8014326:	4603      	mov	r3, r0
}
 8014328:	4618      	mov	r0, r3
 801432a:	3708      	adds	r7, #8
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}

08014330 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4618      	mov	r0, r3
 801433c:	370c      	adds	r7, #12
 801433e:	46bd      	mov	sp, r7
 8014340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014344:	4770      	bx	lr

08014346 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014346:	b580      	push	{r7, lr}
 8014348:	b082      	sub	sp, #8
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f000 f848 	bl	80143e4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8014354:	4603      	mov	r3, r0
}
 8014356:	4618      	mov	r0, r3
 8014358:	3708      	adds	r7, #8
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
	...

08014360 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014360:	b580      	push	{r7, lr}
 8014362:	b08a      	sub	sp, #40	; 0x28
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8014368:	f7fe fc1f 	bl	8012baa <_ZNSt14numeric_limitsIlE3minEv>
 801436c:	4603      	mov	r3, r0
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff fc64 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014374:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8014376:	f7fd fea1 	bl	80120bc <_ZNSt14numeric_limitsIlE3maxEv>
 801437a:	4603      	mov	r3, r0
 801437c:	4618      	mov	r0, r3
 801437e:	f7ff fc5d 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014382:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8014384:	2320      	movs	r3, #32
 8014386:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8014388:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801438c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801438e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8014392:	f7ff fc53 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014396:	4603      	mov	r3, r0
 8014398:	4619      	mov	r1, r3
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7ff fc98 	bl	8013cd0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80143a0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80143a2:	480f      	ldr	r0, [pc, #60]	; (80143e0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 80143a4:	f7ff fc4a 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80143a8:	4603      	mov	r3, r0
 80143aa:	4619      	mov	r1, r3
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7ff fc6d 	bl	8013c8c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80143b2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80143b4:	2102      	movs	r1, #2
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f000 f856 	bl	8014468 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80143bc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80143be:	68fa      	ldr	r2, [r7, #12]
 80143c0:	6a39      	ldr	r1, [r7, #32]
 80143c2:	6978      	ldr	r0, [r7, #20]
 80143c4:	f000 f894 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80143c8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80143ca:	68fa      	ldr	r2, [r7, #12]
 80143cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143ce:	6938      	ldr	r0, [r7, #16]
 80143d0:	f000 f88e 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80143d4:	60f8      	str	r0, [r7, #12]
    return result;
 80143d6:	68fb      	ldr	r3, [r7, #12]
  }
 80143d8:	4618      	mov	r0, r3
 80143da:	3728      	adds	r7, #40	; 0x28
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}
 80143e0:	e0000001 	.word	0xe0000001

080143e4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b08a      	sub	sp, #40	; 0x28
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80143ec:	f7fe fbdd 	bl	8012baa <_ZNSt14numeric_limitsIlE3minEv>
 80143f0:	4603      	mov	r3, r0
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7ff fc22 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80143f8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80143fa:	f7fd fe5f 	bl	80120bc <_ZNSt14numeric_limitsIlE3maxEv>
 80143fe:	4603      	mov	r3, r0
 8014400:	4618      	mov	r0, r3
 8014402:	f7ff fc1b 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014406:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8014408:	2320      	movs	r3, #32
 801440a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801440c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014410:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8014412:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8014416:	f7ff fc11 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801441a:	4603      	mov	r3, r0
 801441c:	4619      	mov	r1, r3
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f7ff fc56 	bl	8013cd0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8014424:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8014426:	480f      	ldr	r0, [pc, #60]	; (8014464 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8014428:	f7ff fc08 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801442c:	4603      	mov	r3, r0
 801442e:	4619      	mov	r1, r3
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7ff fc2b 	bl	8013c8c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8014436:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8014438:	2101      	movs	r1, #1
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 f814 	bl	8014468 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8014440:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8014442:	68fa      	ldr	r2, [r7, #12]
 8014444:	6a39      	ldr	r1, [r7, #32]
 8014446:	6978      	ldr	r0, [r7, #20]
 8014448:	f000 f852 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801444c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801444e:	68fa      	ldr	r2, [r7, #12]
 8014450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014452:	6938      	ldr	r0, [r7, #16]
 8014454:	f000 f84c 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014458:	60f8      	str	r0, [r7, #12]
    return result;
 801445a:	68fb      	ldr	r3, [r7, #12]
  }
 801445c:	4618      	mov	r0, r3
 801445e:	3728      	adds	r7, #40	; 0x28
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	c0000001 	.word	0xc0000001

08014468 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8014468:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801446c:	b089      	sub	sp, #36	; 0x24
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
 8014472:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8014474:	6879      	ldr	r1, [r7, #4]
 8014476:	17c8      	asrs	r0, r1, #31
 8014478:	4688      	mov	r8, r1
 801447a:	4681      	mov	r9, r0
 801447c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8014480:	2001      	movs	r0, #1
 8014482:	6839      	ldr	r1, [r7, #0]
 8014484:	fa00 f101 	lsl.w	r1, r0, r1
 8014488:	17c8      	asrs	r0, r1, #31
 801448a:	460c      	mov	r4, r1
 801448c:	4605      	mov	r5, r0
 801448e:	69f9      	ldr	r1, [r7, #28]
 8014490:	fb04 f001 	mul.w	r0, r4, r1
 8014494:	69b9      	ldr	r1, [r7, #24]
 8014496:	fb05 f101 	mul.w	r1, r5, r1
 801449a:	4401      	add	r1, r0
 801449c:	69b8      	ldr	r0, [r7, #24]
 801449e:	fba0 2304 	umull	r2, r3, r0, r4
 80144a2:	4419      	add	r1, r3
 80144a4:	460b      	mov	r3, r1
 80144a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80144aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 80144ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80144b2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 80144b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80144b8:	60bb      	str	r3, [r7, #8]
             ? min
 80144ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80144be:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80144c2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80144c6:	db0b      	blt.n	80144e0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 80144c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80144cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80144d0:	f173 0300 	sbcs.w	r3, r3, #0
 80144d4:	da01      	bge.n	80144da <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 80144d6:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 80144d8:	e004      	b.n	80144e4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 80144da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 80144de:	e001      	b.n	80144e4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 80144e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3724      	adds	r7, #36	; 0x24
 80144e8:	46bd      	mov	sp, r7
 80144ea:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80144ee:	4770      	bx	lr

080144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80144f0:	b590      	push	{r4, r7, lr}
 80144f2:	b085      	sub	sp, #20
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	60f8      	str	r0, [r7, #12]
 80144f8:	60b9      	str	r1, [r7, #8]
 80144fa:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80144fc:	68b9      	ldr	r1, [r7, #8]
 80144fe:	68f8      	ldr	r0, [r7, #12]
 8014500:	f7ff fba7 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014504:	4604      	mov	r4, r0
 8014506:	68f8      	ldr	r0, [r7, #12]
 8014508:	f7ff fc07 	bl	8013d1a <_ZN8gemmlowp6BitNotIlEET_S1_>
 801450c:	4603      	mov	r3, r0
 801450e:	6879      	ldr	r1, [r7, #4]
 8014510:	4618      	mov	r0, r3
 8014512:	f7ff fb9e 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014516:	4603      	mov	r3, r0
 8014518:	4619      	mov	r1, r3
 801451a:	4620      	mov	r0, r4
 801451c:	f000 f805 	bl	801452a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8014520:	4603      	mov	r3, r0
}
 8014522:	4618      	mov	r0, r3
 8014524:	3714      	adds	r7, #20
 8014526:	46bd      	mov	sp, r7
 8014528:	bd90      	pop	{r4, r7, pc}

0801452a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801452a:	b480      	push	{r7}
 801452c:	b083      	sub	sp, #12
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
 8014532:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	4053      	eors	r3, r2
}
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr

08014546 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8014546:	b580      	push	{r7, lr}
 8014548:	b084      	sub	sp, #16
 801454a:	af00      	add	r7, sp, #0
 801454c:	60f8      	str	r0, [r7, #12]
 801454e:	60b9      	str	r1, [r7, #8]
 8014550:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014556:	2b00      	cmp	r3, #0
 8014558:	d101      	bne.n	801455e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801455a:	f004 febf 	bl	80192dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014562:	2124      	movs	r1, #36	; 0x24
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	4798      	blx	r3
 8014568:	4603      	mov	r3, r0
}
 801456a:	4618      	mov	r0, r3
 801456c:	3710      	adds	r7, #16
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
	...

08014574 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014574:	b5b0      	push	{r4, r5, r7, lr}
 8014576:	b0a0      	sub	sp, #128	; 0x80
 8014578:	af04      	add	r7, sp, #16
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
 801457e:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	691b      	ldr	r3, [r3, #16]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d101      	bne.n	801458c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8014588:	f004 fea8 	bl	80192dc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	695b      	ldr	r3, [r3, #20]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d101      	bne.n	8014598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8014594:	f004 fea2 	bl	80192dc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	691b      	ldr	r3, [r3, #16]
 801459c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	695b      	ldr	r3, [r3, #20]
 80145a2:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 80145a4:	4b81      	ldr	r3, [pc, #516]	; (80147ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	461a      	mov	r2, r3
 80145aa:	6839      	ldr	r1, [r7, #0]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7fd fff9 	bl	80125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80145b2:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 80145b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d10a      	bne.n	80145d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	695c      	ldr	r4, [r3, #20]
 80145be:	4b7c      	ldr	r3, [pc, #496]	; (80147b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80145c0:	9300      	str	r3, [sp, #0]
 80145c2:	2340      	movs	r3, #64	; 0x40
 80145c4:	4a7b      	ldr	r2, [pc, #492]	; (80147b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80145c6:	497c      	ldr	r1, [pc, #496]	; (80147b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	47a0      	blx	r4
 80145cc:	2401      	movs	r4, #1
 80145ce:	e0e7      	b.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 80145d0:	4b7a      	ldr	r3, [pc, #488]	; (80147bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	461a      	mov	r2, r3
 80145d6:	6839      	ldr	r1, [r7, #0]
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7fd ffe3 	bl	80125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80145de:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 80145e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d10a      	bne.n	80145fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	695c      	ldr	r4, [r3, #20]
 80145ea:	4b75      	ldr	r3, [pc, #468]	; (80147c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	2343      	movs	r3, #67	; 0x43
 80145f0:	4a70      	ldr	r2, [pc, #448]	; (80147b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80145f2:	4971      	ldr	r1, [pc, #452]	; (80147b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	47a0      	blx	r4
 80145f8:	2401      	movs	r4, #1
 80145fa:	e0d1      	b.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 80145fc:	4b71      	ldr	r3, [pc, #452]	; (80147c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	461a      	mov	r2, r3
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7fd fffd 	bl	8012604 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801460a:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801460c:	4b6e      	ldr	r3, [pc, #440]	; (80147c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	461a      	mov	r2, r3
 8014612:	6839      	ldr	r1, [r7, #0]
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f7fd ffd5 	bl	80125c4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801461a:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801461c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801461e:	2b00      	cmp	r3, #0
 8014620:	d10a      	bne.n	8014638 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	695c      	ldr	r4, [r3, #20]
 8014626:	4b69      	ldr	r3, [pc, #420]	; (80147cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	2347      	movs	r3, #71	; 0x47
 801462c:	4a61      	ldr	r2, [pc, #388]	; (80147b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801462e:	4962      	ldr	r1, [pc, #392]	; (80147b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	47a0      	blx	r4
 8014634:	2401      	movs	r4, #1
 8014636:	e0b3      	b.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8014638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801463a:	781a      	ldrb	r2, [r3, #0]
 801463c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	429a      	cmp	r2, r3
 8014642:	d01a      	beq.n	801467a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	695c      	ldr	r4, [r3, #20]
 8014648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	4618      	mov	r0, r3
 801464e:	f7fd fcb9 	bl	8011fc4 <TfLiteTypeGetName>
 8014652:	4605      	mov	r5, r0
 8014654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	4618      	mov	r0, r3
 801465a:	f7fd fcb3 	bl	8011fc4 <TfLiteTypeGetName>
 801465e:	4603      	mov	r3, r0
 8014660:	9303      	str	r3, [sp, #12]
 8014662:	9502      	str	r5, [sp, #8]
 8014664:	4b5a      	ldr	r3, [pc, #360]	; (80147d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8014666:	9301      	str	r3, [sp, #4]
 8014668:	4b5a      	ldr	r3, [pc, #360]	; (80147d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	2349      	movs	r3, #73	; 0x49
 801466e:	4a51      	ldr	r2, [pc, #324]	; (80147b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8014670:	4959      	ldr	r1, [pc, #356]	; (80147d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	47a0      	blx	r4
 8014676:	2401      	movs	r4, #1
 8014678:	e092      	b.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801467a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801467c:	781a      	ldrb	r2, [r3, #0]
 801467e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	429a      	cmp	r2, r3
 8014684:	d006      	beq.n	8014694 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	695b      	ldr	r3, [r3, #20]
 801468a:	4954      	ldr	r1, [pc, #336]	; (80147dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	4798      	blx	r3
 8014690:	2401      	movs	r4, #1
 8014692:	e085      	b.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8014694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014696:	f04f 32ff 	mov.w	r2, #4294967295
 801469a:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801469c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801469e:	7819      	ldrb	r1, [r3, #0]
 80146a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146a2:	781a      	ldrb	r2, [r3, #0]
 80146a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80146a6:	9303      	str	r3, [sp, #12]
 80146a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146aa:	9302      	str	r3, [sp, #8]
 80146ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146ae:	9301      	str	r3, [sp, #4]
 80146b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 fae4 	bl	8014c84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80146bc:	4603      	mov	r3, r0
 80146be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80146c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d002      	beq.n	80146d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 80146ca:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 80146ce:	e067      	b.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 80146d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	2b09      	cmp	r3, #9
 80146d6:	d162      	bne.n	801479e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 80146d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80146dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe fa45 	bl	8012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 80146e4:	f107 0318 	add.w	r3, r7, #24
 80146e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fe fa3f 	bl	8012b6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80146f0:	f107 0318 	add.w	r3, r7, #24
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fe f9d6 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d001      	beq.n	8014704 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8014700:	f004 fdec 	bl	80192dc <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8014704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014708:	4618      	mov	r0, r3
 801470a:	f7fe f9cc 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801470e:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8014710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014712:	1e5a      	subs	r2, r3, #1
 8014714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014718:	4611      	mov	r1, r2
 801471a:	4618      	mov	r0, r3
 801471c:	f7fe fad0 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014720:	4603      	mov	r3, r0
 8014722:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8014724:	2301      	movs	r3, #1
 8014726:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 8014728:	2301      	movs	r3, #1
 801472a:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801472c:	f107 0318 	add.w	r3, r7, #24
 8014730:	2101      	movs	r1, #1
 8014732:	4618      	mov	r0, r3
 8014734:	f7fe fac4 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014738:	4603      	mov	r3, r0
 801473a:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801473c:	f107 0308 	add.w	r3, r7, #8
 8014740:	4618      	mov	r0, r3
 8014742:	f7f6 fc08 	bl	800af56 <arm_fully_connected_s8_get_buffer_size>
 8014746:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8014748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801474a:	2b00      	cmp	r3, #0
 801474c:	dd11      	ble.n	8014772 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014752:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014756:	3220      	adds	r2, #32
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	4798      	blx	r3
 801475c:	4603      	mov	r3, r0
 801475e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8014762:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8014766:	2b00      	cmp	r3, #0
 8014768:	d007      	beq.n	801477a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801476a:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801476e:	2500      	movs	r5, #0
 8014770:	e004      	b.n	801477c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8014772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014774:	f04f 32ff 	mov.w	r2, #4294967295
 8014778:	621a      	str	r2, [r3, #32]
 801477a:	2501      	movs	r5, #1
 801477c:	f107 0318 	add.w	r3, r7, #24
 8014780:	4618      	mov	r0, r3
 8014782:	f7fe f97a 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
 8014786:	2d01      	cmp	r5, #1
 8014788:	d001      	beq.n	801478e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801478a:	2500      	movs	r5, #0
 801478c:	e000      	b.n	8014790 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801478e:	2501      	movs	r5, #1
 8014790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe f970 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
 801479a:	2d01      	cmp	r5, #1
 801479c:	d100      	bne.n	80147a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801479e:	2400      	movs	r4, #0
}
 80147a0:	4623      	mov	r3, r4
 80147a2:	4618      	mov	r0, r3
 80147a4:	3770      	adds	r7, #112	; 0x70
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bdb0      	pop	{r4, r5, r7, pc}
 80147aa:	bf00      	nop
 80147ac:	0801c34c 	.word	0x0801c34c
 80147b0:	0801b96c 	.word	0x0801b96c
 80147b4:	0801b8bc 	.word	0x0801b8bc
 80147b8:	0801b954 	.word	0x0801b954
 80147bc:	0801c350 	.word	0x0801c350
 80147c0:	0801b980 	.word	0x0801b980
 80147c4:	0801c354 	.word	0x0801c354
 80147c8:	0801c358 	.word	0x0801c358
 80147cc:	0801b994 	.word	0x0801b994
 80147d0:	0801b9c4 	.word	0x0801b9c4
 80147d4:	0801b9d4 	.word	0x0801b9d4
 80147d8:	0801b9a8 	.word	0x0801b9a8
 80147dc:	0801b9e0 	.word	0x0801b9e0

080147e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 80147e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147e2:	b0bf      	sub	sp, #252	; 0xfc
 80147e4:	af08      	add	r7, sp, #32
 80147e6:	6178      	str	r0, [r7, #20]
 80147e8:	6139      	str	r1, [r7, #16]
 80147ea:	60fa      	str	r2, [r7, #12]
 80147ec:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80147ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80147f2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 faaa 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80147fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014800:	4618      	mov	r0, r3
 8014802:	f7fe f950 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014806:	4603      	mov	r3, r0
 8014808:	2b02      	cmp	r3, #2
 801480a:	d001      	beq.n	8014810 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801480c:	f004 fd66 	bl	80192dc <abort>
  const int batches = output_shape.Dims(0);
 8014810:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014814:	2100      	movs	r1, #0
 8014816:	4618      	mov	r0, r3
 8014818:	f7fe fa52 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801481c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8014820:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014824:	2101      	movs	r1, #1
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe fa4a 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801482c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8014830:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014834:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8014838:	4618      	mov	r0, r3
 801483a:	f000 fa89 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801483e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe f92f 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014848:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801484c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014850:	1e5a      	subs	r2, r3, #1
 8014852:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014856:	4611      	mov	r1, r2
 8014858:	4618      	mov	r0, r3
 801485a:	f7fe fa31 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 801485e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8014862:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014866:	68b9      	ldr	r1, [r7, #8]
 8014868:	4618      	mov	r0, r3
 801486a:	f000 fa71 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	695b      	ldr	r3, [r3, #20]
 8014872:	425b      	negs	r3, r3
 8014874:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	69db      	ldr	r3, [r3, #28]
 801487a:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	425b      	negs	r3, r3
 8014882:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	689b      	ldr	r3, [r3, #8]
 8014888:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801489c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80148a0:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 80148a2:	2301      	movs	r3, #1
 80148a4:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 80148a6:	2301      	movs	r3, #1
 80148a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 80148aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80148ae:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 80148b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80148b4:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 80148b6:	2301      	movs	r3, #1
 80148b8:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 80148ba:	2301      	movs	r3, #1
 80148bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 80148be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80148c2:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 80148c4:	2301      	movs	r3, #1
 80148c6:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 80148c8:	2301      	movs	r3, #1
 80148ca:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 80148cc:	2301      	movs	r3, #1
 80148ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 80148d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80148d4:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 80148d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80148da:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 80148dc:	2301      	movs	r3, #1
 80148de:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 80148e0:	2301      	movs	r3, #1
 80148e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 80148e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80148e8:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 80148ea:	2300      	movs	r3, #0
 80148ec:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 80148ee:	2300      	movs	r3, #0
 80148f0:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6a1b      	ldr	r3, [r3, #32]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	db08      	blt.n	801490c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148fe:	68fa      	ldr	r2, [r7, #12]
 8014900:	6a12      	ldr	r2, [r2, #32]
 8014902:	4611      	mov	r1, r2
 8014904:	6978      	ldr	r0, [r7, #20]
 8014906:	4798      	blx	r3
 8014908:	4603      	mov	r3, r0
 801490a:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801490c:	68b8      	ldr	r0, [r7, #8]
 801490e:	f7fe ffa9 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014912:	4605      	mov	r5, r0
 8014914:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8014918:	f7fe ffa4 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801491c:	4606      	mov	r6, r0
 801491e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8014922:	f7ff fa20 	bl	8013d66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801492c:	f7fe ffa9 	bl	8013882 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014930:	4603      	mov	r3, r0
 8014932:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8014936:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801493a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801493e:	f107 001c 	add.w	r0, r7, #28
 8014942:	9306      	str	r3, [sp, #24]
 8014944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014948:	9305      	str	r3, [sp, #20]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	9304      	str	r3, [sp, #16]
 801494e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014952:	9303      	str	r3, [sp, #12]
 8014954:	9602      	str	r6, [sp, #8]
 8014956:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801495a:	9301      	str	r3, [sp, #4]
 801495c:	9500      	str	r5, [sp, #0]
 801495e:	4623      	mov	r3, r4
 8014960:	f7f6 fab2 	bl	800aec8 <arm_fully_connected_s8>
 8014964:	4603      	mov	r3, r0
 8014966:	2b00      	cmp	r3, #0
 8014968:	bf14      	ite	ne
 801496a:	2301      	movne	r3, #1
 801496c:	2300      	moveq	r3, #0
 801496e:	b2db      	uxtb	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	d03e      	beq.n	80149f2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	695c      	ldr	r4, [r3, #20]
 8014978:	68b8      	ldr	r0, [r7, #8]
 801497a:	f7fe ff73 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801497e:	4606      	mov	r6, r0
 8014980:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8014984:	f7fe ff6e 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014988:	6078      	str	r0, [r7, #4]
 801498a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801498e:	f7ff f9ea 	bl	8013d66 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8014992:	6038      	str	r0, [r7, #0]
 8014994:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8014998:	f7fe ff73 	bl	8013882 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801499c:	4603      	mov	r3, r0
 801499e:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80149a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80149a6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80149aa:	f107 001c 	add.w	r0, r7, #28
 80149ae:	9306      	str	r3, [sp, #24]
 80149b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149b4:	9305      	str	r3, [sp, #20]
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	9304      	str	r3, [sp, #16]
 80149ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80149be:	9303      	str	r3, [sp, #12]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	9302      	str	r3, [sp, #8]
 80149c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80149c8:	9301      	str	r3, [sp, #4]
 80149ca:	9600      	str	r6, [sp, #0]
 80149cc:	462b      	mov	r3, r5
 80149ce:	f7f6 fa7b 	bl	800aec8 <arm_fully_connected_s8>
 80149d2:	4603      	mov	r3, r0
 80149d4:	461a      	mov	r2, r3
 80149d6:	2300      	movs	r3, #0
 80149d8:	9303      	str	r3, [sp, #12]
 80149da:	9202      	str	r2, [sp, #8]
 80149dc:	4b0f      	ldr	r3, [pc, #60]	; (8014a1c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	4b0f      	ldr	r3, [pc, #60]	; (8014a20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	23a6      	movs	r3, #166	; 0xa6
 80149e6:	4a0f      	ldr	r2, [pc, #60]	; (8014a24 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 80149e8:	490f      	ldr	r1, [pc, #60]	; (8014a28 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 80149ea:	6978      	ldr	r0, [r7, #20]
 80149ec:	47a0      	blx	r4
 80149ee:	2401      	movs	r4, #1
 80149f0:	e000      	b.n	80149f4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 80149f2:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80149f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fe f83e 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80149fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fe f839 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8014a08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fe f834 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014a12:	4623      	mov	r3, r4
 8014a14:	4618      	mov	r0, r3
 8014a16:	37dc      	adds	r7, #220	; 0xdc
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a1c:	0801bac4 	.word	0x0801bac4
 8014a20:	0801bad8 	.word	0x0801bad8
 8014a24:	0801b8bc 	.word	0x0801b8bc
 8014a28:	0801baa8 	.word	0x0801baa8

08014a2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014a2c:	b590      	push	{r4, r7, lr}
 8014a2e:	b0d1      	sub	sp, #324	; 0x144
 8014a30:	af04      	add	r7, sp, #16
 8014a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014a3a:	6018      	str	r0, [r3, #0]
 8014a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a44:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8014a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	695b      	ldr	r3, [r3, #20]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d101      	bne.n	8014a5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8014a56:	f004 fc41 	bl	80192dc <abort>
  const auto* params =
 8014a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	695b      	ldr	r3, [r3, #20]
 8014a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8014a6a:	4b67      	ldr	r3, [pc, #412]	; (8014c08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8014a6c:	681a      	ldr	r2, [r3, #0]
 8014a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a72:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014a7e:	6809      	ldr	r1, [r1, #0]
 8014a80:	6818      	ldr	r0, [r3, #0]
 8014a82:	f7fe f9f1 	bl	8012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014a86:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8014a8a:	4b60      	ldr	r3, [pc, #384]	; (8014c0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a92:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014a9e:	6809      	ldr	r1, [r1, #0]
 8014aa0:	6818      	ldr	r0, [r3, #0]
 8014aa2:	f7fe f9e1 	bl	8012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014aa6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8014aaa:	4b59      	ldr	r3, [pc, #356]	; (8014c10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8014aac:	681a      	ldr	r2, [r3, #0]
 8014aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014ab2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014abe:	6809      	ldr	r1, [r1, #0]
 8014ac0:	6818      	ldr	r0, [r3, #0]
 8014ac2:	f7fe f9d1 	bl	8012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014ac6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8014aca:	4b52      	ldr	r3, [pc, #328]	; (8014c14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014ad2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014ade:	6809      	ldr	r1, [r1, #0]
 8014ae0:	6818      	ldr	r0, [r3, #0]
 8014ae2:	f7fe f9d1 	bl	8012e88 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8014ae6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8014aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	691b      	ldr	r3, [r3, #16]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d101      	bne.n	8014afe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 8014afa:	f004 fbef 	bl	80192dc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8014afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	691b      	ldr	r3, [r3, #16]
 8014b0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8014b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b12:	7a1b      	ldrb	r3, [r3, #8]
 8014b14:	2b09      	cmp	r3, #9
 8014b16:	d021      	beq.n	8014b5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 8014b18:	2b09      	cmp	r3, #9
 8014b1a:	dc55      	bgt.n	8014bc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d002      	beq.n	8014b26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 8014b20:	2b03      	cmp	r3, #3
 8014b22:	d036      	beq.n	8014b92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 8014b24:	e050      	b.n	8014bc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	695c      	ldr	r4, [r3, #20]
 8014b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b36:	7a1b      	ldrb	r3, [r3, #8]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fd fa43 	bl	8011fc4 <TfLiteTypeGetName>
 8014b3e:	4602      	mov	r2, r0
 8014b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b44:	7a1b      	ldrb	r3, [r3, #8]
 8014b46:	4619      	mov	r1, r3
 8014b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b4c:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014b50:	460b      	mov	r3, r1
 8014b52:	4931      	ldr	r1, [pc, #196]	; (8014c18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8014b54:	6800      	ldr	r0, [r0, #0]
 8014b56:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e04f      	b.n	8014bfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8014b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b60:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b68:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014b70:	9302      	str	r3, [sp, #8]
 8014b72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014b76:	9301      	str	r3, [sp, #4]
 8014b78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8014b7c:	9300      	str	r3, [sp, #0]
 8014b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014b86:	6809      	ldr	r1, [r1, #0]
 8014b88:	6800      	ldr	r0, [r0, #0]
 8014b8a:	f7ff fe29 	bl	80147e0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8014b8e:	4603      	mov	r3, r0
                               output);
 8014b90:	e034      	b.n	8014bfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	695c      	ldr	r4, [r3, #20]
 8014b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ba2:	7a1b      	ldrb	r3, [r3, #8]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7fd fa0d 	bl	8011fc4 <TfLiteTypeGetName>
 8014baa:	4602      	mov	r2, r0
 8014bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014bb0:	7a1b      	ldrb	r3, [r3, #8]
 8014bb2:	4619      	mov	r1, r3
 8014bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014bb8:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	4916      	ldr	r1, [pc, #88]	; (8014c18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8014bc0:	6800      	ldr	r0, [r0, #0]
 8014bc2:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	e019      	b.n	8014bfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	695c      	ldr	r4, [r3, #20]
 8014bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014bd8:	7a1b      	ldrb	r3, [r3, #8]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fd f9f2 	bl	8011fc4 <TfLiteTypeGetName>
 8014be0:	4602      	mov	r2, r0
 8014be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014be6:	7a1b      	ldrb	r3, [r3, #8]
 8014be8:	4619      	mov	r1, r3
 8014bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014bee:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	4908      	ldr	r1, [pc, #32]	; (8014c18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8014bf6:	6800      	ldr	r0, [r0, #0]
 8014bf8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014bfa:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd90      	pop	{r4, r7, pc}
 8014c06:	bf00      	nop
 8014c08:	0801c34c 	.word	0x0801c34c
 8014c0c:	0801c350 	.word	0x0801c350
 8014c10:	0801c354 	.word	0x0801c354
 8014c14:	0801c358 	.word	0x0801c358
 8014c18:	0801bbfc 	.word	0x0801bbfc

08014c1c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8014c1c:	b4b0      	push	{r4, r5, r7}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8014c24:	4b13      	ldr	r3, [pc, #76]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c26:	4a14      	ldr	r2, [pc, #80]	; (8014c78 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8014c28:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8014c2a:	4b12      	ldr	r3, [pc, #72]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8014c30:	4b10      	ldr	r3, [pc, #64]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c32:	4a12      	ldr	r2, [pc, #72]	; (8014c7c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8014c34:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8014c36:	4b0f      	ldr	r3, [pc, #60]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c38:	4a11      	ldr	r2, [pc, #68]	; (8014c80 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8014c3a:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8014c3c:	4b0d      	ldr	r3, [pc, #52]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8014c42:	4b0c      	ldr	r3, [pc, #48]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c44:	2200      	movs	r2, #0
 8014c46:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8014c48:	4b0a      	ldr	r3, [pc, #40]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8014c4e:	4b09      	ldr	r3, [pc, #36]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	4a07      	ldr	r2, [pc, #28]	; (8014c74 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014c58:	461c      	mov	r4, r3
 8014c5a:	4615      	mov	r5, r2
 8014c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	370c      	adds	r7, #12
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bcb0      	pop	{r4, r5, r7}
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop
 8014c74:	20000434 	.word	0x20000434
 8014c78:	08014547 	.word	0x08014547
 8014c7c:	08014575 	.word	0x08014575
 8014c80:	08014a2d 	.word	0x08014a2d

08014c84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b08a      	sub	sp, #40	; 0x28
 8014c88:	af02      	add	r7, sp, #8
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	607b      	str	r3, [r7, #4]
 8014c8e:	460b      	mov	r3, r1
 8014c90:	72fb      	strb	r3, [r7, #11]
 8014c92:	4613      	mov	r3, r2
 8014c94:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8014c96:	7abb      	ldrb	r3, [r7, #10]
 8014c98:	2b01      	cmp	r3, #1
 8014c9a:	d03e      	beq.n	8014d1a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8014c9c:	f04f 0200 	mov.w	r2, #0
 8014ca0:	f04f 0300 	mov.w	r3, #0
 8014ca4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8014ca8:	f107 0310 	add.w	r3, r7, #16
 8014cac:	9301      	str	r3, [sp, #4]
 8014cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb0:	9300      	str	r3, [sp, #0]
 8014cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cb6:	6879      	ldr	r1, [r7, #4]
 8014cb8:	68f8      	ldr	r0, [r7, #12]
 8014cba:	f7fd fcb5 	bl	8012628 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	77fb      	strb	r3, [r7, #31]
 8014cc2:	7ffb      	ldrb	r3, [r7, #31]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d001      	beq.n	8014ccc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8014cc8:	7ffb      	ldrb	r3, [r7, #31]
 8014cca:	e027      	b.n	8014d1c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8014ccc:	ed97 7b04 	vldr	d7, [r7, #16]
 8014cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd4:	3304      	adds	r3, #4
 8014cd6:	4619      	mov	r1, r3
 8014cd8:	4610      	mov	r0, r2
 8014cda:	eeb0 0a47 	vmov.f32	s0, s14
 8014cde:	eef0 0a67 	vmov.f32	s1, s15
 8014ce2:	f7fd f9f5 	bl	80120d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	691a      	ldr	r2, [r3, #16]
 8014cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cec:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8014cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf0:	691a      	ldr	r2, [r3, #16]
 8014cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cf4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8014cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf8:	691a      	ldr	r2, [r3, #16]
 8014cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cfc:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8014cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d00:	f103 0208 	add.w	r2, r3, #8
 8014d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d06:	330c      	adds	r3, #12
 8014d08:	7af9      	ldrb	r1, [r7, #11]
 8014d0a:	9300      	str	r3, [sp, #0]
 8014d0c:	4613      	mov	r3, r2
 8014d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	f7fd fe15 	bl	8012940 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8014d16:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8014d18:	e000      	b.n	8014d1c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8014d1a:	2300      	movs	r3, #0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3720      	adds	r7, #32
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	da01      	bge.n	8014d42 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	e000      	b.n	8014d44 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8014d42:	687b      	ldr	r3, [r7, #4]
    }
 8014d44:	4618      	mov	r0, r3
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr

08014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d003      	beq.n	8014d68 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d103      	bne.n	8014d70 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f7fd fe65 	bl	8012a38 <_ZN6tflite12RuntimeShapeC1Ev>
 8014d6e:	e00d      	b.n	8014d8c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	3304      	adds	r3, #4
 8014d80:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8014d82:	68fa      	ldr	r2, [r7, #12]
 8014d84:	6939      	ldr	r1, [r7, #16]
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f7fd fe64 	bl	8012a54 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	3718      	adds	r7, #24
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}

08014d94 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b086      	sub	sp, #24
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f7fd fe81 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014da4:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	db03      	blt.n	8014db4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8014dac:	683a      	ldr	r2, [r7, #0]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	db01      	blt.n	8014db8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8014db4:	f004 fa92 	bl	80192dc <abort>
  const auto* dims_data = shape.DimsData();
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7fd ffa6 	bl	8012d0a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8014dbe:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	613b      	str	r3, [r7, #16]
 8014dc8:	693a      	ldr	r2, [r7, #16]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	da12      	bge.n	8014df6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8014dd0:	693a      	ldr	r2, [r7, #16]
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d005      	beq.n	8014de4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	68ba      	ldr	r2, [r7, #8]
 8014dde:	4413      	add	r3, r2
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	e000      	b.n	8014de6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8014de4:	2301      	movs	r3, #1
 8014de6:	697a      	ldr	r2, [r7, #20]
 8014de8:	fb02 f303 	mul.w	r3, r2, r3
 8014dec:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	3301      	adds	r3, #1
 8014df2:	613b      	str	r3, [r7, #16]
 8014df4:	e7e8      	b.n	8014dc8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8014df6:	697b      	ldr	r3, [r7, #20]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3718      	adds	r7, #24
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8014e00:	b590      	push	{r4, r7, lr}
 8014e02:	b087      	sub	sp, #28
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8014e0c:	68f8      	ldr	r0, [r7, #12]
 8014e0e:	f7fd fe4a 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014e12:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8014e14:	2300      	movs	r3, #0
 8014e16:	617b      	str	r3, [r7, #20]
 8014e18:	697a      	ldr	r2, [r7, #20]
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	da15      	bge.n	8014e4c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8014e20:	697a      	ldr	r2, [r7, #20]
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d00d      	beq.n	8014e44 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8014e28:	6979      	ldr	r1, [r7, #20]
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f7fd ff48 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e30:	4604      	mov	r4, r0
 8014e32:	6979      	ldr	r1, [r7, #20]
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7fd ff43 	bl	8012cc0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	429c      	cmp	r4, r3
 8014e3e:	d001      	beq.n	8014e44 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8014e40:	f004 fa4c 	bl	80192dc <abort>
  for (int i = 0; i < dims_count; ++i) {
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	3301      	adds	r3, #1
 8014e48:	617b      	str	r3, [r7, #20]
 8014e4a:	e7e5      	b.n	8014e18 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8014e4c:	68b9      	ldr	r1, [r7, #8]
 8014e4e:	68f8      	ldr	r0, [r7, #12]
 8014e50:	f7ff ffa0 	bl	8014d94 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8014e54:	4603      	mov	r3, r0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	371c      	adds	r7, #28
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd90      	pop	{r4, r7, pc}

08014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b082      	sub	sp, #8
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8014e66:	2100      	movs	r1, #0
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f7fe fb23 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014e6e:	4603      	mov	r3, r0
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f000 f805 	bl	8014e90 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8014e86:	4603      	mov	r3, r0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014e98:	2101      	movs	r1, #1
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7fe fb0a 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014ea0:	4603      	mov	r3, r0
  }
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3708      	adds	r7, #8
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8014eaa:	b590      	push	{r4, r7, lr}
 8014eac:	b085      	sub	sp, #20
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	60f8      	str	r0, [r7, #12]
 8014eb2:	60b9      	str	r1, [r7, #8]
 8014eb4:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014eb6:	f107 0308 	add.w	r3, r7, #8
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7ff f8b4 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014ec0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014ec2:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014ec4:	1d3b      	adds	r3, r7, #4
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7ff f8ae 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014ecc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	4621      	mov	r1, r4
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f7ff fb0b 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014eda:	4603      	mov	r3, r0
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7ff f831 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014ee2:	4603      	mov	r3, r0
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3714      	adds	r7, #20
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd90      	pop	{r4, r7, pc}

08014eec <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	bf0c      	ite	eq
 8014efa:	2301      	moveq	r3, #1
 8014efc:	2300      	movne	r3, #0
 8014efe:	b2db      	uxtb	r3, r3
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7fe fef9 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014f06:	4603      	mov	r3, r0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b08a      	sub	sp, #40	; 0x28
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8014f18:	482c      	ldr	r0, [pc, #176]	; (8014fcc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8014f1a:	f7ff ffa0 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7ff f88c 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014f26:	4603      	mov	r3, r0
 8014f28:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8014f2a:	4829      	ldr	r0, [pc, #164]	; (8014fd0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8014f2c:	f7ff ff97 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014f30:	4603      	mov	r3, r0
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff f883 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8014f3c:	f000 f86c 	bl	8015018 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8014f40:	4603      	mov	r3, r0
 8014f42:	4619      	mov	r1, r3
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f000 f870 	bl	801502a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8014f4e:	69f9      	ldr	r1, [r7, #28]
 8014f50:	69f8      	ldr	r0, [r7, #28]
 8014f52:	f000 f83f 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f56:	4603      	mov	r3, r0
 8014f58:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8014f5a:	69f9      	ldr	r1, [r7, #28]
 8014f5c:	69b8      	ldr	r0, [r7, #24]
 8014f5e:	f000 f839 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f62:	4603      	mov	r3, r0
 8014f64:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8014f66:	69b9      	ldr	r1, [r7, #24]
 8014f68:	69b8      	ldr	r0, [r7, #24]
 8014f6a:	f000 f833 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8014f72:	6938      	ldr	r0, [r7, #16]
 8014f74:	f000 f877 	bl	8015066 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8014f7c:	6979      	ldr	r1, [r7, #20]
 8014f7e:	68f8      	ldr	r0, [r7, #12]
 8014f80:	f000 f853 	bl	801502a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014f84:	4603      	mov	r3, r0
 8014f86:	6a39      	ldr	r1, [r7, #32]
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f000 f823 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	69b9      	ldr	r1, [r7, #24]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 f849 	bl	801502a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f000 f879 	bl	8015092 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8014fa4:	68b9      	ldr	r1, [r7, #8]
 8014fa6:	69f8      	ldr	r0, [r7, #28]
 8014fa8:	f000 f83f 	bl	801502a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014fac:	4603      	mov	r3, r0
 8014fae:	4619      	mov	r1, r3
 8014fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fb2:	f000 f80f 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	4619      	mov	r1, r3
 8014fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fbc:	f000 f87f 	bl	80150be <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014fc0:	4603      	mov	r3, r0
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3728      	adds	r7, #40	; 0x28
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	70f5a894 	.word	0x70f5a894
 8014fd0:	2aaaaaab 	.word	0x2aaaaaab

08014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8014fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fd6:	b085      	sub	sp, #20
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8014fde:	1d3b      	adds	r3, r7, #4
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7ff f821 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	681d      	ldr	r5, [r3, #0]
 8014fea:	463b      	mov	r3, r7
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7ff f81b 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	681e      	ldr	r6, [r3, #0]
 8014ff6:	f107 030c 	add.w	r3, r7, #12
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7ff f814 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015000:	4604      	mov	r4, r0
 8015002:	4631      	mov	r1, r6
 8015004:	4628      	mov	r0, r5
 8015006:	f7fd fde5 	bl	8012bd4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801500a:	4603      	mov	r3, r0
 801500c:	6023      	str	r3, [r4, #0]
  return c;
 801500e:	68fb      	ldr	r3, [r7, #12]
}
 8015010:	4618      	mov	r0, r3
 8015012:	3714      	adds	r7, #20
 8015014:	46bd      	mov	sp, r7
 8015016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015018 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8015018:	b580      	push	{r7, lr}
 801501a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801501c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015020:	f7ff f80d 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015024:	4603      	mov	r3, r0
  }
 8015026:	4618      	mov	r0, r3
 8015028:	bd80      	pop	{r7, pc}

0801502a <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801502a:	b590      	push	{r4, r7, lr}
 801502c:	b083      	sub	sp, #12
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
 8015032:	6039      	str	r1, [r7, #0]
 8015034:	1d3b      	adds	r3, r7, #4
 8015036:	4618      	mov	r0, r3
 8015038:	f7fe fff6 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801503c:	4603      	mov	r3, r0
 801503e:	681c      	ldr	r4, [r3, #0]
 8015040:	463b      	mov	r3, r7
 8015042:	4618      	mov	r0, r3
 8015044:	f7fe fff0 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015048:	4603      	mov	r3, r0
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4619      	mov	r1, r3
 801504e:	4620      	mov	r0, r4
 8015050:	f7fe fe30 	bl	8013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015054:	4603      	mov	r3, r0
 8015056:	4618      	mov	r0, r3
 8015058:	f7fe ff74 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801505c:	4603      	mov	r3, r0
 801505e:	4618      	mov	r0, r3
 8015060:	370c      	adds	r7, #12
 8015062:	46bd      	mov	sp, r7
 8015064:	bd90      	pop	{r4, r7, pc}

08015066 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8015066:	b580      	push	{r7, lr}
 8015068:	b082      	sub	sp, #8
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801506e:	1d3b      	adds	r3, r7, #4
 8015070:	4618      	mov	r0, r3
 8015072:	f7fe ffd9 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015076:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4618      	mov	r0, r3
 801507c:	f000 f83d 	bl	80150fa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8015080:	4603      	mov	r3, r0
 8015082:	4618      	mov	r0, r3
 8015084:	f7fe ff5e 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015088:	4603      	mov	r3, r0
}
 801508a:	4618      	mov	r0, r3
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8015092:	b580      	push	{r7, lr}
 8015094:	b082      	sub	sp, #8
 8015096:	af00      	add	r7, sp, #0
 8015098:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801509a:	1d3b      	adds	r3, r7, #4
 801509c:	4618      	mov	r0, r3
 801509e:	f7fe ffc3 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80150a2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7ff fee6 	bl	8014e78 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 80150ac:	4603      	mov	r3, r0
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fe ff48 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80150b4:	4603      	mov	r3, r0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 80150be:	b590      	push	{r4, r7, lr}
 80150c0:	b083      	sub	sp, #12
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
 80150c6:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80150c8:	1d3b      	adds	r3, r7, #4
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7fe ffac 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80150d0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80150d2:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80150d4:	463b      	mov	r3, r7
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7fe ffa6 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80150dc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4619      	mov	r1, r3
 80150e2:	4620      	mov	r0, r4
 80150e4:	f000 f815 	bl	8015112 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80150e8:	4603      	mov	r3, r0
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7fe ff2a 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80150f0:	4603      	mov	r3, r0
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	370c      	adds	r7, #12
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd90      	pop	{r4, r7, pc}

080150fa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b082      	sub	sp, #8
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 f813 	bl	801512e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8015108:	4603      	mov	r3, r0
}
 801510a:	4618      	mov	r0, r3
 801510c:	3708      	adds	r7, #8
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}

08015112 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8015112:	b580      	push	{r7, lr}
 8015114:	b082      	sub	sp, #8
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
 801511a:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f000 f812 	bl	8015148 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8015124:	4603      	mov	r3, r0
}
 8015126:	4618      	mov	r0, r3
 8015128:	3708      	adds	r7, #8
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801512e:	b580      	push	{r7, lr}
 8015130:	b082      	sub	sp, #8
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015136:	2102      	movs	r1, #2
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7fe f9bb 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801513e:	4603      	mov	r3, r0
  }
 8015140:	4618      	mov	r0, r3
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
 8015152:	6839      	ldr	r1, [r7, #0]
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7fe fdad 	bl	8013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801515a:	4603      	mov	r3, r0
 801515c:	4618      	mov	r0, r3
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015164:	b480      	push	{r7}
 8015166:	b083      	sub	sp, #12
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	781a      	ldrb	r2, [r3, #0]
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	429a      	cmp	r2, r3
 8015178:	d201      	bcs.n	801517e <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	e000      	b.n	8015180 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801517e:	687b      	ldr	r3, [r7, #4]
    }
 8015180:	4618      	mov	r0, r3
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d002      	beq.n	80151a0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	e000      	b.n	80151a2 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 80151a0:	2300      	movs	r3, #0
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	370c      	adds	r7, #12
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr
	...

080151b0 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b086      	sub	sp, #24
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	4603      	mov	r3, r0
 80151b8:	6039      	str	r1, [r7, #0]
 80151ba:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 80151bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151c0:	11db      	asrs	r3, r3, #7
 80151c2:	b21b      	sxth	r3, r3
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80151ca:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 80151cc:	8afb      	ldrh	r3, [r7, #22]
 80151ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151d2:	d306      	bcc.n	80151e2 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 80151d4:	4b1a      	ldr	r3, [pc, #104]	; (8015240 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 80151d6:	4a1b      	ldr	r2, [pc, #108]	; (8015244 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 80151d8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80151dc:	481a      	ldr	r0, [pc, #104]	; (8015248 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 80151de:	f004 f885 	bl	80192ec <__assert_func>
  int16_t offset = value & 0x7f;
 80151e2:	88fb      	ldrh	r3, [r7, #6]
 80151e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151e8:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 80151ea:	8afb      	ldrh	r3, [r7, #22]
 80151ec:	005b      	lsls	r3, r3, #1
 80151ee:	683a      	ldr	r2, [r7, #0]
 80151f0:	4413      	add	r3, r2
 80151f2:	881b      	ldrh	r3, [r3, #0]
 80151f4:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 80151f6:	8afb      	ldrh	r3, [r7, #22]
 80151f8:	3301      	adds	r3, #1
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	683a      	ldr	r2, [r7, #0]
 80151fe:	4413      	add	r3, r2
 8015200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015204:	b29a      	uxth	r2, r3
 8015206:	8afb      	ldrh	r3, [r7, #22]
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	6839      	ldr	r1, [r7, #0]
 801520c:	440b      	add	r3, r1
 801520e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015212:	b29b      	uxth	r3, r3
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	b29b      	uxth	r3, r3
 8015218:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801521a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801521e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015222:	fb02 f303 	mul.w	r3, r2, r3
 8015226:	3340      	adds	r3, #64	; 0x40
 8015228:	11db      	asrs	r3, r3, #7
 801522a:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	b29a      	uxth	r2, r3
 8015230:	8a7b      	ldrh	r3, [r7, #18]
 8015232:	4413      	add	r3, r2
 8015234:	b29b      	uxth	r3, r3
 8015236:	b21b      	sxth	r3, r3
}
 8015238:	4618      	mov	r0, r3
 801523a:	3718      	adds	r7, #24
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	0801bc18 	.word	0x0801bc18
 8015244:	0801bc44 	.word	0x0801bc44
 8015248:	0801bc88 	.word	0x0801bc88

0801524c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801524c:	b580      	push	{r7, lr}
 801524e:	b08a      	sub	sp, #40	; 0x28
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
 8015258:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525c:	687a      	ldr	r2, [r7, #4]
 801525e:	fb03 f202 	mul.w	r2, r3, r2
 8015262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015264:	4413      	add	r3, r2
 8015266:	005b      	lsls	r3, r3, #1
 8015268:	68ba      	ldr	r2, [r7, #8]
 801526a:	4413      	add	r3, r2
 801526c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015270:	461a      	mov	r2, r3
 8015272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	6899      	ldr	r1, [r3, #8]
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8015282:	461a      	mov	r2, r3
 8015284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015286:	f7fd fdab 	bl	8012de0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801528a:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801528c:	6a3b      	ldr	r3, [r7, #32]
 801528e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8015292:	337f      	adds	r3, #127	; 0x7f
 8015294:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8015296:	4b12      	ldr	r3, [pc, #72]	; (80152e0 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8015298:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801529a:	f107 0214 	add.w	r2, r7, #20
 801529e:	f107 0310 	add.w	r3, r7, #16
 80152a2:	4611      	mov	r1, r2
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fd fbb3 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 80152aa:	4602      	mov	r2, r0
 80152ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80152b0:	61bb      	str	r3, [r7, #24]
 80152b2:	f107 0318 	add.w	r3, r7, #24
 80152b6:	4619      	mov	r1, r3
 80152b8:	4610      	mov	r0, r2
 80152ba:	f7fd fb95 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80152be:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 80152c0:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 80152c2:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80152c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80152cc:	4611      	mov	r1, r2
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7ff ff6e 	bl	80151b0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 80152d4:	4603      	mov	r3, r0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3728      	adds	r7, #40	; 0x28
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	ffff8000 	.word	0xffff8000

080152e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80152e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e8:	b0ab      	sub	sp, #172	; 0xac
 80152ea:	af02      	add	r7, sp, #8
 80152ec:	63f8      	str	r0, [r7, #60]	; 0x3c
 80152ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80152f0:	637a      	str	r2, [r7, #52]	; 0x34
 80152f2:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80152f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80152f6:	f7fd fbd6 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80152fa:	4603      	mov	r3, r0
 80152fc:	3b01      	subs	r3, #1
 80152fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015304:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8015308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801530a:	f7ff fd79 	bl	8014e00 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801530e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015318:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801531c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801531e:	f7fe fd31 	bl	8013d84 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015322:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 8015326:	2300      	movs	r3, #0
 8015328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801532c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015334:	429a      	cmp	r2, r3
 8015336:	f280 8157 	bge.w	80155e8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801533a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801533e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8015342:	2300      	movs	r3, #0
 8015344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015348:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801534c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015350:	429a      	cmp	r2, r3
 8015352:	da1c      	bge.n	801538e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015354:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801535c:	fb03 f202 	mul.w	r2, r3, r2
 8015360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015364:	4413      	add	r3, r2
 8015366:	005a      	lsls	r2, r3, #1
 8015368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801536a:	441a      	add	r2, r3
 801536c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8015370:	4611      	mov	r1, r2
 8015372:	4618      	mov	r0, r3
 8015374:	f7ff fcd6 	bl	8014d24 <_ZSt3maxIsERKT_S2_S2_>
 8015378:	4603      	mov	r3, r0
 801537a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801537e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8015382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015386:	3301      	adds	r3, #1
 8015388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801538c:	e7dc      	b.n	8015348 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801538e:	2300      	movs	r3, #0
 8015390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 8015394:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801539c:	fb02 f303 	mul.w	r3, r2, r3
 80153a0:	005a      	lsls	r2, r3, #1
 80153a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80153a6:	4413      	add	r3, r2
 80153a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 80153aa:	2300      	movs	r3, #0
 80153ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80153b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80153b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153b8:	429a      	cmp	r2, r3
 80153ba:	da28      	bge.n	801540e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 80153bc:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 80153c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80153c4:	005a      	lsls	r2, r3, #1
 80153c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80153c8:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 80153ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80153ce:	9301      	str	r3, [sp, #4]
 80153d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80153d4:	9300      	str	r3, [sp, #0]
 80153d6:	460b      	mov	r3, r1
 80153d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80153dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80153de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80153e0:	f7ff ff34 	bl	801524c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 80153e4:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 80153e6:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 80153e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80153ec:	005a      	lsls	r2, r3, #1
 80153ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80153f0:	4413      	add	r3, r2
 80153f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153f6:	461a      	mov	r2, r3
 80153f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80153fc:	4413      	add	r3, r2
 80153fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 8015402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015406:	3301      	adds	r3, #1
 8015408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801540c:	e7d0      	b.n	80153b0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801540e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015412:	4618      	mov	r0, r3
 8015414:	f7fe fd84 	bl	8013f20 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8015418:	4603      	mov	r3, r0
 801541a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801541e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015422:	17da      	asrs	r2, r3, #31
 8015424:	623b      	str	r3, [r7, #32]
 8015426:	627a      	str	r2, [r7, #36]	; 0x24
 8015428:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801542c:	1e59      	subs	r1, r3, #1
 801542e:	f1a1 0320 	sub.w	r3, r1, #32
 8015432:	f1c1 0220 	rsb	r2, r1, #32
 8015436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015438:	fa00 f901 	lsl.w	r9, r0, r1
 801543c:	6a38      	ldr	r0, [r7, #32]
 801543e:	fa00 f303 	lsl.w	r3, r0, r3
 8015442:	ea49 0903 	orr.w	r9, r9, r3
 8015446:	6a3b      	ldr	r3, [r7, #32]
 8015448:	fa23 f202 	lsr.w	r2, r3, r2
 801544c:	ea49 0902 	orr.w	r9, r9, r2
 8015450:	6a3b      	ldr	r3, [r7, #32]
 8015452:	fa03 f801 	lsl.w	r8, r3, r1
 8015456:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801545a:	61bb      	str	r3, [r7, #24]
 801545c:	f149 0300 	adc.w	r3, r9, #0
 8015460:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 8015462:	f04f 0200 	mov.w	r2, #0
 8015466:	f04f 0300 	mov.w	r3, #0
 801546a:	69b9      	ldr	r1, [r7, #24]
 801546c:	0b8a      	lsrs	r2, r1, #14
 801546e:	69f9      	ldr	r1, [r7, #28]
 8015470:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8015474:	69f9      	ldr	r1, [r7, #28]
 8015476:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8015478:	4613      	mov	r3, r2
 801547a:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801547c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801547e:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8015482:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8015484:	4b5b      	ldr	r3, [pc, #364]	; (80155f4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 8015486:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 8015488:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801548c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015490:	4611      	mov	r1, r2
 8015492:	4618      	mov	r0, r3
 8015494:	f7fd fabc 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8015498:	4602      	mov	r2, r0
 801549a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801549e:	657b      	str	r3, [r7, #84]	; 0x54
 80154a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80154a4:	4619      	mov	r1, r3
 80154a6:	4610      	mov	r0, r2
 80154a8:	f7fd fa9e 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80154ac:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 80154ae:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 80154b0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 80154b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 80154b8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80154bc:	4611      	mov	r1, r2
 80154be:	4618      	mov	r0, r3
 80154c0:	f7ff fe76 	bl	80151b0 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 80154c4:	4603      	mov	r3, r0
 80154c6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 80154ca:	2300      	movs	r3, #0
 80154cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80154d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80154d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80154d8:	429a      	cmp	r2, r3
 80154da:	da7f      	bge.n	80155dc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 80154dc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80154e0:	f1c3 031f 	rsb	r3, r3, #31
 80154e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 80154e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80154ec:	1e5a      	subs	r2, r3, #1
 80154ee:	2301      	movs	r3, #1
 80154f0:	4093      	lsls	r3, r2
 80154f2:	17da      	asrs	r2, r3, #31
 80154f4:	603b      	str	r3, [r7, #0]
 80154f6:	607a      	str	r2, [r7, #4]
 80154f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80154fc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8015500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015504:	005a      	lsls	r2, r3, #1
 8015506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015508:	4413      	add	r3, r2
 801550a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801550e:	b21b      	sxth	r3, r3
 8015510:	17da      	asrs	r2, r3, #31
 8015512:	613b      	str	r3, [r7, #16]
 8015514:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8015516:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801551a:	17da      	asrs	r2, r3, #31
 801551c:	60bb      	str	r3, [r7, #8]
 801551e:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8015520:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015524:	460b      	mov	r3, r1
 8015526:	68ba      	ldr	r2, [r7, #8]
 8015528:	fb02 f203 	mul.w	r2, r2, r3
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8015532:	4601      	mov	r1, r0
 8015534:	fb01 f303 	mul.w	r3, r1, r3
 8015538:	4413      	add	r3, r2
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	68b9      	ldr	r1, [r7, #8]
 801553e:	fba2 ab01 	umull	sl, fp, r2, r1
 8015542:	445b      	add	r3, fp
 8015544:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8015546:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801554a:	eb1a 0502 	adds.w	r5, sl, r2
 801554e:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 8015552:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 8015556:	f1c1 0320 	rsb	r3, r1, #32
 801555a:	f1b1 0220 	subs.w	r2, r1, #32
 801555e:	fa25 f001 	lsr.w	r0, r5, r1
 8015562:	62b8      	str	r0, [r7, #40]	; 0x28
 8015564:	fa06 f303 	lsl.w	r3, r6, r3
 8015568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801556a:	ea40 0003 	orr.w	r0, r0, r3
 801556e:	62b8      	str	r0, [r7, #40]	; 0x28
 8015570:	d404      	bmi.n	801557c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 8015572:	fa46 f202 	asr.w	r2, r6, r2
 8015576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015578:	4313      	orrs	r3, r2
 801557a:	62bb      	str	r3, [r7, #40]	; 0x28
 801557c:	fa46 f301 	asr.w	r3, r6, r1
 8015580:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8015582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015584:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8015586:	2300      	movs	r3, #0
 8015588:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801558a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801558e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015592:	4611      	mov	r1, r2
 8015594:	4618      	mov	r0, r3
 8015596:	f7fd fa3b 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 801559a:	4602      	mov	r2, r0
 801559c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80155a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80155a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80155a6:	4619      	mov	r1, r3
 80155a8:	4610      	mov	r0, r2
 80155aa:	f7fd fa1d 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 80155ae:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 80155b0:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 80155b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80155b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80155ba:	fb03 f202 	mul.w	r2, r3, r2
 80155be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155c2:	4413      	add	r3, r2
 80155c4:	005a      	lsls	r2, r3, #1
 80155c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80155ca:	441a      	add	r2, r3
 80155cc:	b20b      	sxth	r3, r1
 80155ce:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 80155d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155d4:	3301      	adds	r3, #1
 80155d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80155da:	e779      	b.n	80154d0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 80155dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80155e0:	3301      	adds	r3, #1
 80155e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80155e6:	e6a1      	b.n	801532c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 80155e8:	bf00      	nop
 80155ea:	37a4      	adds	r7, #164	; 0xa4
 80155ec:	46bd      	mov	sp, r7
 80155ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155f2:	bf00      	nop
 80155f4:	ffff8000 	.word	0xffff8000

080155f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 80155f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155fc:	b0bc      	sub	sp, #240	; 0xf0
 80155fe:	af04      	add	r7, sp, #16
 8015600:	60f8      	str	r0, [r7, #12]
 8015602:	60b9      	str	r1, [r7, #8]
 8015604:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	7a1b      	ldrb	r3, [r3, #8]
 801560a:	2b03      	cmp	r3, #3
 801560c:	d127      	bne.n	801565e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801560e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015612:	68f9      	ldr	r1, [r7, #12]
 8015614:	4618      	mov	r0, r3
 8015616:	f7ff fb9b 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801561a:	68f8      	ldr	r0, [r7, #12]
 801561c:	f7fe f98e 	bl	801393c <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8015620:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 8015622:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015626:	68b9      	ldr	r1, [r7, #8]
 8015628:	4618      	mov	r0, r3
 801562a:	f7ff fb91 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801562e:	68b8      	ldr	r0, [r7, #8]
 8015630:	f7fe f993 	bl	801395a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8015634:	4602      	mov	r2, r0
 8015636:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801563a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801563e:	9200      	str	r2, [sp, #0]
 8015640:	4622      	mov	r2, r4
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f000 f930 	bl	80158a8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 8015648:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801564c:	4618      	mov	r0, r3
 801564e:	f7fd fa14 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8015652:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015656:	4618      	mov	r0, r3
 8015658:	f7fd fa0f 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
 801565c:	e080      	b.n	8015760 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	7a1b      	ldrb	r3, [r3, #8]
 8015662:	2b09      	cmp	r3, #9
 8015664:	d153      	bne.n	801570e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	7a1b      	ldrb	r3, [r3, #8]
 801566a:	2b07      	cmp	r3, #7
 801566c:	d077      	beq.n	801575e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801566e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015672:	68f9      	ldr	r1, [r7, #12]
 8015674:	4618      	mov	r0, r3
 8015676:	f7ff fb6b 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801567a:	f107 0314 	add.w	r3, r7, #20
 801567e:	68b9      	ldr	r1, [r7, #8]
 8015680:	4618      	mov	r0, r3
 8015682:	f7ff fb65 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801568a:	4618      	mov	r0, r3
 801568c:	f7fd fa0b 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015690:	4603      	mov	r3, r0
 8015692:	3b01      	subs	r3, #1
 8015694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015698:	f107 0214 	add.w	r2, r7, #20
 801569c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80156a0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7ff fbab 	bl	8014e00 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80156aa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80156ae:	f107 0214 	add.w	r2, r7, #20
 80156b2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80156b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80156ba:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80156be:	f7fe fb61 	bl	8013d84 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80156c2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80156c6:	68f8      	ldr	r0, [r7, #12]
 80156c8:	f7fe f8cc 	bl	8013864 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80156cc:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	689e      	ldr	r6, [r3, #8]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80156da:	68b8      	ldr	r0, [r7, #8]
 80156dc:	f7fe f8d1 	bl	8013882 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80156e0:	4603      	mov	r3, r0
 80156e2:	9302      	str	r3, [sp, #8]
 80156e4:	9501      	str	r5, [sp, #4]
 80156e6:	9400      	str	r4, [sp, #0]
 80156e8:	4633      	mov	r3, r6
 80156ea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80156ee:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80156f2:	4640      	mov	r0, r8
 80156f4:	f7f8 fa28 	bl	800db48 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80156f8:	f107 0314 	add.w	r3, r7, #20
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7fd f9bc 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8015702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015706:	4618      	mov	r0, r3
 8015708:	f7fd f9b7 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
 801570c:	e028      	b.n	8015760 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801570e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015712:	68f9      	ldr	r1, [r7, #12]
 8015714:	4618      	mov	r0, r3
 8015716:	f7ff fb1b 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f7fe fb61 	bl	8013de2 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8015720:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 8015722:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015726:	68b9      	ldr	r1, [r7, #8]
 8015728:	4618      	mov	r0, r3
 801572a:	f7ff fb11 	bl	8014d50 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801572e:	68b8      	ldr	r0, [r7, #8]
 8015730:	f7ff fd2c 	bl	801518c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8015734:	4602      	mov	r2, r0
 8015736:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801573a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801573e:	9200      	str	r2, [sp, #0]
 8015740:	4622      	mov	r2, r4
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7ff fdce 	bl	80152e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8015748:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801574c:	4618      	mov	r0, r3
 801574e:	f7fd f994 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8015752:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015756:	4618      	mov	r0, r3
 8015758:	f7fd f98f 	bl	8012a7a <_ZN6tflite12RuntimeShapeD1Ev>
 801575c:	e000      	b.n	8015760 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801575e:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8015760:	37e0      	adds	r7, #224	; 0xe0
 8015762:	46bd      	mov	sp, r7
 8015764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015768 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8015768:	b5b0      	push	{r4, r5, r7, lr}
 801576a:	b09e      	sub	sp, #120	; 0x78
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8015772:	2200      	movs	r2, #0
 8015774:	6839      	ldr	r1, [r7, #0]
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7fd fb76 	bl	8012e68 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801577c:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801577e:	2200      	movs	r2, #0
 8015780:	6839      	ldr	r1, [r7, #0]
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7fd fb80 	bl	8012e88 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8015788:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	691b      	ldr	r3, [r3, #16]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d101      	bne.n	8015796 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8015792:	f003 fda3 	bl	80192dc <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801579a:	f107 0408 	add.w	r4, r7, #8
 801579e:	461d      	mov	r5, r3
 80157a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80157b0:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 80157b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80157b6:	7a1b      	ldrb	r3, [r3, #8]
 80157b8:	3b01      	subs	r3, #1
 80157ba:	2b08      	cmp	r3, #8
 80157bc:	d84a      	bhi.n	8015854 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 80157be:	a201      	add	r2, pc, #4	; (adr r2, 80157c4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 80157c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157c4:	080157e9 	.word	0x080157e9
 80157c8:	08015855 	.word	0x08015855
 80157cc:	08015819 	.word	0x08015819
 80157d0:	08015855 	.word	0x08015855
 80157d4:	08015855 	.word	0x08015855
 80157d8:	08015855 	.word	0x08015855
 80157dc:	08015837 	.word	0x08015837
 80157e0:	08015855 	.word	0x08015855
 80157e4:	08015807 	.word	0x08015807
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	695c      	ldr	r4, [r3, #20]
 80157ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80157ee:	7a1b      	ldrb	r3, [r3, #8]
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7fc fbe7 	bl	8011fc4 <TfLiteTypeGetName>
 80157f6:	4602      	mov	r2, r0
 80157f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80157fa:	7a1b      	ldrb	r3, [r3, #8]
 80157fc:	491e      	ldr	r1, [pc, #120]	; (8015878 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015802:	2301      	movs	r3, #1
 8015804:	e034      	b.n	8015870 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 8015806:	f107 0308 	add.w	r3, r7, #8
 801580a:	461a      	mov	r2, r3
 801580c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801580e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015810:	f7ff fef2 	bl	80155f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8015814:	2300      	movs	r3, #0
 8015816:	e02b      	b.n	8015870 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	695c      	ldr	r4, [r3, #20]
 801581c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801581e:	7a1b      	ldrb	r3, [r3, #8]
 8015820:	4618      	mov	r0, r3
 8015822:	f7fc fbcf 	bl	8011fc4 <TfLiteTypeGetName>
 8015826:	4602      	mov	r2, r0
 8015828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801582a:	7a1b      	ldrb	r3, [r3, #8]
 801582c:	4912      	ldr	r1, [pc, #72]	; (8015878 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015832:	2301      	movs	r3, #1
 8015834:	e01c      	b.n	8015870 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	695c      	ldr	r4, [r3, #20]
 801583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801583c:	7a1b      	ldrb	r3, [r3, #8]
 801583e:	4618      	mov	r0, r3
 8015840:	f7fc fbc0 	bl	8011fc4 <TfLiteTypeGetName>
 8015844:	4602      	mov	r2, r0
 8015846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015848:	7a1b      	ldrb	r3, [r3, #8]
 801584a:	490b      	ldr	r1, [pc, #44]	; (8015878 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015850:	2301      	movs	r3, #1
 8015852:	e00d      	b.n	8015870 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	695c      	ldr	r4, [r3, #20]
 8015858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801585a:	7a1b      	ldrb	r3, [r3, #8]
 801585c:	4618      	mov	r0, r3
 801585e:	f7fc fbb1 	bl	8011fc4 <TfLiteTypeGetName>
 8015862:	4602      	mov	r2, r0
 8015864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015866:	7a1b      	ldrb	r3, [r3, #8]
 8015868:	4903      	ldr	r1, [pc, #12]	; (8015878 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801586e:	2301      	movs	r3, #1
  }
}
 8015870:	4618      	mov	r0, r3
 8015872:	3778      	adds	r7, #120	; 0x78
 8015874:	46bd      	mov	sp, r7
 8015876:	bdb0      	pop	{r4, r5, r7, pc}
 8015878:	0801bd18 	.word	0x0801bd18

0801587c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801587c:	b4b0      	push	{r4, r5, r7}
 801587e:	b083      	sub	sp, #12
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a07      	ldr	r2, [pc, #28]	; (80158a4 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8015888:	461c      	mov	r4, r3
 801588a:	4615      	mov	r5, r2
 801588c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801588e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	bcb0      	pop	{r4, r5, r7}
 80158a0:	4770      	bx	lr
 80158a2:	bf00      	nop
 80158a4:	0801bd34 	.word	0x0801bd34

080158a8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80158a8:	b590      	push	{r4, r7, lr}
 80158aa:	b09f      	sub	sp, #124	; 0x7c
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
 80158b4:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	699b      	ldr	r3, [r3, #24]
 80158c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80158c8:	68b8      	ldr	r0, [r7, #8]
 80158ca:	f7fd f8ec 	bl	8012aa6 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80158ce:	4603      	mov	r3, r0
 80158d0:	3b01      	subs	r3, #1
 80158d2:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80158d4:	683a      	ldr	r2, [r7, #0]
 80158d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80158d8:	68b8      	ldr	r0, [r7, #8]
 80158da:	f7ff fa91 	bl	8014e00 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80158de:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80158e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80158e2:	683a      	ldr	r2, [r7, #0]
 80158e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80158e6:	68b8      	ldr	r0, [r7, #8]
 80158e8:	f7fe fa4c 	bl	8013d84 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80158ec:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80158ee:	2300      	movs	r3, #0
 80158f0:	677b      	str	r3, [r7, #116]	; 0x74
 80158f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80158f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158f6:	429a      	cmp	r2, r3
 80158f8:	f280 80ed 	bge.w	8015ad6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80158fc:	2300      	movs	r3, #0
 80158fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015902:	2300      	movs	r3, #0
 8015904:	673b      	str	r3, [r7, #112]	; 0x70
 8015906:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801590a:	429a      	cmp	r2, r3
 801590c:	da16      	bge.n	801593c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801590e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015912:	fb03 f202 	mul.w	r2, r3, r2
 8015916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015918:	4413      	add	r3, r2
 801591a:	461a      	mov	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	441a      	add	r2, r3
 8015920:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015924:	4611      	mov	r1, r2
 8015926:	4618      	mov	r0, r3
 8015928:	f7ff fc1c 	bl	8015164 <_ZSt3maxIhERKT_S2_S2_>
 801592c:	4603      	mov	r3, r0
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015936:	3301      	adds	r3, #1
 8015938:	673b      	str	r3, [r7, #112]	; 0x70
 801593a:	e7e4      	b.n	8015906 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801593c:	f000 f8cf 	bl	8015ade <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015940:	4603      	mov	r3, r0
 8015942:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015944:	2300      	movs	r3, #0
 8015946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801594a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801594c:	429a      	cmp	r2, r3
 801594e:	da2f      	bge.n	80159b0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015954:	fb03 f202 	mul.w	r2, r3, r2
 8015958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801595a:	4413      	add	r3, r2
 801595c:	461a      	mov	r2, r3
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	4413      	add	r3, r2
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	461a      	mov	r2, r3
 8015966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801596a:	1ad3      	subs	r3, r2, r3
 801596c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801596e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015972:	429a      	cmp	r2, r3
 8015974:	db18      	blt.n	80159a8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015978:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801597a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801597c:	f7fe fa92 	bl	8013ea4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015980:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015982:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015984:	f000 f8b3 	bl	8015aee <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015988:	4603      	mov	r3, r0
 801598a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801598c:	69f8      	ldr	r0, [r7, #28]
 801598e:	f000 f8dd 	bl	8015b4c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015992:	4603      	mov	r3, r0
 8015994:	4618      	mov	r0, r3
 8015996:	f000 fa21 	bl	8015ddc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801599a:	4603      	mov	r3, r0
 801599c:	4619      	mov	r1, r3
 801599e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159a0:	f000 f8b6 	bl	8015b10 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80159a4:	4603      	mov	r3, r0
 80159a6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80159a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159aa:	3301      	adds	r3, #1
 80159ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80159ae:	e7cb      	b.n	8015948 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80159b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 fa2b 	bl	8015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80159ba:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80159c2:	210c      	movs	r1, #12
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7fe fa80 	bl	8013eca <_ZN6tflite13GetReciprocalEliPi>
 80159ca:	4603      	mov	r3, r0
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7fe fab9 	bl	8013f44 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80159d2:	4603      	mov	r3, r0
 80159d4:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80159d6:	2300      	movs	r3, #0
 80159d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80159da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80159dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159de:	429a      	cmp	r2, r3
 80159e0:	da75      	bge.n	8015ace <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80159e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80159e6:	fb03 f202 	mul.w	r2, r3, r2
 80159ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159ec:	4413      	add	r3, r2
 80159ee:	461a      	mov	r2, r3
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	4413      	add	r3, r2
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	461a      	mov	r2, r3
 80159f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80159fc:	1ad3      	subs	r3, r2, r3
 80159fe:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a04:	429a      	cmp	r2, r3
 8015a06:	db50      	blt.n	8015aaa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015a0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015a0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a0e:	f7fe fa49 	bl	8013ea4 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015a12:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015a14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015a16:	f000 f86a 	bl	8015aee <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015a1e:	69b8      	ldr	r0, [r7, #24]
 8015a20:	f000 f894 	bl	8015b4c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015a24:	4603      	mov	r3, r0
 8015a26:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015a28:	6979      	ldr	r1, [r7, #20]
 8015a2a:	6a38      	ldr	r0, [r7, #32]
 8015a2c:	f7ff fad2 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015a30:	4603      	mov	r3, r0
 8015a32:	633b      	str	r3, [r7, #48]	; 0x30
 8015a34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7fe faf5 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015a3e:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015a40:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a44:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015a46:	4611      	mov	r1, r2
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7fd fd33 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8015a50:	f7fc fd07 	bl	8012462 <_ZNSt14numeric_limitsIhE3minEv>
 8015a54:	4603      	mov	r3, r0
 8015a56:	461a      	mov	r2, r3
            unsat_output +
 8015a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a5a:	4413      	add	r3, r2
        const int32_t shifted_output =
 8015a5c:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8015a5e:	f7fc fd08 	bl	8012472 <_ZNSt14numeric_limitsIhE3maxEv>
 8015a62:	4603      	mov	r3, r0
 8015a64:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8015a66:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015a6a:	f107 0310 	add.w	r3, r7, #16
 8015a6e:	4611      	mov	r1, r2
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fc ffb9 	bl	80129e8 <_ZSt3minIlERKT_S2_S2_>
 8015a76:	4604      	mov	r4, r0
 8015a78:	f7fc fcf3 	bl	8012462 <_ZNSt14numeric_limitsIhE3minEv>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a84:	4619      	mov	r1, r3
 8015a86:	4620      	mov	r0, r4
 8015a88:	f7fc ffc2 	bl	8012a10 <_ZSt3maxIlERKT_S2_S2_>
 8015a8c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015a8e:	6819      	ldr	r1, [r3, #0]
 8015a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a94:	fb03 f202 	mul.w	r2, r3, r2
 8015a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a9a:	4413      	add	r3, r2
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015aa2:	4413      	add	r3, r2
 8015aa4:	b2ca      	uxtb	r2, r1
 8015aa6:	701a      	strb	r2, [r3, #0]
 8015aa8:	e00d      	b.n	8015ac6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015aae:	fb03 f202 	mul.w	r2, r3, r2
 8015ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ab4:	4413      	add	r3, r2
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015abc:	189c      	adds	r4, r3, r2
 8015abe:	f7fc fcd0 	bl	8012462 <_ZNSt14numeric_limitsIhE3minEv>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ac8:	3301      	adds	r3, #1
 8015aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8015acc:	e785      	b.n	80159da <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8015ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8015ad4:	e70d      	b.n	80158f2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015ad6:	bf00      	nop
 8015ad8:	377c      	adds	r7, #124	; 0x7c
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd90      	pop	{r4, r7, pc}

08015ade <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8015ade:	b580      	push	{r7, lr}
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	f000 f99f 	bl	8015e26 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	4618      	mov	r0, r3
 8015aec:	bd80      	pop	{r7, pc}

08015aee <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b084      	sub	sp, #16
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015af6:	f107 030c 	add.w	r3, r7, #12
 8015afa:	4618      	mov	r0, r3
 8015afc:	f000 f9a7 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015b00:	4602      	mov	r2, r0
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6013      	str	r3, [r2, #0]
    return retval;
 8015b06:	68fb      	ldr	r3, [r7, #12]
  }
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3710      	adds	r7, #16
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8015b10:	b590      	push	{r4, r7, lr}
 8015b12:	b083      	sub	sp, #12
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
 8015b1a:	1d3b      	adds	r3, r7, #4
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f000 f977 	bl	8015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015b22:	4603      	mov	r3, r0
 8015b24:	681c      	ldr	r4, [r3, #0]
 8015b26:	463b      	mov	r3, r7
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f000 f971 	bl	8015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	4619      	mov	r1, r3
 8015b34:	4620      	mov	r0, r4
 8015b36:	f7fe f8bd 	bl	8013cb4 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f000 f991 	bl	8015e64 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8015b42:	4603      	mov	r3, r0
 8015b44:	4618      	mov	r0, r3
 8015b46:	370c      	adds	r7, #12
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd90      	pop	{r4, r7, pc}

08015b4c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8015b4c:	b590      	push	{r4, r7, lr}
 8015b4e:	b091      	sub	sp, #68	; 0x44
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8015b54:	f000 f997 	bl	8015e86 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8015b5c:	2001      	movs	r0, #1
 8015b5e:	f000 f99b 	bl	8015e98 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015b62:	4603      	mov	r3, r0
 8015b64:	4619      	mov	r1, r3
 8015b66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015b68:	f000 f9aa 	bl	8015ec0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8015b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f000 f9c2 	bl	8015efc <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f000 f99f 	bl	8015ec0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015b82:	4603      	mov	r3, r0
 8015b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b88:	f000 f9d6 	bl	8015f38 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f7ff f9be 	bl	8014f10 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015b94:	4603      	mov	r3, r0
 8015b96:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8015b98:	6879      	ldr	r1, [r7, #4]
 8015b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b9c:	f000 f990 	bl	8015ec0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f000 f950 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8015bb4:	4883      	ldr	r0, [pc, #524]	; (8015dc4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8015bb6:	f7ff f952 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7fe fa3e 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8015bc6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015bca:	f7fe f837 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015bd4:	f7fe f83d 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7fe f88c 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015be0:	4604      	mov	r4, r0
 8015be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015be6:	f7ff f9f5 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015bea:	4603      	mov	r3, r0
 8015bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bee:	4619      	mov	r1, r3
 8015bf0:	4620      	mov	r0, r4
 8015bf2:	f7ff f95a 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8015bfa:	4873      	ldr	r0, [pc, #460]	; (8015dc8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8015bfc:	f7ff f92f 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015c00:	4603      	mov	r3, r0
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7fe fa1b 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	623b      	str	r3, [r7, #32]
 8015c0c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015c10:	f7fe f814 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015c14:	4603      	mov	r3, r0
 8015c16:	4619      	mov	r1, r3
 8015c18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c1a:	f7fe f81a 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7fe f869 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015c26:	4604      	mov	r4, r0
 8015c28:	6a39      	ldr	r1, [r7, #32]
 8015c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c2c:	f7ff f9d2 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015c30:	4603      	mov	r3, r0
 8015c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c34:	4619      	mov	r1, r3
 8015c36:	4620      	mov	r0, r4
 8015c38:	f7ff f937 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8015c40:	4862      	ldr	r0, [pc, #392]	; (8015dcc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8015c42:	f7ff f90c 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015c46:	4603      	mov	r3, r0
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7fe f9f8 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	61fb      	str	r3, [r7, #28]
 8015c52:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015c56:	f7fd fff1 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c60:	f7fd fff7 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015c64:	4603      	mov	r3, r0
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7fe f846 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	69f9      	ldr	r1, [r7, #28]
 8015c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c72:	f7ff f9af 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015c76:	4603      	mov	r3, r0
 8015c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	f7ff f914 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015c82:	4603      	mov	r3, r0
 8015c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8015c86:	4852      	ldr	r0, [pc, #328]	; (8015dd0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8015c88:	f7ff f8e9 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7fe f9d5 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015c94:	4603      	mov	r3, r0
 8015c96:	61bb      	str	r3, [r7, #24]
 8015c98:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015c9c:	f7fd ffce 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015ca6:	f7fd ffd4 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015caa:	4603      	mov	r3, r0
 8015cac:	4618      	mov	r0, r3
 8015cae:	f7fe f823 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	69b9      	ldr	r1, [r7, #24]
 8015cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cb8:	f7ff f98c 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	4620      	mov	r0, r4
 8015cc4:	f7ff f8f1 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8015ccc:	4841      	ldr	r0, [pc, #260]	; (8015dd4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8015cce:	f7ff f8c6 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7fe f9b2 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	617b      	str	r3, [r7, #20]
 8015cde:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015ce2:	f7fd ffab 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	4619      	mov	r1, r3
 8015cea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cec:	f7fd ffb1 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7fe f800 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015cf8:	4604      	mov	r4, r0
 8015cfa:	6979      	ldr	r1, [r7, #20]
 8015cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cfe:	f7ff f969 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d02:	4603      	mov	r3, r0
 8015d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d06:	4619      	mov	r1, r3
 8015d08:	4620      	mov	r0, r4
 8015d0a:	f7ff f8ce 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8015d12:	4831      	ldr	r0, [pc, #196]	; (8015dd8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015d14:	f7ff f8a3 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fe f98f 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015d20:	4603      	mov	r3, r0
 8015d22:	613b      	str	r3, [r7, #16]
 8015d24:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8015d28:	f7fd ff88 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	4619      	mov	r1, r3
 8015d30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d32:	f7fd ff8e 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d36:	4603      	mov	r3, r0
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7fd ffdd 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d3e:	4604      	mov	r4, r0
 8015d40:	6939      	ldr	r1, [r7, #16]
 8015d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d44:	f7ff f946 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	4620      	mov	r0, r4
 8015d50:	f7ff f8ab 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d54:	4603      	mov	r3, r0
 8015d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8015d58:	20f2      	movs	r0, #242	; 0xf2
 8015d5a:	f7ff f880 	bl	8014e5e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7fe f96c 	bl	801403e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015d66:	4603      	mov	r3, r0
 8015d68:	60fb      	str	r3, [r7, #12]
 8015d6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8015d6e:	f7fd ff65 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d72:	4603      	mov	r3, r0
 8015d74:	4619      	mov	r1, r3
 8015d76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d78:	f7fd ff6b 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fd ffba 	bl	8013cf8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d84:	4604      	mov	r4, r0
 8015d86:	68f9      	ldr	r1, [r7, #12]
 8015d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d8a:	f7ff f923 	bl	8014fd4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d92:	4619      	mov	r1, r3
 8015d94:	4620      	mov	r0, r4
 8015d96:	f7ff f888 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f000 f8e4 	bl	8015f6c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8015da4:	4604      	mov	r4, r0
 8015da6:	f7fe f95e 	bl	8014066 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8015daa:	4603      	mov	r3, r0
 8015dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dae:	4619      	mov	r1, r3
 8015db0:	4620      	mov	r0, r4
 8015db2:	f7ff f87a 	bl	8014eaa <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015db6:	4603      	mov	r3, r0
 8015db8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8015dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3744      	adds	r7, #68	; 0x44
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd90      	pop	{r4, r7, pc}
 8015dc4:	63afbe7b 	.word	0x63afbe7b
 8015dc8:	4da2cbf2 	.word	0x4da2cbf2
 8015dcc:	2f16ac6c 	.word	0x2f16ac6c
 8015dd0:	1152aaa4 	.word	0x1152aaa4
 8015dd4:	02582ab7 	.word	0x02582ab7
 8015dd8:	000afe11 	.word	0x000afe11

08015ddc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015ddc:	b5b0      	push	{r4, r5, r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015de4:	1d3b      	adds	r3, r7, #4
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7fe f91e 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015dec:	4603      	mov	r3, r0
 8015dee:	681d      	ldr	r5, [r3, #0]
 8015df0:	f107 030c 	add.w	r3, r7, #12
 8015df4:	4618      	mov	r0, r3
 8015df6:	f000 f80b 	bl	8015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	f000 f8c7 	bl	8015f90 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8015e02:	4603      	mov	r3, r0
 8015e04:	6023      	str	r3, [r4, #0]
  return result;
 8015e06:	68fb      	ldr	r3, [r7, #12]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bdb0      	pop	{r4, r5, r7, pc}

08015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8015e10:	b480      	push	{r7}
 8015e12:	b083      	sub	sp, #12
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	370c      	adds	r7, #12
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e24:	4770      	bx	lr

08015e26 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015e26:	b590      	push	{r4, r7, lr}
 8015e28:	b085      	sub	sp, #20
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015e2e:	f107 030c 	add.w	r3, r7, #12
 8015e32:	4618      	mov	r0, r3
 8015e34:	f7ff ffec 	bl	8015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015e38:	4604      	mov	r4, r0
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f7fd fefe 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015e40:	4603      	mov	r3, r0
 8015e42:	6023      	str	r3, [r4, #0]
    return retval;
 8015e44:	68fb      	ldr	r3, [r7, #12]
  }
 8015e46:	4618      	mov	r0, r3
 8015e48:	3714      	adds	r7, #20
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd90      	pop	{r4, r7, pc}

08015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8015e4e:	b480      	push	{r7}
 8015e50:	b083      	sub	sp, #12
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	4618      	mov	r0, r3
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015e6c:	f107 030c 	add.w	r3, r7, #12
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7ff ffcd 	bl	8015e10 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015e76:	4602      	mov	r2, r0
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	6013      	str	r3, [r2, #0]
    return retval;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
  }
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3710      	adds	r7, #16
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8015e86:	b580      	push	{r7, lr}
 8015e88:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8015e8a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015e8e:	f000 f803 	bl	8015e98 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015e92:	4603      	mov	r3, r0
  }
 8015e94:	4618      	mov	r0, r3
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015e98:	b590      	push	{r4, r7, lr}
 8015e9a:	b085      	sub	sp, #20
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015ea0:	f107 030c 	add.w	r3, r7, #12
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7ff ffd2 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015eaa:	4604      	mov	r4, r0
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7fd fec5 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	6023      	str	r3, [r4, #0]
    return retval;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
  }
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3714      	adds	r7, #20
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd90      	pop	{r4, r7, pc}

08015ec0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015ec0:	b590      	push	{r4, r7, lr}
 8015ec2:	b083      	sub	sp, #12
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	6039      	str	r1, [r7, #0]
 8015eca:	1d3b      	adds	r3, r7, #4
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7ff ffbe 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	681c      	ldr	r4, [r3, #0]
 8015ed6:	463b      	mov	r3, r7
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7ff ffb8 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	f7fe f9db 	bl	80142a0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8015eea:	4603      	mov	r3, r0
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7ff fdfe 	bl	8015aee <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	370c      	adds	r7, #12
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd90      	pop	{r4, r7, pc}

08015efc <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8015efc:	b590      	push	{r4, r7, lr}
 8015efe:	b083      	sub	sp, #12
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	6039      	str	r1, [r7, #0]
 8015f06:	1d3b      	adds	r3, r7, #4
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ff ffa0 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	681c      	ldr	r4, [r3, #0]
 8015f12:	463b      	mov	r3, r7
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7ff ff9a 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	4620      	mov	r0, r4
 8015f22:	f7fd fe96 	bl	8013c52 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015f26:	4603      	mov	r3, r0
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7ff fde0 	bl	8015aee <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	4618      	mov	r0, r3
 8015f32:	370c      	adds	r7, #12
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd90      	pop	{r4, r7, pc}

08015f38 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015f38:	b5b0      	push	{r4, r5, r7, lr}
 8015f3a:	b084      	sub	sp, #16
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015f40:	1d3b      	adds	r3, r7, #4
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7ff ff83 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	681d      	ldr	r5, [r3, #0]
 8015f4c:	f107 030c 	add.w	r3, r7, #12
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7fe f869 	bl	8014028 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f56:	4604      	mov	r4, r0
 8015f58:	4628      	mov	r0, r5
 8015f5a:	f000 f825 	bl	8015fa8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	6023      	str	r3, [r4, #0]
  return result;
 8015f62:	68fb      	ldr	r3, [r7, #12]
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bdb0      	pop	{r4, r5, r7, pc}

08015f6c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	1d3b      	adds	r3, r7, #4
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7ff ff69 	bl	8015e4e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7fe ffb3 	bl	8014eec <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8015f86:	4603      	mov	r3, r0
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b082      	sub	sp, #8
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f000 f811 	bl	8015fc0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8015f9e:	4603      	mov	r3, r0
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 f813 	bl	8015fdc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8015fb6:	4603      	mov	r3, r0
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3708      	adds	r7, #8
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015fc8:	210c      	movs	r1, #12
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f7fd fa72 	bl	80134b4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015fd0:	4603      	mov	r3, r0
  }
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3708      	adds	r7, #8
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
	...

08015fdc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b08a      	sub	sp, #40	; 0x28
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015fe4:	f7fc fde1 	bl	8012baa <_ZNSt14numeric_limitsIlE3minEv>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7fd fe26 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015ff0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015ff2:	f7fc f863 	bl	80120bc <_ZNSt14numeric_limitsIlE3maxEv>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7fd fe1f 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015ffe:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8016000:	2320      	movs	r3, #32
 8016002:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8016004:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8016008:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801600a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801600e:	f7fd fe15 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016012:	4603      	mov	r3, r0
 8016014:	4619      	mov	r1, r3
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f7fd fe5a 	bl	8013cd0 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801601c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801601e:	480f      	ldr	r0, [pc, #60]	; (801605c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8016020:	f7fd fe0c 	bl	8013c3c <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016024:	4603      	mov	r3, r0
 8016026:	4619      	mov	r1, r3
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7fd fe2f 	bl	8013c8c <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801602e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8016030:	2105      	movs	r1, #5
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7fe fa18 	bl	8014468 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8016038:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	6a39      	ldr	r1, [r7, #32]
 801603e:	6978      	ldr	r0, [r7, #20]
 8016040:	f7fe fa56 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8016044:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8016046:	68fa      	ldr	r2, [r7, #12]
 8016048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801604a:	6938      	ldr	r0, [r7, #16]
 801604c:	f7fe fa50 	bl	80144f0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8016050:	60f8      	str	r0, [r7, #12]
    return result;
 8016052:	68fb      	ldr	r3, [r7, #12]
  }
 8016054:	4618      	mov	r0, r3
 8016056:	3728      	adds	r7, #40	; 0x28
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	fc000001 	.word	0xfc000001

08016060 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 8016060:	b580      	push	{r7, lr}
 8016062:	ed2d 8b02 	vpush	{d8}
 8016066:	b094      	sub	sp, #80	; 0x50
 8016068:	af00      	add	r7, sp, #0
 801606a:	6178      	str	r0, [r7, #20]
 801606c:	ed87 0a04 	vstr	s0, [r7, #16]
 8016070:	edc7 0a03 	vstr	s1, [r7, #12]
 8016074:	60b9      	str	r1, [r7, #8]
 8016076:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 8016078:	ed97 7a03 	vldr	s14, [r7, #12]
 801607c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016080:	ee77 6a67 	vsub.f32	s13, s14, s15
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	3b01      	subs	r3, #1
 8016088:	ee07 3a90 	vmov	s15, r3
 801608c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016094:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8016098:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801609c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80160a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80160a4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 80160a8:	2300      	movs	r3, #0
 80160aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	3b01      	subs	r3, #1
 80160b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80160b2:	429a      	cmp	r2, r3
 80160b4:	f280 80c0 	bge.w	8016238 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 80160b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160ba:	ee07 3a90 	vmov	s15, r3
 80160be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80160c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80160c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80160ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	eeb0 0a67 	vmov.f32	s0, s15
 80160d8:	4798      	blx	r3
 80160da:	eef0 7a40 	vmov.f32	s15, s0
 80160de:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80162b0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80160e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80160e6:	eeb0 0a67 	vmov.f32	s0, s15
 80160ea:	f7fc f999 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80160ee:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 80160f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160f4:	3301      	adds	r3, #1
 80160f6:	ee07 3a90 	vmov	s15, r3
 80160fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80160fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8016102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016106:	edd7 7a04 	vldr	s15, [r7, #16]
 801610a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	eeb0 0a67 	vmov.f32	s0, s15
 8016114:	4798      	blx	r3
 8016116:	eef0 7a40 	vmov.f32	s15, s0
 801611a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80162b0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801611e:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 8016122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016124:	ee07 3a90 	vmov	s15, r3
 8016128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801612c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8016130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016134:	edd7 7a04 	vldr	s15, [r7, #16]
 8016138:	ee77 7a27 	vadd.f32	s15, s14, s15
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	eeb0 0a67 	vmov.f32	s0, s15
 8016142:	4798      	blx	r3
 8016144:	eef0 7a40 	vmov.f32	s15, s0
 8016148:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80162b0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801614c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016150:	eeb0 0a67 	vmov.f32	s0, s15
 8016154:	f7fc f964 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016158:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801615c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8016160:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016164:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016168:	eeb0 0a47 	vmov.f32	s0, s14
 801616c:	f7fc f958 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016170:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8016174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016176:	ee07 3a90 	vmov	s15, r3
 801617a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801617e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8016182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016186:	edd7 7a04 	vldr	s15, [r7, #16]
 801618a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801618e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	eeb0 0a67 	vmov.f32	s0, s15
 801619c:	4798      	blx	r3
 801619e:	eef0 7a40 	vmov.f32	s15, s0
 80161a2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80162b0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80161a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80161aa:	eeb0 0a67 	vmov.f32	s0, s15
 80161ae:	f7fc f937 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80161b2:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 80161b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80161ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80161be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 80161c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80161ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80161d2:	eeb0 0a47 	vmov.f32	s0, s14
 80161d6:	f7fc f923 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80161da:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 80161de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80161e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80161e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161ea:	edc7 7a06 	vstr	s15, [r7, #24]
 80161ee:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80161f2:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 80161f4:	f107 021c 	add.w	r2, r7, #28
 80161f8:	f107 0318 	add.w	r3, r7, #24
 80161fc:	4611      	mov	r1, r2
 80161fe:	4618      	mov	r0, r3
 8016200:	f7ed fa0e 	bl	8003620 <_ZSt3maxIfERKT_S2_S2_>
 8016204:	4602      	mov	r2, r0
 8016206:	4b2b      	ldr	r3, [pc, #172]	; (80162b4 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8016208:	623b      	str	r3, [r7, #32]
 801620a:	f107 0320 	add.w	r3, r7, #32
 801620e:	4619      	mov	r1, r3
 8016210:	4610      	mov	r0, r2
 8016212:	f7fc f8d8 	bl	80123c6 <_ZSt3minIfERKT_S2_S2_>
 8016216:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8016218:	edd3 7a00 	vldr	s15, [r3]
 801621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801621e:	005b      	lsls	r3, r3, #1
 8016220:	68ba      	ldr	r2, [r7, #8]
 8016222:	4413      	add	r3, r2
 8016224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016228:	ee17 2a90 	vmov	r2, s15
 801622c:	b212      	sxth	r2, r2
 801622e:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 8016230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016232:	3301      	adds	r3, #1
 8016234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016236:	e739      	b.n	80160ac <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	ed97 0a03 	vldr	s0, [r7, #12]
 801623e:	4798      	blx	r3
 8016240:	eef0 7a40 	vmov.f32	s15, s0
 8016244:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80162b0 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8016248:	ee67 7a87 	vmul.f32	s15, s15, s14
 801624c:	eeb0 0a67 	vmov.f32	s0, s15
 8016250:	f7fc f8e6 	bl	8012420 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016254:	eef0 7a40 	vmov.f32	s15, s0
 8016258:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801625c:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8016260:	62bb      	str	r3, [r7, #40]	; 0x28
 8016262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801626a:	4611      	mov	r1, r2
 801626c:	4618      	mov	r0, r3
 801626e:	f7ed f9d7 	bl	8003620 <_ZSt3maxIfERKT_S2_S2_>
 8016272:	4602      	mov	r2, r0
 8016274:	4b0f      	ldr	r3, [pc, #60]	; (80162b4 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8016276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801627c:	4619      	mov	r1, r3
 801627e:	4610      	mov	r0, r2
 8016280:	f7fc f8a1 	bl	80123c6 <_ZSt3minIfERKT_S2_S2_>
 8016284:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8016286:	edd3 7a00 	vldr	s15, [r3]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016290:	3b01      	subs	r3, #1
 8016292:	005b      	lsls	r3, r3, #1
 8016294:	68ba      	ldr	r2, [r7, #8]
 8016296:	4413      	add	r3, r2
 8016298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801629c:	ee17 2a90 	vmov	r2, s15
 80162a0:	b212      	sxth	r2, r2
 80162a2:	801a      	strh	r2, [r3, #0]
}
 80162a4:	bf00      	nop
 80162a6:	3750      	adds	r7, #80	; 0x50
 80162a8:	46bd      	mov	sp, r7
 80162aa:	ecbd 8b02 	vpop	{d8}
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	47000000 	.word	0x47000000
 80162b4:	46fffe00 	.word	0x46fffe00

080162b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 80162b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80162bc:	b090      	sub	sp, #64	; 0x40
 80162be:	af06      	add	r7, sp, #24
 80162c0:	60f8      	str	r0, [r7, #12]
 80162c2:	60b9      	str	r1, [r7, #8]
 80162c4:	607a      	str	r2, [r7, #4]
 80162c6:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	2b09      	cmp	r3, #9
 80162ce:	d004      	beq.n	80162da <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	2b07      	cmp	r3, #7
 80162d6:	f040 81b6 	bne.w	8016646 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	2b07      	cmp	r3, #7
 80162e0:	d156      	bne.n	8016390 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	691b      	ldr	r3, [r3, #16]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d011      	beq.n	801630e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	695c      	ldr	r4, [r3, #20]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	691b      	ldr	r3, [r3, #16]
 80162f2:	2200      	movs	r2, #0
 80162f4:	9203      	str	r2, [sp, #12]
 80162f6:	9302      	str	r3, [sp, #8]
 80162f8:	4ba1      	ldr	r3, [pc, #644]	; (8016580 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	4ba1      	ldr	r3, [pc, #644]	; (8016584 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80162fe:	9300      	str	r3, [sp, #0]
 8016300:	2325      	movs	r3, #37	; 0x25
 8016302:	4aa1      	ldr	r2, [pc, #644]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016304:	49a1      	ldr	r1, [pc, #644]	; (801658c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8016306:	68f8      	ldr	r0, [r7, #12]
 8016308:	47a0      	blx	r4
 801630a:	2301      	movs	r3, #1
 801630c:	e1e0      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	edd3 7a03 	vldr	s15, [r3, #12]
 8016314:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8016590 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8016318:	eef4 7ac7 	vcmpe.f32	s15, s14
 801631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016320:	dd07      	ble.n	8016332 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	edd3 7a03 	vldr	s15, [r3, #12]
 8016328:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8016590 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801632c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016330:	e006      	b.n	8016340 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	edd3 7a03 	vldr	s15, [r3, #12]
 8016338:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8016590 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801633c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016340:	edc7 7a08 	vstr	s15, [r7, #32]
 8016344:	edd7 7a08 	vldr	s15, [r7, #32]
 8016348:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8016594 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801634c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016354:	f340 80dd 	ble.w	8016512 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	695c      	ldr	r4, [r3, #20]
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	68db      	ldr	r3, [r3, #12]
 8016360:	4618      	mov	r0, r3
 8016362:	f7ea f8fb 	bl	800055c <__aeabi_f2d>
 8016366:	4602      	mov	r2, r0
 8016368:	460b      	mov	r3, r1
 801636a:	f04f 0000 	mov.w	r0, #0
 801636e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8016372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801637a:	4b87      	ldr	r3, [pc, #540]	; (8016598 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801637c:	9301      	str	r3, [sp, #4]
 801637e:	4b87      	ldr	r3, [pc, #540]	; (801659c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8016380:	9300      	str	r3, [sp, #0]
 8016382:	2326      	movs	r3, #38	; 0x26
 8016384:	4a80      	ldr	r2, [pc, #512]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016386:	4986      	ldr	r1, [pc, #536]	; (80165a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	47a0      	blx	r4
 801638c:	2301      	movs	r3, #1
 801638e:	e19f      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	2b09      	cmp	r3, #9
 8016396:	d018      	beq.n	80163ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	695c      	ldr	r4, [r3, #20]
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7fb fe0f 	bl	8011fc4 <TfLiteTypeGetName>
 80163a6:	4605      	mov	r5, r0
 80163a8:	2009      	movs	r0, #9
 80163aa:	f7fb fe0b 	bl	8011fc4 <TfLiteTypeGetName>
 80163ae:	4603      	mov	r3, r0
 80163b0:	9303      	str	r3, [sp, #12]
 80163b2:	9502      	str	r5, [sp, #8]
 80163b4:	4b7b      	ldr	r3, [pc, #492]	; (80165a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 80163b6:	9301      	str	r3, [sp, #4]
 80163b8:	4b7b      	ldr	r3, [pc, #492]	; (80165a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	2329      	movs	r3, #41	; 0x29
 80163be:	4a72      	ldr	r2, [pc, #456]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80163c0:	497a      	ldr	r1, [pc, #488]	; (80165ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 80163c2:	68f8      	ldr	r0, [r7, #12]
 80163c4:	47a0      	blx	r4
 80163c6:	2301      	movs	r3, #1
 80163c8:	e182      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	781b      	ldrb	r3, [r3, #0]
 80163ce:	2b07      	cmp	r3, #7
 80163d0:	d155      	bne.n	801647e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	691b      	ldr	r3, [r3, #16]
 80163d6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80163da:	d011      	beq.n	8016400 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	695c      	ldr	r4, [r3, #20]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	691b      	ldr	r3, [r3, #16]
 80163e4:	4a72      	ldr	r2, [pc, #456]	; (80165b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80163e6:	9203      	str	r2, [sp, #12]
 80163e8:	9302      	str	r3, [sp, #8]
 80163ea:	4b72      	ldr	r3, [pc, #456]	; (80165b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80163ec:	9301      	str	r3, [sp, #4]
 80163ee:	4b65      	ldr	r3, [pc, #404]	; (8016584 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	232b      	movs	r3, #43	; 0x2b
 80163f4:	4a64      	ldr	r2, [pc, #400]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80163f6:	4965      	ldr	r1, [pc, #404]	; (801658c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80163f8:	68f8      	ldr	r0, [r7, #12]
 80163fa:	47a0      	blx	r4
 80163fc:	2301      	movs	r3, #1
 80163fe:	e167      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	edd3 7a03 	vldr	s15, [r3, #12]
 8016406:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80165b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801640a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016412:	dd07      	ble.n	8016424 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	edd3 7a03 	vldr	s15, [r3, #12]
 801641a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80165b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801641e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016422:	e006      	b.n	8016432 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	edd3 7a03 	vldr	s15, [r3, #12]
 801642a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80165b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801642e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016432:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8016436:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801643a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80165bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801643e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016446:	dd64      	ble.n	8016512 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	695c      	ldr	r4, [r3, #20]
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	4618      	mov	r0, r3
 8016452:	f7ea f883 	bl	800055c <__aeabi_f2d>
 8016456:	4602      	mov	r2, r0
 8016458:	460b      	mov	r3, r1
 801645a:	f04f 0000 	mov.w	r0, #0
 801645e:	4958      	ldr	r1, [pc, #352]	; (80165c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8016460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016468:	4b56      	ldr	r3, [pc, #344]	; (80165c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801646a:	9301      	str	r3, [sp, #4]
 801646c:	4b4b      	ldr	r3, [pc, #300]	; (801659c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801646e:	9300      	str	r3, [sp, #0]
 8016470:	232c      	movs	r3, #44	; 0x2c
 8016472:	4a45      	ldr	r2, [pc, #276]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016474:	494a      	ldr	r1, [pc, #296]	; (80165a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	47a0      	blx	r4
 801647a:	2301      	movs	r3, #1
 801647c:	e128      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	2b09      	cmp	r3, #9
 8016484:	d018      	beq.n	80164b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	695c      	ldr	r4, [r3, #20]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	781b      	ldrb	r3, [r3, #0]
 801648e:	4618      	mov	r0, r3
 8016490:	f7fb fd98 	bl	8011fc4 <TfLiteTypeGetName>
 8016494:	4605      	mov	r5, r0
 8016496:	2009      	movs	r0, #9
 8016498:	f7fb fd94 	bl	8011fc4 <TfLiteTypeGetName>
 801649c:	4603      	mov	r3, r0
 801649e:	9303      	str	r3, [sp, #12]
 80164a0:	9502      	str	r5, [sp, #8]
 80164a2:	4b40      	ldr	r3, [pc, #256]	; (80165a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 80164a4:	9301      	str	r3, [sp, #4]
 80164a6:	4b48      	ldr	r3, [pc, #288]	; (80165c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 80164a8:	9300      	str	r3, [sp, #0]
 80164aa:	232f      	movs	r3, #47	; 0x2f
 80164ac:	4a36      	ldr	r2, [pc, #216]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80164ae:	493f      	ldr	r1, [pc, #252]	; (80165ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 80164b0:	68f8      	ldr	r0, [r7, #12]
 80164b2:	47a0      	blx	r4
 80164b4:	2301      	movs	r3, #1
 80164b6:	e10b      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	691b      	ldr	r3, [r3, #16]
 80164bc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80164c0:	d012      	beq.n	80164e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	695c      	ldr	r4, [r3, #20]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	691b      	ldr	r3, [r3, #16]
 80164ca:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80164ce:	9203      	str	r2, [sp, #12]
 80164d0:	9302      	str	r3, [sp, #8]
 80164d2:	4b3e      	ldr	r3, [pc, #248]	; (80165cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 80164d4:	9301      	str	r3, [sp, #4]
 80164d6:	4b2b      	ldr	r3, [pc, #172]	; (8016584 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80164d8:	9300      	str	r3, [sp, #0]
 80164da:	2330      	movs	r3, #48	; 0x30
 80164dc:	4a2a      	ldr	r2, [pc, #168]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80164de:	492b      	ldr	r1, [pc, #172]	; (801658c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80164e0:	68f8      	ldr	r0, [r7, #12]
 80164e2:	47a0      	blx	r4
 80164e4:	2301      	movs	r3, #1
 80164e6:	e0f3      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80164ee:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80165d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 80164f2:	eef4 7a47 	vcmp.f32	s15, s14
 80164f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164fa:	d00a      	beq.n	8016512 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	695c      	ldr	r4, [r3, #20]
 8016500:	4b34      	ldr	r3, [pc, #208]	; (80165d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	2331      	movs	r3, #49	; 0x31
 8016506:	4a20      	ldr	r2, [pc, #128]	; (8016588 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016508:	4933      	ldr	r1, [pc, #204]	; (80165d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801650a:	68f8      	ldr	r0, [r7, #12]
 801650c:	47a0      	blx	r4
 801650e:	2301      	movs	r3, #1
 8016510:	e0de      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	2b07      	cmp	r3, #7
 8016518:	d160      	bne.n	80165dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	4618      	mov	r0, r3
 8016520:	f7ea f81c 	bl	800055c <__aeabi_f2d>
 8016524:	4604      	mov	r4, r0
 8016526:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8016528:	683b      	ldr	r3, [r7, #0]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	4618      	mov	r0, r3
 801652e:	f7ea f815 	bl	800055c <__aeabi_f2d>
 8016532:	4602      	mov	r2, r0
 8016534:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8016536:	4620      	mov	r0, r4
 8016538:	4629      	mov	r1, r5
 801653a:	f7ea f867 	bl	800060c <__aeabi_dmul>
 801653e:	4602      	mov	r2, r0
 8016540:	460b      	mov	r3, r1
 8016542:	4610      	mov	r0, r2
 8016544:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8016546:	a30c      	add	r3, pc, #48	; (adr r3, 8016578 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8016548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801654c:	f7ea f988 	bl	8000860 <__aeabi_ddiv>
 8016550:	4602      	mov	r2, r0
 8016552:	460b      	mov	r3, r1
 8016554:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8016558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801655a:	3308      	adds	r3, #8
 801655c:	f107 0214 	add.w	r2, r7, #20
 8016560:	4611      	mov	r1, r2
 8016562:	4618      	mov	r0, r3
 8016564:	ed97 0b06 	vldr	d0, [r7, #24]
 8016568:	f7fb fdb2 	bl	80120d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801656c:	697a      	ldr	r2, [r7, #20]
 801656e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016570:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8016572:	e0ac      	b.n	80166ce <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8016574:	f3af 8000 	nop.w
 8016578:	00140014 	.word	0x00140014
 801657c:	3f240014 	.word	0x3f240014
 8016580:	0801bf10 	.word	0x0801bf10
 8016584:	0801bf14 	.word	0x0801bf14
 8016588:	0801be60 	.word	0x0801be60
 801658c:	0801bef4 	.word	0x0801bef4
 8016590:	38000000 	.word	0x38000000
 8016594:	3303126f 	.word	0x3303126f
 8016598:	0801bf50 	.word	0x0801bf50
 801659c:	0801bf5c 	.word	0x0801bf5c
 80165a0:	0801bf30 	.word	0x0801bf30
 80165a4:	0801bf90 	.word	0x0801bf90
 80165a8:	0801bf9c 	.word	0x0801bf9c
 80165ac:	0801bf74 	.word	0x0801bf74
 80165b0:	ffff8000 	.word	0xffff8000
 80165b4:	0801bfa8 	.word	0x0801bfa8
 80165b8:	37800000 	.word	0x37800000
 80165bc:	3283126f 	.word	0x3283126f
 80165c0:	3ef00000 	.word	0x3ef00000
 80165c4:	0801bfb0 	.word	0x0801bfb0
 80165c8:	0801bfbc 	.word	0x0801bfbc
 80165cc:	0801bfcc 	.word	0x0801bfcc
 80165d0:	3b800000 	.word	0x3b800000
 80165d4:	0801bfec 	.word	0x0801bfec
 80165d8:	0801bfd4 	.word	0x0801bfd4
          static_cast<double>(params->beta),
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7e9 ffbb 	bl	800055c <__aeabi_f2d>
 80165e6:	4680      	mov	r8, r0
 80165e8:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7e9 ffb4 	bl	800055c <__aeabi_f2d>
 80165f4:	4682      	mov	sl, r0
 80165f6:	468b      	mov	fp, r1
 80165f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165fa:	3308      	adds	r3, #8
 80165fc:	f107 0210 	add.w	r2, r7, #16
 8016600:	4619      	mov	r1, r3
 8016602:	2005      	movs	r0, #5
 8016604:	ec4b ab11 	vmov	d1, sl, fp
 8016608:	ec49 8b10 	vmov	d0, r8, r9
 801660c:	f7fb fe2c 	bl	8012268 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8016610:	693a      	ldr	r2, [r7, #16]
 8016612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016614:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8016616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016618:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801661a:	221f      	movs	r2, #31
 801661c:	4619      	mov	r1, r3
 801661e:	2005      	movs	r0, #5
 8016620:	f7fb fe6a 	bl	80122f8 <_ZN6tflite20CalculateInputRadiusEiii>
 8016624:	4603      	mov	r3, r0
 8016626:	4618      	mov	r0, r3
 8016628:	f7e9 ff86 	bl	8000538 <__aeabi_i2d>
 801662c:	4602      	mov	r2, r0
 801662e:	460b      	mov	r3, r1
 8016630:	4614      	mov	r4, r2
 8016632:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 8016636:	4620      	mov	r0, r4
 8016638:	4629      	mov	r1, r5
 801663a:	f7ea fa97 	bl	8000b6c <__aeabi_d2iz>
 801663e:	4602      	mov	r2, r0
 8016640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016642:	619a      	str	r2, [r3, #24]
    }
 8016644:	e043      	b.n	80166ce <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	2b01      	cmp	r3, #1
 801664c:	d018      	beq.n	8016680 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	695c      	ldr	r4, [r3, #20]
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	781b      	ldrb	r3, [r3, #0]
 8016656:	4618      	mov	r0, r3
 8016658:	f7fb fcb4 	bl	8011fc4 <TfLiteTypeGetName>
 801665c:	4605      	mov	r5, r0
 801665e:	2001      	movs	r0, #1
 8016660:	f7fb fcb0 	bl	8011fc4 <TfLiteTypeGetName>
 8016664:	4603      	mov	r3, r0
 8016666:	9303      	str	r3, [sp, #12]
 8016668:	9502      	str	r5, [sp, #8]
 801666a:	4b1c      	ldr	r3, [pc, #112]	; (80166dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801666c:	9301      	str	r3, [sp, #4]
 801666e:	4b1c      	ldr	r3, [pc, #112]	; (80166e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8016670:	9300      	str	r3, [sp, #0]
 8016672:	234e      	movs	r3, #78	; 0x4e
 8016674:	4a1b      	ldr	r2, [pc, #108]	; (80166e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8016676:	491c      	ldr	r1, [pc, #112]	; (80166e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8016678:	68f8      	ldr	r0, [r7, #12]
 801667a:	47a0      	blx	r4
 801667c:	2301      	movs	r3, #1
 801667e:	e027      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	2b01      	cmp	r3, #1
 8016686:	d018      	beq.n	80166ba <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	695c      	ldr	r4, [r3, #20]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	4618      	mov	r0, r3
 8016692:	f7fb fc97 	bl	8011fc4 <TfLiteTypeGetName>
 8016696:	4605      	mov	r5, r0
 8016698:	2001      	movs	r0, #1
 801669a:	f7fb fc93 	bl	8011fc4 <TfLiteTypeGetName>
 801669e:	4603      	mov	r3, r0
 80166a0:	9303      	str	r3, [sp, #12]
 80166a2:	9502      	str	r5, [sp, #8]
 80166a4:	4b0d      	ldr	r3, [pc, #52]	; (80166dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 80166a6:	9301      	str	r3, [sp, #4]
 80166a8:	4b10      	ldr	r3, [pc, #64]	; (80166ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 80166aa:	9300      	str	r3, [sp, #0]
 80166ac:	234f      	movs	r3, #79	; 0x4f
 80166ae:	4a0d      	ldr	r2, [pc, #52]	; (80166e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 80166b0:	490d      	ldr	r1, [pc, #52]	; (80166e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 80166b2:	68f8      	ldr	r0, [r7, #12]
 80166b4:	47a0      	blx	r4
 80166b6:	2301      	movs	r3, #1
 80166b8:	e00a      	b.n	80166d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	4618      	mov	r0, r3
 80166c0:	f7e9 ff4c 	bl	800055c <__aeabi_f2d>
 80166c4:	4602      	mov	r2, r0
 80166c6:	460b      	mov	r3, r1
 80166c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80166ca:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 80166ce:	2300      	movs	r3, #0
}
 80166d0:	4618      	mov	r0, r3
 80166d2:	3728      	adds	r7, #40	; 0x28
 80166d4:	46bd      	mov	sp, r7
 80166d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80166da:	bf00      	nop
 80166dc:	0801c010 	.word	0x0801c010
 80166e0:	0801bf9c 	.word	0x0801bf9c
 80166e4:	0801be60 	.word	0x0801be60
 80166e8:	0801bf74 	.word	0x0801bf74
 80166ec:	0801bfbc 	.word	0x0801bfbc

080166f0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b084      	sub	sp, #16
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	60f8      	str	r0, [r7, #12]
 80166f8:	60b9      	str	r1, [r7, #8]
 80166fa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016700:	2b00      	cmp	r3, #0
 8016702:	d101      	bne.n	8016708 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 8016704:	f002 fdea 	bl	80192dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801670c:	2138      	movs	r1, #56	; 0x38
 801670e:	68f8      	ldr	r0, [r7, #12]
 8016710:	4798      	blx	r3
 8016712:	4603      	mov	r3, r0
}
 8016714:	4618      	mov	r0, r3
 8016716:	3710      	adds	r7, #16
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	ed87 0a00 	vstr	s0, [r7]
 8016728:	ed97 0a00 	vldr	s0, [r7]
 801672c:	f7eb f87a 	bl	8001824 <_ZSt3expf>
 8016730:	eef0 7a40 	vmov.f32	s15, s0
 8016734:	eeb0 0a67 	vmov.f32	s0, s15
 8016738:	3708      	adds	r7, #8
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}

0801673e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801673e:	b580      	push	{r7, lr}
 8016740:	b082      	sub	sp, #8
 8016742:	af00      	add	r7, sp, #0
 8016744:	ed87 0a01 	vstr	s0, [r7, #4]
 8016748:	ed97 0a01 	vldr	s0, [r7, #4]
 801674c:	2000      	movs	r0, #0
 801674e:	f7ff ffe5 	bl	801671c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8016752:	eef0 7a40 	vmov.f32	s15, s0
 8016756:	eeb0 0a67 	vmov.f32	s0, s15
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8016760:	b480      	push	{r7}
 8016762:	b083      	sub	sp, #12
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	4b03      	ldr	r3, [pc, #12]	; (8016778 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801676a:	4618      	mov	r0, r3
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop
 8016778:	0801673f 	.word	0x0801673f

0801677c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801677c:	b480      	push	{r7}
 801677e:	b083      	sub	sp, #12
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	ed87 0a00 	vstr	s0, [r7]
 8016788:	edd7 7a00 	vldr	s15, [r7]
 801678c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016798:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801679c:	eef0 7a66 	vmov.f32	s15, s13
 80167a0:	eeb0 0a67 	vmov.f32	s0, s15
 80167a4:	370c      	adds	r7, #12
 80167a6:	46bd      	mov	sp, r7
 80167a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ac:	4770      	bx	lr

080167ae <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 80167ae:	b580      	push	{r7, lr}
 80167b0:	b082      	sub	sp, #8
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	ed87 0a01 	vstr	s0, [r7, #4]
 80167b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80167bc:	2000      	movs	r0, #0
 80167be:	f7ff ffdd 	bl	801677c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 80167c2:	eef0 7a40 	vmov.f32	s15, s0
 80167c6:	eeb0 0a67 	vmov.f32	s0, s15
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 80167d0:	b480      	push	{r7}
 80167d2:	b083      	sub	sp, #12
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	4b03      	ldr	r3, [pc, #12]	; (80167e8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 80167da:	4618      	mov	r0, r3
 80167dc:	370c      	adds	r7, #12
 80167de:	46bd      	mov	sp, r7
 80167e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e4:	4770      	bx	lr
 80167e6:	bf00      	nop
 80167e8:	080167af 	.word	0x080167af

080167ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80167ec:	b590      	push	{r4, r7, lr}
 80167ee:	b08f      	sub	sp, #60	; 0x3c
 80167f0:	af04      	add	r7, sp, #16
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80167f6:	6838      	ldr	r0, [r7, #0]
 80167f8:	f7fd fa9b 	bl	8013d32 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b01      	cmp	r3, #1
 8016800:	bf14      	ite	ne
 8016802:	2301      	movne	r3, #1
 8016804:	2300      	moveq	r3, #0
 8016806:	b2db      	uxtb	r3, r3
 8016808:	2b00      	cmp	r3, #0
 801680a:	d013      	beq.n	8016834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	695c      	ldr	r4, [r3, #20]
 8016810:	6838      	ldr	r0, [r7, #0]
 8016812:	f7fd fa8e 	bl	8013d32 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8016816:	4603      	mov	r3, r0
 8016818:	2201      	movs	r2, #1
 801681a:	9203      	str	r2, [sp, #12]
 801681c:	9302      	str	r3, [sp, #8]
 801681e:	4b7c      	ldr	r3, [pc, #496]	; (8016a10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8016820:	9301      	str	r3, [sp, #4]
 8016822:	4b7c      	ldr	r3, [pc, #496]	; (8016a14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 8016824:	9300      	str	r3, [sp, #0]
 8016826:	235d      	movs	r3, #93	; 0x5d
 8016828:	4a7b      	ldr	r2, [pc, #492]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801682a:	497c      	ldr	r1, [pc, #496]	; (8016a1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	47a0      	blx	r4
 8016830:	2301      	movs	r3, #1
 8016832:	e146      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8016834:	6838      	ldr	r0, [r7, #0]
 8016836:	f7fd fa89 	bl	8013d4c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801683a:	4603      	mov	r3, r0
 801683c:	2b01      	cmp	r3, #1
 801683e:	bf14      	ite	ne
 8016840:	2301      	movne	r3, #1
 8016842:	2300      	moveq	r3, #0
 8016844:	b2db      	uxtb	r3, r3
 8016846:	2b00      	cmp	r3, #0
 8016848:	d013      	beq.n	8016872 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	695c      	ldr	r4, [r3, #20]
 801684e:	6838      	ldr	r0, [r7, #0]
 8016850:	f7fd fa7c 	bl	8013d4c <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8016854:	4603      	mov	r3, r0
 8016856:	2201      	movs	r2, #1
 8016858:	9203      	str	r2, [sp, #12]
 801685a:	9302      	str	r3, [sp, #8]
 801685c:	4b6c      	ldr	r3, [pc, #432]	; (8016a10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801685e:	9301      	str	r3, [sp, #4]
 8016860:	4b6f      	ldr	r3, [pc, #444]	; (8016a20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	235e      	movs	r3, #94	; 0x5e
 8016866:	4a6c      	ldr	r2, [pc, #432]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016868:	496c      	ldr	r1, [pc, #432]	; (8016a1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	47a0      	blx	r4
 801686e:	2301      	movs	r3, #1
 8016870:	e127      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8016872:	2200      	movs	r2, #0
 8016874:	6839      	ldr	r1, [r7, #0]
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7fb fe94 	bl	80125a4 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801687c:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016880:	2b00      	cmp	r3, #0
 8016882:	d10a      	bne.n	801689a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	695c      	ldr	r4, [r3, #20]
 8016888:	4b66      	ldr	r3, [pc, #408]	; (8016a24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801688a:	9300      	str	r3, [sp, #0]
 801688c:	2360      	movs	r3, #96	; 0x60
 801688e:	4a62      	ldr	r2, [pc, #392]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016890:	4965      	ldr	r1, [pc, #404]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	47a0      	blx	r4
 8016896:	2301      	movs	r3, #1
 8016898:	e113      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801689a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801689c:	f7fb fe05 	bl	80124aa <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80168a0:	4603      	mov	r3, r0
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	bfd4      	ite	le
 80168a6:	2301      	movle	r3, #1
 80168a8:	2300      	movgt	r3, #0
 80168aa:	b2db      	uxtb	r3, r3
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d00a      	beq.n	80168c6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	695c      	ldr	r4, [r3, #20]
 80168b4:	4b5d      	ldr	r3, [pc, #372]	; (8016a2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80168b6:	9300      	str	r3, [sp, #0]
 80168b8:	2361      	movs	r3, #97	; 0x61
 80168ba:	4a57      	ldr	r2, [pc, #348]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80168bc:	495a      	ldr	r1, [pc, #360]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	47a0      	blx	r4
 80168c2:	2301      	movs	r3, #1
 80168c4:	e0fd      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 80168c6:	2200      	movs	r2, #0
 80168c8:	6839      	ldr	r1, [r7, #0]
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f7fb fe7a 	bl	80125c4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80168d0:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 80168d2:	6a3b      	ldr	r3, [r7, #32]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d10a      	bne.n	80168ee <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	695c      	ldr	r4, [r3, #20]
 80168dc:	4b54      	ldr	r3, [pc, #336]	; (8016a30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	2363      	movs	r3, #99	; 0x63
 80168e2:	4a4d      	ldr	r2, [pc, #308]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80168e4:	4950      	ldr	r1, [pc, #320]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	47a0      	blx	r4
 80168ea:	2301      	movs	r3, #1
 80168ec:	e0e9      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	691b      	ldr	r3, [r3, #16]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d10a      	bne.n	801690c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	695c      	ldr	r4, [r3, #20]
 80168fa:	4b4e      	ldr	r3, [pc, #312]	; (8016a34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	2365      	movs	r3, #101	; 0x65
 8016900:	4a45      	ldr	r2, [pc, #276]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016902:	4949      	ldr	r1, [pc, #292]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	47a0      	blx	r4
 8016908:	2301      	movs	r3, #1
 801690a:	e0da      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	691b      	ldr	r3, [r3, #16]
 8016910:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 8016912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016914:	781b      	ldrb	r3, [r3, #0]
 8016916:	2b07      	cmp	r3, #7
 8016918:	d12f      	bne.n	801697a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801691e:	f240 4102 	movw	r1, #1026	; 0x402
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	4798      	blx	r3
 8016926:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8016928:	69bb      	ldr	r3, [r7, #24]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d10a      	bne.n	8016944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	695c      	ldr	r4, [r3, #20]
 8016932:	4b41      	ldr	r3, [pc, #260]	; (8016a38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	236b      	movs	r3, #107	; 0x6b
 8016938:	4a37      	ldr	r2, [pc, #220]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801693a:	493b      	ldr	r1, [pc, #236]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	47a0      	blx	r4
 8016940:	2301      	movs	r3, #1
 8016942:	e0be      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8016944:	69fb      	ldr	r3, [r7, #28]
 8016946:	69ba      	ldr	r2, [r7, #24]
 8016948:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801694e:	f240 4102 	movw	r1, #1026	; 0x402
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	4798      	blx	r3
 8016956:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d10a      	bne.n	8016974 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	695c      	ldr	r4, [r3, #20]
 8016962:	4b36      	ldr	r3, [pc, #216]	; (8016a3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	236f      	movs	r3, #111	; 0x6f
 8016968:	4a2b      	ldr	r2, [pc, #172]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801696a:	492f      	ldr	r1, [pc, #188]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	47a0      	blx	r4
 8016970:	2301      	movs	r3, #1
 8016972:	e0a6      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 8016974:	69fb      	ldr	r3, [r7, #28]
 8016976:	697a      	ldr	r2, [r7, #20]
 8016978:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801697a:	6a3b      	ldr	r3, [r7, #32]
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	2b07      	cmp	r3, #7
 8016980:	d112      	bne.n	80169a8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8016982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	2b09      	cmp	r3, #9
 8016988:	d028      	beq.n	80169dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	2b07      	cmp	r3, #7
 8016990:	d024      	beq.n	80169dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	695c      	ldr	r4, [r3, #20]
 8016996:	4b2a      	ldr	r3, [pc, #168]	; (8016a40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	2375      	movs	r3, #117	; 0x75
 801699c:	4a1e      	ldr	r2, [pc, #120]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801699e:	4922      	ldr	r1, [pc, #136]	; (8016a28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80169a0:	6878      	ldr	r0, [r7, #4]
 80169a2:	47a0      	blx	r4
 80169a4:	2301      	movs	r3, #1
 80169a6:	e08c      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 80169a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169aa:	781a      	ldrb	r2, [r3, #0]
 80169ac:	6a3b      	ldr	r3, [r7, #32]
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d013      	beq.n	80169dc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	695c      	ldr	r4, [r3, #20]
 80169b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	461a      	mov	r2, r3
 80169be:	6a3b      	ldr	r3, [r7, #32]
 80169c0:	781b      	ldrb	r3, [r3, #0]
 80169c2:	9303      	str	r3, [sp, #12]
 80169c4:	9202      	str	r2, [sp, #8]
 80169c6:	4b1f      	ldr	r3, [pc, #124]	; (8016a44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80169c8:	9301      	str	r3, [sp, #4]
 80169ca:	4b1f      	ldr	r3, [pc, #124]	; (8016a48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 80169cc:	9300      	str	r3, [sp, #0]
 80169ce:	2378      	movs	r3, #120	; 0x78
 80169d0:	4a11      	ldr	r2, [pc, #68]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80169d2:	4912      	ldr	r1, [pc, #72]	; (8016a1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	47a0      	blx	r4
 80169d8:	2301      	movs	r3, #1
 80169da:	e072      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 80169dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	2b07      	cmp	r3, #7
 80169e2:	d161      	bne.n	8016aa8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80169e4:	6a3b      	ldr	r3, [r7, #32]
 80169e6:	691b      	ldr	r3, [r3, #16]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d035      	beq.n	8016a58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	695c      	ldr	r4, [r3, #20]
 80169f0:	6a3b      	ldr	r3, [r7, #32]
 80169f2:	691b      	ldr	r3, [r3, #16]
 80169f4:	2200      	movs	r2, #0
 80169f6:	9203      	str	r2, [sp, #12]
 80169f8:	9302      	str	r3, [sp, #8]
 80169fa:	4b14      	ldr	r3, [pc, #80]	; (8016a4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 80169fc:	9301      	str	r3, [sp, #4]
 80169fe:	4b14      	ldr	r3, [pc, #80]	; (8016a50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8016a00:	9300      	str	r3, [sp, #0]
 8016a02:	237d      	movs	r3, #125	; 0x7d
 8016a04:	4a04      	ldr	r2, [pc, #16]	; (8016a18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016a06:	4905      	ldr	r1, [pc, #20]	; (8016a1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	47a0      	blx	r4
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	e058      	b.n	8016ac2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8016a10:	0801c020 	.word	0x0801c020
 8016a14:	0801c024 	.word	0x0801c024
 8016a18:	0801be60 	.word	0x0801be60
 8016a1c:	0801bef4 	.word	0x0801bef4
 8016a20:	0801c034 	.word	0x0801c034
 8016a24:	0801c048 	.word	0x0801c048
 8016a28:	0801bfd4 	.word	0x0801bfd4
 8016a2c:	0801c05c 	.word	0x0801c05c
 8016a30:	0801c078 	.word	0x0801c078
 8016a34:	0801c08c 	.word	0x0801c08c
 8016a38:	0801c0a8 	.word	0x0801c0a8
 8016a3c:	0801c0c0 	.word	0x0801c0c0
 8016a40:	0801c0e4 	.word	0x0801c0e4
 8016a44:	0801bfbc 	.word	0x0801bfbc
 8016a48:	0801bf9c 	.word	0x0801bf9c
 8016a4c:	0801bf10 	.word	0x0801bf10
 8016a50:	0801bf14 	.word	0x0801bf14
 8016a54:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8016a58:	f107 0308 	add.w	r3, r7, #8
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7ff fe7f 	bl	8016760 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a66:	f240 2201 	movw	r2, #513	; 0x201
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8016a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016a70:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8016a74:	f7ff faf4 	bl	8016060 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8016a78:	f107 030c 	add.w	r3, r7, #12
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f7ff fea7 	bl	80167d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a86:	f240 2201 	movw	r2, #513	; 0x201
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016a90:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8016a54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016a94:	f7ff fae4 	bl	8016060 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8016a98:	6a3b      	ldr	r3, [r7, #32]
 8016a9a:	691a      	ldr	r2, [r3, #16]
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8016aa0:	6a3b      	ldr	r3, [r7, #32]
 8016aa2:	68da      	ldr	r2, [r3, #12]
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8016aa8:	683b      	ldr	r3, [r7, #0]
 8016aaa:	695b      	ldr	r3, [r3, #20]
 8016aac:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8016aae:	69fb      	ldr	r3, [r7, #28]
 8016ab0:	9300      	str	r3, [sp, #0]
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	6a3a      	ldr	r2, [r7, #32]
 8016ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f7ff fbfd 	bl	80162b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	bf00      	nop
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	372c      	adds	r7, #44	; 0x2c
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd90      	pop	{r4, r7, pc}
 8016aca:	bf00      	nop

08016acc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b084      	sub	sp, #16
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
 8016ad4:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8016ad6:	4b21      	ldr	r3, [pc, #132]	; (8016b5c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8016ad8:	681a      	ldr	r2, [r3, #0]
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	425b      	negs	r3, r3
 8016ade:	441a      	add	r2, r3
 8016ae0:	4b1f      	ldr	r3, [pc, #124]	; (8016b60 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d224      	bcs.n	8016b32 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8016ae8:	4b1e      	ldr	r3, [pc, #120]	; (8016b64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	2b09      	cmp	r3, #9
 8016aee:	d906      	bls.n	8016afe <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	4619      	mov	r1, r3
 8016af4:	481c      	ldr	r0, [pc, #112]	; (8016b68 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 8016af6:	f7ec fa85 	bl	8003004 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8016afa:	2300      	movs	r3, #0
 8016afc:	e029      	b.n	8016b52 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8016afe:	2101      	movs	r1, #1
 8016b00:	6838      	ldr	r0, [r7, #0]
 8016b02:	f7fb fa29 	bl	8011f58 <_Z9ei_callocjj>
 8016b06:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d106      	bne.n	8016b1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	4619      	mov	r1, r3
 8016b12:	4816      	ldr	r0, [pc, #88]	; (8016b6c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 8016b14:	f7ec fa76 	bl	8003004 <_Z9ei_printfPKcz>
      return NULL;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	e01a      	b.n	8016b52 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8016b1c:	4b11      	ldr	r3, [pc, #68]	; (8016b64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	1c5a      	adds	r2, r3, #1
 8016b22:	4910      	ldr	r1, [pc, #64]	; (8016b64 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8016b24:	600a      	str	r2, [r1, #0]
 8016b26:	4912      	ldr	r1, [pc, #72]	; (8016b70 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 8016b28:	68fa      	ldr	r2, [r7, #12]
 8016b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	e00f      	b.n	8016b52 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 8016b32:	4b0a      	ldr	r3, [pc, #40]	; (8016b5c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	425b      	negs	r3, r3
 8016b3a:	4413      	add	r3, r2
 8016b3c:	4a07      	ldr	r2, [pc, #28]	; (8016b5c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8016b3e:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8016b40:	4b06      	ldr	r3, [pc, #24]	; (8016b5c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8016b46:	683a      	ldr	r2, [r7, #0]
 8016b48:	2100      	movs	r1, #0
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f002 fc6c 	bl	8019428 <memset>

  return ptr;
 8016b50:	68fb      	ldr	r3, [r7, #12]
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3710      	adds	r7, #16
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	2000045c 	.word	0x2000045c
 8016b60:	20000458 	.word	0x20000458
 8016b64:	200008f4 	.word	0x200008f4
 8016b68:	0801c134 	.word	0x0801c134
 8016b6c:	0801c1b4 	.word	0x0801c1b4
 8016b70:	200008cc 	.word	0x200008cc

08016b74 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b086      	sub	sp, #24
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	60f8      	str	r0, [r7, #12]
 8016b7c:	60b9      	str	r1, [r7, #8]
 8016b7e:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8016b80:	4b1b      	ldr	r3, [pc, #108]	; (8016bf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	2b03      	cmp	r3, #3
 8016b86:	d906      	bls.n	8016b96 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	4819      	ldr	r0, [pc, #100]	; (8016bf4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 8016b8e:	f7ec fa39 	bl	8003004 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8016b92:	2301      	movs	r3, #1
 8016b94:	e028      	b.n	8016be8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	4619      	mov	r1, r3
 8016b9e:	68f8      	ldr	r0, [r7, #12]
 8016ba0:	f7ff ff94 	bl	8016acc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8016ba8:	697b      	ldr	r3, [r7, #20]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d106      	bne.n	8016bbc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	4619      	mov	r1, r3
 8016bb2:	4811      	ldr	r0, [pc, #68]	; (8016bf8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 8016bb4:	f7ec fa26 	bl	8003004 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8016bb8:	2301      	movs	r3, #1
 8016bba:	e015      	b.n	8016be8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8016bbc:	4b0c      	ldr	r3, [pc, #48]	; (8016bf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4a0e      	ldr	r2, [pc, #56]	; (8016bfc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	4413      	add	r3, r2
 8016bc6:	f107 0210 	add.w	r2, r7, #16
 8016bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016bce:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8016bd2:	4b07      	ldr	r3, [pc, #28]	; (8016bf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	461a      	mov	r2, r3
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8016bdc:	4b04      	ldr	r3, [pc, #16]	; (8016bf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	3301      	adds	r3, #1
 8016be2:	4a03      	ldr	r2, [pc, #12]	; (8016bf0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8016be4:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8016be6:	2300      	movs	r3, #0
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3718      	adds	r7, #24
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}
 8016bf0:	20000918 	.word	0x20000918
 8016bf4:	0801c1ec 	.word	0x0801c1ec
 8016bf8:	0801c244 	.word	0x0801c244
 8016bfc:	200008f8 	.word	0x200008f8

08016c00 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8016c0a:	4b09      	ldr	r3, [pc, #36]	; (8016c30 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	461a      	mov	r2, r3
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	4293      	cmp	r3, r2
 8016c14:	dd01      	ble.n	8016c1a <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 8016c16:	2300      	movs	r3, #0
 8016c18:	e004      	b.n	8016c24 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8016c1a:	4a06      	ldr	r2, [pc, #24]	; (8016c34 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	00db      	lsls	r3, r3, #3
 8016c20:	4413      	add	r3, r2
 8016c22:	685b      	ldr	r3, [r3, #4]
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	370c      	adds	r7, #12
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2e:	4770      	bx	lr
 8016c30:	20000918 	.word	0x20000918
 8016c34:	200008f8 	.word	0x200008f8

08016c38 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8016c38:	b480      	push	{r7}
 8016c3a:	b083      	sub	sp, #12
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	019b      	lsls	r3, r3, #6
 8016c46:	4a04      	ldr	r2, [pc, #16]	; (8016c58 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8016c48:	4413      	add	r3, r2
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	370c      	adds	r7, #12
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c54:	4770      	bx	lr
 8016c56:	bf00      	nop
 8016c58:	200004b8 	.word	0x200004b8

08016c5c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8016c5c:	b480      	push	{r7}
 8016c5e:	b083      	sub	sp, #12
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8016c66:	683a      	ldr	r2, [r7, #0]
 8016c68:	4613      	mov	r3, r2
 8016c6a:	005b      	lsls	r3, r3, #1
 8016c6c:	4413      	add	r3, r2
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	4a03      	ldr	r2, [pc, #12]	; (8016c80 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 8016c72:	4413      	add	r3, r2
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	370c      	adds	r7, #12
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr
 8016c80:	20000778 	.word	0x20000778

08016c84 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8016c84:	b5b0      	push	{r4, r5, r7, lr}
 8016c86:	b092      	sub	sp, #72	; 0x48
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016c92:	2010      	movs	r0, #16
 8016c94:	4798      	blx	r3
 8016c96:	4603      	mov	r3, r0
 8016c98:	4aa3      	ldr	r2, [pc, #652]	; (8016f28 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016c9a:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8016c9c:	4ba2      	ldr	r3, [pc, #648]	; (8016f28 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d104      	bne.n	8016cae <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8016ca4:	48a1      	ldr	r0, [pc, #644]	; (8016f2c <_Z18trained_model_initPFPvjjE+0x2a8>)
 8016ca6:	f7ec f9ad 	bl	8003004 <_Z9ei_printfPKcz>
    return kTfLiteError;
 8016caa:	2301      	movs	r3, #1
 8016cac:	e21d      	b.n	80170ea <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8016cae:	4b9e      	ldr	r3, [pc, #632]	; (8016f28 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	4a9f      	ldr	r2, [pc, #636]	; (8016f30 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016cb4:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8016cb6:	4b9c      	ldr	r3, [pc, #624]	; (8016f28 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016cbe:	4a9d      	ldr	r2, [pc, #628]	; (8016f34 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8016cc0:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 8016cc2:	4b9d      	ldr	r3, [pc, #628]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016cc4:	4a9d      	ldr	r2, [pc, #628]	; (8016f3c <_Z18trained_model_initPFPvjjE+0x2b8>)
 8016cc6:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8016cc8:	4b9b      	ldr	r3, [pc, #620]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016cca:	4a9d      	ldr	r2, [pc, #628]	; (8016f40 <_Z18trained_model_initPFPvjjE+0x2bc>)
 8016ccc:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 8016cce:	4b9a      	ldr	r3, [pc, #616]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016cd0:	4a9c      	ldr	r2, [pc, #624]	; (8016f44 <_Z18trained_model_initPFPvjjE+0x2c0>)
 8016cd2:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8016cd4:	4b98      	ldr	r3, [pc, #608]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016cd6:	4a9c      	ldr	r2, [pc, #624]	; (8016f48 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8016cd8:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 8016cda:	4b97      	ldr	r3, [pc, #604]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016cdc:	4a9b      	ldr	r2, [pc, #620]	; (8016f4c <_Z18trained_model_initPFPvjjE+0x2c8>)
 8016cde:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 8016ce0:	4b95      	ldr	r3, [pc, #596]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016ce2:	4a9b      	ldr	r2, [pc, #620]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016ce4:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 8016ce6:	4b94      	ldr	r3, [pc, #592]	; (8016f38 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016ce8:	220b      	movs	r2, #11
 8016cea:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 8016cec:	2300      	movs	r3, #0
 8016cee:	647b      	str	r3, [r7, #68]	; 0x44
 8016cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cf2:	2b0a      	cmp	r3, #10
 8016cf4:	f200 810c 	bhi.w	8016f10 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 8016cf8:	4996      	ldr	r1, [pc, #600]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	005b      	lsls	r3, r3, #1
 8016d00:	4413      	add	r3, r2
 8016d02:	00db      	lsls	r3, r3, #3
 8016d04:	440b      	add	r3, r1
 8016d06:	3301      	adds	r3, #1
 8016d08:	7819      	ldrb	r1, [r3, #0]
 8016d0a:	4a91      	ldr	r2, [pc, #580]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d0e:	019b      	lsls	r3, r3, #6
 8016d10:	4413      	add	r3, r2
 8016d12:	460a      	mov	r2, r1
 8016d14:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 8016d16:	498f      	ldr	r1, [pc, #572]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d1a:	4613      	mov	r3, r2
 8016d1c:	005b      	lsls	r3, r3, #1
 8016d1e:	4413      	add	r3, r2
 8016d20:	00db      	lsls	r3, r3, #3
 8016d22:	440b      	add	r3, r1
 8016d24:	3301      	adds	r3, #1
 8016d26:	7818      	ldrb	r0, [r3, #0]
 8016d28:	498b      	ldr	r1, [pc, #556]	; (8016f58 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	009b      	lsls	r3, r3, #2
 8016d34:	440b      	add	r3, r1
 8016d36:	3308      	adds	r3, #8
 8016d38:	4602      	mov	r2, r0
 8016d3a:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8016d3c:	4a84      	ldr	r2, [pc, #528]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d40:	019b      	lsls	r3, r3, #6
 8016d42:	4413      	add	r3, r2
 8016d44:	332d      	adds	r3, #45	; 0x2d
 8016d46:	2200      	movs	r2, #0
 8016d48:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8016d4a:	4982      	ldr	r1, [pc, #520]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d4e:	4613      	mov	r3, r2
 8016d50:	005b      	lsls	r3, r3, #1
 8016d52:	4413      	add	r3, r2
 8016d54:	00db      	lsls	r3, r3, #3
 8016d56:	440b      	add	r3, r1
 8016d58:	7819      	ldrb	r1, [r3, #0]
 8016d5a:	4a7d      	ldr	r2, [pc, #500]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d5e:	019b      	lsls	r3, r3, #6
 8016d60:	4413      	add	r3, r2
 8016d62:	3314      	adds	r3, #20
 8016d64:	460a      	mov	r2, r1
 8016d66:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8016d68:	497a      	ldr	r1, [pc, #488]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d6c:	4613      	mov	r3, r2
 8016d6e:	005b      	lsls	r3, r3, #1
 8016d70:	4413      	add	r3, r2
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	440b      	add	r3, r1
 8016d76:	330c      	adds	r3, #12
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	4975      	ldr	r1, [pc, #468]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d7e:	019b      	lsls	r3, r3, #6
 8016d80:	440b      	add	r3, r1
 8016d82:	3318      	adds	r3, #24
 8016d84:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8016d86:	4973      	ldr	r1, [pc, #460]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d8a:	4613      	mov	r3, r2
 8016d8c:	005b      	lsls	r3, r3, #1
 8016d8e:	4413      	add	r3, r2
 8016d90:	00db      	lsls	r3, r3, #3
 8016d92:	440b      	add	r3, r1
 8016d94:	3308      	adds	r3, #8
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	496d      	ldr	r1, [pc, #436]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d9c:	019b      	lsls	r3, r3, #6
 8016d9e:	440b      	add	r3, r1
 8016da0:	3308      	adds	r3, #8
 8016da2:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8016da4:	496b      	ldr	r1, [pc, #428]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016da8:	4613      	mov	r3, r2
 8016daa:	005b      	lsls	r3, r3, #1
 8016dac:	4413      	add	r3, r2
 8016dae:	00db      	lsls	r3, r3, #3
 8016db0:	440b      	add	r3, r1
 8016db2:	3308      	adds	r3, #8
 8016db4:	6819      	ldr	r1, [r3, #0]
 8016db6:	4868      	ldr	r0, [pc, #416]	; (8016f58 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016dba:	4613      	mov	r3, r2
 8016dbc:	005b      	lsls	r3, r3, #1
 8016dbe:	4413      	add	r3, r2
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	4403      	add	r3, r0
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8016dc8:	4a61      	ldr	r2, [pc, #388]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dcc:	019b      	lsls	r3, r3, #6
 8016dce:	4413      	add	r3, r2
 8016dd0:	3314      	adds	r3, #20
 8016dd2:	781b      	ldrb	r3, [r3, #0]
 8016dd4:	2b02      	cmp	r3, #2
 8016dd6:	d11e      	bne.n	8016e16 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8016dd8:	495e      	ldr	r1, [pc, #376]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ddc:	4613      	mov	r3, r2
 8016dde:	005b      	lsls	r3, r3, #1
 8016de0:	4413      	add	r3, r2
 8016de2:	00db      	lsls	r3, r3, #3
 8016de4:	440b      	add	r3, r1
 8016de6:	3304      	adds	r3, #4
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	461a      	mov	r2, r3
 8016dec:	4b4e      	ldr	r3, [pc, #312]	; (8016f28 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	4413      	add	r3, r2
 8016df2:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8016df4:	4a56      	ldr	r2, [pc, #344]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016df8:	019b      	lsls	r3, r3, #6
 8016dfa:	4413      	add	r3, r2
 8016dfc:	3304      	adds	r3, #4
 8016dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e00:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 8016e02:	4955      	ldr	r1, [pc, #340]	; (8016f58 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e06:	4613      	mov	r3, r2
 8016e08:	005b      	lsls	r3, r3, #1
 8016e0a:	4413      	add	r3, r2
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	440b      	add	r3, r1
 8016e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e12:	601a      	str	r2, [r3, #0]
 8016e14:	e01f      	b.n	8016e56 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 8016e16:	494f      	ldr	r1, [pc, #316]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	005b      	lsls	r3, r3, #1
 8016e1e:	4413      	add	r3, r2
 8016e20:	00db      	lsls	r3, r3, #3
 8016e22:	440b      	add	r3, r1
 8016e24:	3304      	adds	r3, #4
 8016e26:	681a      	ldr	r2, [r3, #0]
 8016e28:	4949      	ldr	r1, [pc, #292]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e2c:	019b      	lsls	r3, r3, #6
 8016e2e:	440b      	add	r3, r1
 8016e30:	3304      	adds	r3, #4
 8016e32:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8016e34:	4947      	ldr	r1, [pc, #284]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e38:	4613      	mov	r3, r2
 8016e3a:	005b      	lsls	r3, r3, #1
 8016e3c:	4413      	add	r3, r2
 8016e3e:	00db      	lsls	r3, r3, #3
 8016e40:	440b      	add	r3, r1
 8016e42:	3304      	adds	r3, #4
 8016e44:	6819      	ldr	r1, [r3, #0]
 8016e46:	4844      	ldr	r0, [pc, #272]	; (8016f58 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e4a:	4613      	mov	r3, r2
 8016e4c:	005b      	lsls	r3, r3, #1
 8016e4e:	4413      	add	r3, r2
 8016e50:	009b      	lsls	r3, r3, #2
 8016e52:	4403      	add	r3, r0
 8016e54:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8016e56:	4a3e      	ldr	r2, [pc, #248]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e5a:	019b      	lsls	r3, r3, #6
 8016e5c:	4413      	add	r3, r2
 8016e5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016e62:	493c      	ldr	r1, [pc, #240]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e66:	4613      	mov	r3, r2
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4413      	add	r3, r2
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	440b      	add	r3, r1
 8016e70:	f103 0210 	add.w	r2, r3, #16
 8016e74:	4603      	mov	r3, r0
 8016e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e7a:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 8016e7e:	4a34      	ldr	r2, [pc, #208]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e82:	019b      	lsls	r3, r3, #6
 8016e84:	4413      	add	r3, r2
 8016e86:	3330      	adds	r3, #48	; 0x30
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	2b01      	cmp	r3, #1
 8016e8c:	d11b      	bne.n	8016ec6 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 8016e8e:	4931      	ldr	r1, [pc, #196]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e92:	4613      	mov	r3, r2
 8016e94:	005b      	lsls	r3, r3, #1
 8016e96:	4413      	add	r3, r2
 8016e98:	00db      	lsls	r3, r3, #3
 8016e9a:	440b      	add	r3, r1
 8016e9c:	3314      	adds	r3, #20
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 8016ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	685a      	ldr	r2, [r3, #4]
 8016ea8:	4929      	ldr	r1, [pc, #164]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eac:	019b      	lsls	r3, r3, #6
 8016eae:	440b      	add	r3, r1
 8016eb0:	330c      	adds	r3, #12
 8016eb2:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8016eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	685a      	ldr	r2, [r3, #4]
 8016eba:	4925      	ldr	r1, [pc, #148]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ebe:	019b      	lsls	r3, r3, #6
 8016ec0:	440b      	add	r3, r1
 8016ec2:	3310      	adds	r3, #16
 8016ec4:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8016ec6:	4a22      	ldr	r2, [pc, #136]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eca:	019b      	lsls	r3, r3, #6
 8016ecc:	4413      	add	r3, r2
 8016ece:	3314      	adds	r3, #20
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2b02      	cmp	r3, #2
 8016ed4:	d118      	bne.n	8016f08 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8016ed6:	4a1e      	ldr	r2, [pc, #120]	; (8016f50 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eda:	019b      	lsls	r3, r3, #6
 8016edc:	4413      	add	r3, r2
 8016ede:	3304      	adds	r3, #4
 8016ee0:	6819      	ldr	r1, [r3, #0]
 8016ee2:	481c      	ldr	r0, [pc, #112]	; (8016f54 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	4413      	add	r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	4403      	add	r3, r0
 8016ef0:	330c      	adds	r3, #12
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	440b      	add	r3, r1
 8016ef6:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 8016ef8:	4b0d      	ldr	r3, [pc, #52]	; (8016f30 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d902      	bls.n	8016f08 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 8016f02:	4a0b      	ldr	r2, [pc, #44]	; (8016f30 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f06:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 8016f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8016f0e:	e6ef      	b.n	8016cf0 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8016f10:	4b07      	ldr	r3, [pc, #28]	; (8016f30 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	4b07      	ldr	r3, [pc, #28]	; (8016f34 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d921      	bls.n	8016f60 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8016f1c:	480f      	ldr	r0, [pc, #60]	; (8016f5c <_Z18trained_model_initPFPvjjE+0x2d8>)
 8016f1e:	f7ec f871 	bl	8003004 <_Z9ei_printfPKcz>
    return kTfLiteError;
 8016f22:	2301      	movs	r3, #1
 8016f24:	e0e1      	b.n	80170ea <_Z18trained_model_initPFPvjjE+0x466>
 8016f26:	bf00      	nop
 8016f28:	20000454 	.word	0x20000454
 8016f2c:	0801c278 	.word	0x0801c278
 8016f30:	20000458 	.word	0x20000458
 8016f34:	2000045c 	.word	0x2000045c
 8016f38:	20000460 	.word	0x20000460
 8016f3c:	08016acd 	.word	0x08016acd
 8016f40:	08016b75 	.word	0x08016b75
 8016f44:	08016c01 	.word	0x08016c01
 8016f48:	08016c39 	.word	0x08016c39
 8016f4c:	08016c5d 	.word	0x08016c5d
 8016f50:	200004b8 	.word	0x200004b8
 8016f54:	200000ec 	.word	0x200000ec
 8016f58:	20000778 	.word	0x20000778
 8016f5c:	0801c2a0 	.word	0x0801c2a0
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8016f60:	4c64      	ldr	r4, [pc, #400]	; (80170f4 <_Z18trained_model_initPFPvjjE+0x470>)
 8016f62:	463b      	mov	r3, r7
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7fd fe59 	bl	8014c1c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8016f6a:	4625      	mov	r5, r4
 8016f6c:	463c      	mov	r4, r7
 8016f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016f72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8016f7a:	4c5e      	ldr	r4, [pc, #376]	; (80170f4 <_Z18trained_model_initPFPvjjE+0x470>)
 8016f7c:	463b      	mov	r3, r7
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe fc7c 	bl	801587c <_ZN6tflite16Register_SOFTMAXEv>
 8016f84:	3420      	adds	r4, #32
 8016f86:	463d      	mov	r5, r7
 8016f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 8016f94:	2300      	movs	r3, #0
 8016f96:	643b      	str	r3, [r7, #64]	; 0x40
 8016f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f9a:	2b03      	cmp	r3, #3
 8016f9c:	d86f      	bhi.n	801707e <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 8016f9e:	4a56      	ldr	r2, [pc, #344]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 8016fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fa2:	011b      	lsls	r3, r3, #4
 8016fa4:	4413      	add	r3, r2
 8016fa6:	6819      	ldr	r1, [r3, #0]
 8016fa8:	4854      	ldr	r0, [pc, #336]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 8016faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016fac:	4613      	mov	r3, r2
 8016fae:	00db      	lsls	r3, r3, #3
 8016fb0:	4413      	add	r3, r2
 8016fb2:	009b      	lsls	r3, r3, #2
 8016fb4:	4403      	add	r3, r0
 8016fb6:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8016fb8:	4a4f      	ldr	r2, [pc, #316]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 8016fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fbc:	011b      	lsls	r3, r3, #4
 8016fbe:	4413      	add	r3, r2
 8016fc0:	3304      	adds	r3, #4
 8016fc2:	6819      	ldr	r1, [r3, #0]
 8016fc4:	484d      	ldr	r0, [pc, #308]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 8016fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016fc8:	4613      	mov	r3, r2
 8016fca:	00db      	lsls	r3, r3, #3
 8016fcc:	4413      	add	r3, r2
 8016fce:	009b      	lsls	r3, r3, #2
 8016fd0:	4403      	add	r3, r0
 8016fd2:	3304      	adds	r3, #4
 8016fd4:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8016fd6:	4a48      	ldr	r2, [pc, #288]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 8016fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fda:	011b      	lsls	r3, r3, #4
 8016fdc:	4413      	add	r3, r2
 8016fde:	3308      	adds	r3, #8
 8016fe0:	6819      	ldr	r1, [r3, #0]
 8016fe2:	4846      	ldr	r0, [pc, #280]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 8016fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016fe6:	4613      	mov	r3, r2
 8016fe8:	00db      	lsls	r3, r3, #3
 8016fea:	4413      	add	r3, r2
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	4403      	add	r3, r0
 8016ff0:	3314      	adds	r3, #20
 8016ff2:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 8016ff4:	4941      	ldr	r1, [pc, #260]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 8016ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016ff8:	4613      	mov	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	4413      	add	r3, r2
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	440b      	add	r3, r1
 8017002:	3318      	adds	r3, #24
 8017004:	2200      	movs	r2, #0
 8017006:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 8017008:	493c      	ldr	r1, [pc, #240]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 801700a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801700c:	4613      	mov	r3, r2
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	4413      	add	r3, r2
 8017012:	009b      	lsls	r3, r3, #2
 8017014:	440b      	add	r3, r1
 8017016:	331c      	adds	r3, #28
 8017018:	2200      	movs	r2, #0
 801701a:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801701c:	4a36      	ldr	r2, [pc, #216]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 801701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017020:	011b      	lsls	r3, r3, #4
 8017022:	4413      	add	r3, r2
 8017024:	330c      	adds	r3, #12
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	4a32      	ldr	r2, [pc, #200]	; (80170f4 <_Z18trained_model_initPFPvjjE+0x470>)
 801702a:	015b      	lsls	r3, r3, #5
 801702c:	4413      	add	r3, r2
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d020      	beq.n	8017076 <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8017034:	4a30      	ldr	r2, [pc, #192]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 8017036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017038:	011b      	lsls	r3, r3, #4
 801703a:	4413      	add	r3, r2
 801703c:	330c      	adds	r3, #12
 801703e:	781b      	ldrb	r3, [r3, #0]
 8017040:	4a2c      	ldr	r2, [pc, #176]	; (80170f4 <_Z18trained_model_initPFPvjjE+0x470>)
 8017042:	015b      	lsls	r3, r3, #5
 8017044:	4413      	add	r3, r2
 8017046:	681c      	ldr	r4, [r3, #0]
 8017048:	492c      	ldr	r1, [pc, #176]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 801704a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801704c:	4613      	mov	r3, r2
 801704e:	00db      	lsls	r3, r3, #3
 8017050:	4413      	add	r3, r2
 8017052:	009b      	lsls	r3, r3, #2
 8017054:	440b      	add	r3, r1
 8017056:	3314      	adds	r3, #20
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	2200      	movs	r2, #0
 801705c:	4619      	mov	r1, r3
 801705e:	4828      	ldr	r0, [pc, #160]	; (8017100 <_Z18trained_model_initPFPvjjE+0x47c>)
 8017060:	47a0      	blx	r4
 8017062:	4601      	mov	r1, r0
 8017064:	4825      	ldr	r0, [pc, #148]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 8017066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017068:	4613      	mov	r3, r2
 801706a:	00db      	lsls	r3, r3, #3
 801706c:	4413      	add	r3, r2
 801706e:	009b      	lsls	r3, r3, #2
 8017070:	4403      	add	r3, r0
 8017072:	3310      	adds	r3, #16
 8017074:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 8017076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017078:	3301      	adds	r3, #1
 801707a:	643b      	str	r3, [r7, #64]	; 0x40
 801707c:	e78c      	b.n	8016f98 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 801707e:	2300      	movs	r3, #0
 8017080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017084:	2b03      	cmp	r3, #3
 8017086:	d82f      	bhi.n	80170e8 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8017088:	4a1b      	ldr	r2, [pc, #108]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 801708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801708c:	011b      	lsls	r3, r3, #4
 801708e:	4413      	add	r3, r2
 8017090:	330c      	adds	r3, #12
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	4a17      	ldr	r2, [pc, #92]	; (80170f4 <_Z18trained_model_initPFPvjjE+0x470>)
 8017096:	015b      	lsls	r3, r3, #5
 8017098:	4413      	add	r3, r2
 801709a:	3308      	adds	r3, #8
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d01e      	beq.n	80170e0 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 80170a2:	4a15      	ldr	r2, [pc, #84]	; (80170f8 <_Z18trained_model_initPFPvjjE+0x474>)
 80170a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170a6:	011b      	lsls	r3, r3, #4
 80170a8:	4413      	add	r3, r2
 80170aa:	330c      	adds	r3, #12
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	4a11      	ldr	r2, [pc, #68]	; (80170f4 <_Z18trained_model_initPFPvjjE+0x470>)
 80170b0:	015b      	lsls	r3, r3, #5
 80170b2:	4413      	add	r3, r2
 80170b4:	3308      	adds	r3, #8
 80170b6:	681c      	ldr	r4, [r3, #0]
 80170b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170ba:	4613      	mov	r3, r2
 80170bc:	00db      	lsls	r3, r3, #3
 80170be:	4413      	add	r3, r2
 80170c0:	009b      	lsls	r3, r3, #2
 80170c2:	4a0e      	ldr	r2, [pc, #56]	; (80170fc <_Z18trained_model_initPFPvjjE+0x478>)
 80170c4:	4413      	add	r3, r2
 80170c6:	4619      	mov	r1, r3
 80170c8:	480d      	ldr	r0, [pc, #52]	; (8017100 <_Z18trained_model_initPFPvjjE+0x47c>)
 80170ca:	47a0      	blx	r4
 80170cc:	4603      	mov	r3, r0
 80170ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 80170d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d002      	beq.n	80170e0 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 80170da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80170de:	e004      	b.n	80170ea <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 80170e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170e2:	3301      	adds	r3, #1
 80170e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80170e6:	e7cc      	b.n	8017082 <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 80170e8:	2300      	movs	r3, #0
}
 80170ea:	4618      	mov	r0, r3
 80170ec:	3748      	adds	r7, #72	; 0x48
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bdb0      	pop	{r4, r5, r7, pc}
 80170f2:	bf00      	nop
 80170f4:	200007fc 	.word	0x200007fc
 80170f8:	0801c95c 	.word	0x0801c95c
 80170fc:	2000083c 	.word	0x2000083c
 8017100:	20000460 	.word	0x20000460

08017104 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8017104:	b480      	push	{r7}
 8017106:	b083      	sub	sp, #12
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801710c:	4b05      	ldr	r3, [pc, #20]	; (8017124 <_Z19trained_model_inputi+0x20>)
 801710e:	689a      	ldr	r2, [r3, #8]
 8017110:	2300      	movs	r3, #0
 8017112:	019b      	lsls	r3, r3, #6
 8017114:	4413      	add	r3, r2
}
 8017116:	4618      	mov	r0, r3
 8017118:	370c      	adds	r7, #12
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop
 8017124:	20000460 	.word	0x20000460

08017128 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 8017128:	b480      	push	{r7}
 801712a:	b083      	sub	sp, #12
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 8017130:	4b05      	ldr	r3, [pc, #20]	; (8017148 <_Z20trained_model_outputi+0x20>)
 8017132:	689a      	ldr	r2, [r3, #8]
 8017134:	230a      	movs	r3, #10
 8017136:	019b      	lsls	r3, r3, #6
 8017138:	4413      	add	r3, r2
}
 801713a:	4618      	mov	r0, r3
 801713c:	370c      	adds	r7, #12
 801713e:	46bd      	mov	sp, r7
 8017140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017144:	4770      	bx	lr
 8017146:	bf00      	nop
 8017148:	20000460 	.word	0x20000460

0801714c <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801714c:	b590      	push	{r4, r7, lr}
 801714e:	b083      	sub	sp, #12
 8017150:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 8017152:	2300      	movs	r3, #0
 8017154:	607b      	str	r3, [r7, #4]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2b03      	cmp	r3, #3
 801715a:	d81f      	bhi.n	801719c <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801715c:	4a12      	ldr	r2, [pc, #72]	; (80171a8 <_Z20trained_model_invokev+0x5c>)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	011b      	lsls	r3, r3, #4
 8017162:	4413      	add	r3, r2
 8017164:	330c      	adds	r3, #12
 8017166:	781b      	ldrb	r3, [r3, #0]
 8017168:	4a10      	ldr	r2, [pc, #64]	; (80171ac <_Z20trained_model_invokev+0x60>)
 801716a:	015b      	lsls	r3, r3, #5
 801716c:	4413      	add	r3, r2
 801716e:	330c      	adds	r3, #12
 8017170:	681c      	ldr	r4, [r3, #0]
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	4613      	mov	r3, r2
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	4413      	add	r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4a0c      	ldr	r2, [pc, #48]	; (80171b0 <_Z20trained_model_invokev+0x64>)
 801717e:	4413      	add	r3, r2
 8017180:	4619      	mov	r1, r3
 8017182:	480c      	ldr	r0, [pc, #48]	; (80171b4 <_Z20trained_model_invokev+0x68>)
 8017184:	47a0      	blx	r4
 8017186:	4603      	mov	r3, r0
 8017188:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801718a:	78fb      	ldrb	r3, [r7, #3]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d001      	beq.n	8017194 <_Z20trained_model_invokev+0x48>
      return status;
 8017190:	78fb      	ldrb	r3, [r7, #3]
 8017192:	e004      	b.n	801719e <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	3301      	adds	r3, #1
 8017198:	607b      	str	r3, [r7, #4]
 801719a:	e7dc      	b.n	8017156 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801719c:	2300      	movs	r3, #0
}
 801719e:	4618      	mov	r0, r3
 80171a0:	370c      	adds	r7, #12
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd90      	pop	{r4, r7, pc}
 80171a6:	bf00      	nop
 80171a8:	0801c95c 	.word	0x0801c95c
 80171ac:	200007fc 	.word	0x200007fc
 80171b0:	2000083c 	.word	0x2000083c
 80171b4:	20000460 	.word	0x20000460

080171b8 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b084      	sub	sp, #16
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 80171c0:	4b10      	ldr	r3, [pc, #64]	; (8017204 <_Z19trained_model_resetPFvPvE+0x4c>)
 80171c2:	681a      	ldr	r2, [r3, #0]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	4610      	mov	r0, r2
 80171c8:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 80171ca:	4b0f      	ldr	r3, [pc, #60]	; (8017208 <_Z19trained_model_resetPFvPvE+0x50>)
 80171cc:	2200      	movs	r2, #0
 80171ce:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80171d0:	2300      	movs	r3, #0
 80171d2:	60fb      	str	r3, [r7, #12]
 80171d4:	4b0d      	ldr	r3, [pc, #52]	; (801720c <_Z19trained_model_resetPFvPvE+0x54>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	68fa      	ldr	r2, [r7, #12]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d20a      	bcs.n	80171f4 <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 80171de:	4a0c      	ldr	r2, [pc, #48]	; (8017210 <_Z19trained_model_resetPFvPvE+0x58>)
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7fa fec4 	bl	8011f74 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	3301      	adds	r3, #1
 80171f0:	60fb      	str	r3, [r7, #12]
 80171f2:	e7ef      	b.n	80171d4 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 80171f4:	4b05      	ldr	r3, [pc, #20]	; (801720c <_Z19trained_model_resetPFvPvE+0x54>)
 80171f6:	2200      	movs	r2, #0
 80171f8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80171fa:	2300      	movs	r3, #0
}
 80171fc:	4618      	mov	r0, r3
 80171fe:	3710      	adds	r7, #16
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}
 8017204:	20000454 	.word	0x20000454
 8017208:	20000918 	.word	0x20000918
 801720c:	200008f4 	.word	0x200008f4
 8017210:	200008cc 	.word	0x200008cc

08017214 <_Z41__static_initialization_and_destruction_0ii>:
 8017214:	b480      	push	{r7}
 8017216:	b083      	sub	sp, #12
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	2b01      	cmp	r3, #1
 8017222:	d11f      	bne.n	8017264 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801722a:	4293      	cmp	r3, r2
 801722c:	d11a      	bne.n	8017264 <_Z41__static_initialization_and_destruction_0ii+0x50>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension0, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 801722e:	4b10      	ldr	r3, [pc, #64]	; (8017270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 8017234:	4a0f      	ldr	r2, [pc, #60]	; (8017274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8017236:	6053      	str	r3, [r2, #4]
 8017238:	4b0d      	ldr	r3, [pc, #52]	; (8017270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	4a0d      	ldr	r2, [pc, #52]	; (8017274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801723e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
 8017242:	4b0b      	ldr	r3, [pc, #44]	; (8017270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 8017248:	4a0a      	ldr	r2, [pc, #40]	; (8017274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801724a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801724e:	4b08      	ldr	r3, [pc, #32]	; (8017270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8017254:	4a07      	ldr	r2, [pc, #28]	; (8017274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8017256:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801725a:	4b05      	ldr	r3, [pc, #20]	; (8017270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	4a05      	ldr	r2, [pc, #20]	; (8017274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8017260:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8017264:	bf00      	nop
 8017266:	370c      	adds	r7, #12
 8017268:	46bd      	mov	sp, r7
 801726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726e:	4770      	bx	lr
 8017270:	20000454 	.word	0x20000454
 8017274:	200000ec 	.word	0x200000ec

08017278 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8017278:	b580      	push	{r7, lr}
 801727a:	af00      	add	r7, sp, #0
 801727c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017280:	2001      	movs	r0, #1
 8017282:	f7ff ffc7 	bl	8017214 <_Z41__static_initialization_and_destruction_0ii>
 8017286:	bd80      	pop	{r7, pc}

08017288 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801728c:	2200      	movs	r2, #0
 801728e:	4912      	ldr	r1, [pc, #72]	; (80172d8 <MX_USB_DEVICE_Init+0x50>)
 8017290:	4812      	ldr	r0, [pc, #72]	; (80172dc <MX_USB_DEVICE_Init+0x54>)
 8017292:	f7f2 faf1 	bl	8009878 <USBD_Init>
 8017296:	4603      	mov	r3, r0
 8017298:	2b00      	cmp	r3, #0
 801729a:	d001      	beq.n	80172a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801729c:	f7ec f976 	bl	800358c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80172a0:	490f      	ldr	r1, [pc, #60]	; (80172e0 <MX_USB_DEVICE_Init+0x58>)
 80172a2:	480e      	ldr	r0, [pc, #56]	; (80172dc <MX_USB_DEVICE_Init+0x54>)
 80172a4:	f7f2 fb18 	bl	80098d8 <USBD_RegisterClass>
 80172a8:	4603      	mov	r3, r0
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d001      	beq.n	80172b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80172ae:	f7ec f96d 	bl	800358c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80172b2:	490c      	ldr	r1, [pc, #48]	; (80172e4 <MX_USB_DEVICE_Init+0x5c>)
 80172b4:	4809      	ldr	r0, [pc, #36]	; (80172dc <MX_USB_DEVICE_Init+0x54>)
 80172b6:	f7f2 fa09 	bl	80096cc <USBD_CDC_RegisterInterface>
 80172ba:	4603      	mov	r3, r0
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d001      	beq.n	80172c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80172c0:	f7ec f964 	bl	800358c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80172c4:	4805      	ldr	r0, [pc, #20]	; (80172dc <MX_USB_DEVICE_Init+0x54>)
 80172c6:	f7f2 fb3d 	bl	8009944 <USBD_Start>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d001      	beq.n	80172d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80172d0:	f7ec f95c 	bl	800358c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80172d4:	bf00      	nop
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	20000208 	.word	0x20000208
 80172dc:	2000091c 	.word	0x2000091c
 80172e0:	20000060 	.word	0x20000060
 80172e4:	200001f4 	.word	0x200001f4

080172e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80172ec:	2200      	movs	r2, #0
 80172ee:	4905      	ldr	r1, [pc, #20]	; (8017304 <CDC_Init_FS+0x1c>)
 80172f0:	4805      	ldr	r0, [pc, #20]	; (8017308 <CDC_Init_FS+0x20>)
 80172f2:	f7f2 fa05 	bl	8009700 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80172f6:	4905      	ldr	r1, [pc, #20]	; (801730c <CDC_Init_FS+0x24>)
 80172f8:	4803      	ldr	r0, [pc, #12]	; (8017308 <CDC_Init_FS+0x20>)
 80172fa:	f7f2 fa23 	bl	8009744 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80172fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017300:	4618      	mov	r0, r3
 8017302:	bd80      	pop	{r7, pc}
 8017304:	200013f8 	.word	0x200013f8
 8017308:	2000091c 	.word	0x2000091c
 801730c:	20000bf8 	.word	0x20000bf8

08017310 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017310:	b480      	push	{r7}
 8017312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017314:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017316:	4618      	mov	r0, r3
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr

08017320 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017320:	b480      	push	{r7}
 8017322:	b083      	sub	sp, #12
 8017324:	af00      	add	r7, sp, #0
 8017326:	4603      	mov	r3, r0
 8017328:	6039      	str	r1, [r7, #0]
 801732a:	71fb      	strb	r3, [r7, #7]
 801732c:	4613      	mov	r3, r2
 801732e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017330:	79fb      	ldrb	r3, [r7, #7]
 8017332:	2b23      	cmp	r3, #35	; 0x23
 8017334:	d84a      	bhi.n	80173cc <CDC_Control_FS+0xac>
 8017336:	a201      	add	r2, pc, #4	; (adr r2, 801733c <CDC_Control_FS+0x1c>)
 8017338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801733c:	080173cd 	.word	0x080173cd
 8017340:	080173cd 	.word	0x080173cd
 8017344:	080173cd 	.word	0x080173cd
 8017348:	080173cd 	.word	0x080173cd
 801734c:	080173cd 	.word	0x080173cd
 8017350:	080173cd 	.word	0x080173cd
 8017354:	080173cd 	.word	0x080173cd
 8017358:	080173cd 	.word	0x080173cd
 801735c:	080173cd 	.word	0x080173cd
 8017360:	080173cd 	.word	0x080173cd
 8017364:	080173cd 	.word	0x080173cd
 8017368:	080173cd 	.word	0x080173cd
 801736c:	080173cd 	.word	0x080173cd
 8017370:	080173cd 	.word	0x080173cd
 8017374:	080173cd 	.word	0x080173cd
 8017378:	080173cd 	.word	0x080173cd
 801737c:	080173cd 	.word	0x080173cd
 8017380:	080173cd 	.word	0x080173cd
 8017384:	080173cd 	.word	0x080173cd
 8017388:	080173cd 	.word	0x080173cd
 801738c:	080173cd 	.word	0x080173cd
 8017390:	080173cd 	.word	0x080173cd
 8017394:	080173cd 	.word	0x080173cd
 8017398:	080173cd 	.word	0x080173cd
 801739c:	080173cd 	.word	0x080173cd
 80173a0:	080173cd 	.word	0x080173cd
 80173a4:	080173cd 	.word	0x080173cd
 80173a8:	080173cd 	.word	0x080173cd
 80173ac:	080173cd 	.word	0x080173cd
 80173b0:	080173cd 	.word	0x080173cd
 80173b4:	080173cd 	.word	0x080173cd
 80173b8:	080173cd 	.word	0x080173cd
 80173bc:	080173cd 	.word	0x080173cd
 80173c0:	080173cd 	.word	0x080173cd
 80173c4:	080173cd 	.word	0x080173cd
 80173c8:	080173cd 	.word	0x080173cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80173cc:	bf00      	nop
  }

  return (USBD_OK);
 80173ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	370c      	adds	r7, #12
 80173d4:	46bd      	mov	sp, r7
 80173d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173da:	4770      	bx	lr

080173dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b082      	sub	sp, #8
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
 80173e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80173e6:	6879      	ldr	r1, [r7, #4]
 80173e8:	4805      	ldr	r0, [pc, #20]	; (8017400 <CDC_Receive_FS+0x24>)
 80173ea:	f7f2 f9ab 	bl	8009744 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80173ee:	4804      	ldr	r0, [pc, #16]	; (8017400 <CDC_Receive_FS+0x24>)
 80173f0:	f7f2 fa0c 	bl	800980c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80173f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3708      	adds	r7, #8
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	2000091c 	.word	0x2000091c

08017404 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b084      	sub	sp, #16
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	460b      	mov	r3, r1
 801740e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017410:	2300      	movs	r3, #0
 8017412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017414:	4b0d      	ldr	r3, [pc, #52]	; (801744c <CDC_Transmit_FS+0x48>)
 8017416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801741a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017422:	2b00      	cmp	r3, #0
 8017424:	d001      	beq.n	801742a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017426:	2301      	movs	r3, #1
 8017428:	e00b      	b.n	8017442 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801742a:	887b      	ldrh	r3, [r7, #2]
 801742c:	461a      	mov	r2, r3
 801742e:	6879      	ldr	r1, [r7, #4]
 8017430:	4806      	ldr	r0, [pc, #24]	; (801744c <CDC_Transmit_FS+0x48>)
 8017432:	f7f2 f965 	bl	8009700 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017436:	4805      	ldr	r0, [pc, #20]	; (801744c <CDC_Transmit_FS+0x48>)
 8017438:	f7f2 f9a2 	bl	8009780 <USBD_CDC_TransmitPacket>
 801743c:	4603      	mov	r3, r0
 801743e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017440:	7bfb      	ldrb	r3, [r7, #15]
}
 8017442:	4618      	mov	r0, r3
 8017444:	3710      	adds	r7, #16
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	2000091c 	.word	0x2000091c

08017450 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017450:	b480      	push	{r7}
 8017452:	b087      	sub	sp, #28
 8017454:	af00      	add	r7, sp, #0
 8017456:	60f8      	str	r0, [r7, #12]
 8017458:	60b9      	str	r1, [r7, #8]
 801745a:	4613      	mov	r3, r2
 801745c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801745e:	2300      	movs	r3, #0
 8017460:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017466:	4618      	mov	r0, r3
 8017468:	371c      	adds	r7, #28
 801746a:	46bd      	mov	sp, r7
 801746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017470:	4770      	bx	lr
	...

08017474 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017474:	b480      	push	{r7}
 8017476:	b083      	sub	sp, #12
 8017478:	af00      	add	r7, sp, #0
 801747a:	4603      	mov	r3, r0
 801747c:	6039      	str	r1, [r7, #0]
 801747e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	2212      	movs	r2, #18
 8017484:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017486:	4b03      	ldr	r3, [pc, #12]	; (8017494 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017488:	4618      	mov	r0, r3
 801748a:	370c      	adds	r7, #12
 801748c:	46bd      	mov	sp, r7
 801748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017492:	4770      	bx	lr
 8017494:	20000224 	.word	0x20000224

08017498 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017498:	b480      	push	{r7}
 801749a:	b083      	sub	sp, #12
 801749c:	af00      	add	r7, sp, #0
 801749e:	4603      	mov	r3, r0
 80174a0:	6039      	str	r1, [r7, #0]
 80174a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	2204      	movs	r2, #4
 80174a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80174aa:	4b03      	ldr	r3, [pc, #12]	; (80174b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr
 80174b8:	20000238 	.word	0x20000238

080174bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	4603      	mov	r3, r0
 80174c4:	6039      	str	r1, [r7, #0]
 80174c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80174c8:	79fb      	ldrb	r3, [r7, #7]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d105      	bne.n	80174da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174ce:	683a      	ldr	r2, [r7, #0]
 80174d0:	4907      	ldr	r1, [pc, #28]	; (80174f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80174d2:	4808      	ldr	r0, [pc, #32]	; (80174f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80174d4:	f7f3 fbe2 	bl	800ac9c <USBD_GetString>
 80174d8:	e004      	b.n	80174e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174da:	683a      	ldr	r2, [r7, #0]
 80174dc:	4904      	ldr	r1, [pc, #16]	; (80174f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80174de:	4805      	ldr	r0, [pc, #20]	; (80174f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80174e0:	f7f3 fbdc 	bl	800ac9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80174e4:	4b02      	ldr	r3, [pc, #8]	; (80174f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80174e6:	4618      	mov	r0, r3
 80174e8:	3708      	adds	r7, #8
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	bf00      	nop
 80174f0:	20001bf8 	.word	0x20001bf8
 80174f4:	0801c2f4 	.word	0x0801c2f4

080174f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	4603      	mov	r3, r0
 8017500:	6039      	str	r1, [r7, #0]
 8017502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017504:	683a      	ldr	r2, [r7, #0]
 8017506:	4904      	ldr	r1, [pc, #16]	; (8017518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017508:	4804      	ldr	r0, [pc, #16]	; (801751c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801750a:	f7f3 fbc7 	bl	800ac9c <USBD_GetString>
  return USBD_StrDesc;
 801750e:	4b02      	ldr	r3, [pc, #8]	; (8017518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017510:	4618      	mov	r0, r3
 8017512:	3708      	adds	r7, #8
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}
 8017518:	20001bf8 	.word	0x20001bf8
 801751c:	0801c30c 	.word	0x0801c30c

08017520 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b082      	sub	sp, #8
 8017524:	af00      	add	r7, sp, #0
 8017526:	4603      	mov	r3, r0
 8017528:	6039      	str	r1, [r7, #0]
 801752a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	221a      	movs	r2, #26
 8017530:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017532:	f000 f843 	bl	80175bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017536:	4b02      	ldr	r3, [pc, #8]	; (8017540 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017538:	4618      	mov	r0, r3
 801753a:	3708      	adds	r7, #8
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}
 8017540:	2000023c 	.word	0x2000023c

08017544 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	4603      	mov	r3, r0
 801754c:	6039      	str	r1, [r7, #0]
 801754e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017550:	79fb      	ldrb	r3, [r7, #7]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d105      	bne.n	8017562 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017556:	683a      	ldr	r2, [r7, #0]
 8017558:	4907      	ldr	r1, [pc, #28]	; (8017578 <USBD_FS_ConfigStrDescriptor+0x34>)
 801755a:	4808      	ldr	r0, [pc, #32]	; (801757c <USBD_FS_ConfigStrDescriptor+0x38>)
 801755c:	f7f3 fb9e 	bl	800ac9c <USBD_GetString>
 8017560:	e004      	b.n	801756c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017562:	683a      	ldr	r2, [r7, #0]
 8017564:	4904      	ldr	r1, [pc, #16]	; (8017578 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017566:	4805      	ldr	r0, [pc, #20]	; (801757c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017568:	f7f3 fb98 	bl	800ac9c <USBD_GetString>
  }
  return USBD_StrDesc;
 801756c:	4b02      	ldr	r3, [pc, #8]	; (8017578 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801756e:	4618      	mov	r0, r3
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	20001bf8 	.word	0x20001bf8
 801757c:	0801c320 	.word	0x0801c320

08017580 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b082      	sub	sp, #8
 8017584:	af00      	add	r7, sp, #0
 8017586:	4603      	mov	r3, r0
 8017588:	6039      	str	r1, [r7, #0]
 801758a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801758c:	79fb      	ldrb	r3, [r7, #7]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d105      	bne.n	801759e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017592:	683a      	ldr	r2, [r7, #0]
 8017594:	4907      	ldr	r1, [pc, #28]	; (80175b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017596:	4808      	ldr	r0, [pc, #32]	; (80175b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017598:	f7f3 fb80 	bl	800ac9c <USBD_GetString>
 801759c:	e004      	b.n	80175a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801759e:	683a      	ldr	r2, [r7, #0]
 80175a0:	4904      	ldr	r1, [pc, #16]	; (80175b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80175a2:	4805      	ldr	r0, [pc, #20]	; (80175b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80175a4:	f7f3 fb7a 	bl	800ac9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80175a8:	4b02      	ldr	r3, [pc, #8]	; (80175b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
 80175b2:	bf00      	nop
 80175b4:	20001bf8 	.word	0x20001bf8
 80175b8:	0801c32c 	.word	0x0801c32c

080175bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80175c2:	4b0f      	ldr	r3, [pc, #60]	; (8017600 <Get_SerialNum+0x44>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80175c8:	4b0e      	ldr	r3, [pc, #56]	; (8017604 <Get_SerialNum+0x48>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80175ce:	4b0e      	ldr	r3, [pc, #56]	; (8017608 <Get_SerialNum+0x4c>)
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80175d4:	68fa      	ldr	r2, [r7, #12]
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	4413      	add	r3, r2
 80175da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d009      	beq.n	80175f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80175e2:	2208      	movs	r2, #8
 80175e4:	4909      	ldr	r1, [pc, #36]	; (801760c <Get_SerialNum+0x50>)
 80175e6:	68f8      	ldr	r0, [r7, #12]
 80175e8:	f000 f814 	bl	8017614 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80175ec:	2204      	movs	r2, #4
 80175ee:	4908      	ldr	r1, [pc, #32]	; (8017610 <Get_SerialNum+0x54>)
 80175f0:	68b8      	ldr	r0, [r7, #8]
 80175f2:	f000 f80f 	bl	8017614 <IntToUnicode>
  }
}
 80175f6:	bf00      	nop
 80175f8:	3710      	adds	r7, #16
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}
 80175fe:	bf00      	nop
 8017600:	1fff7a10 	.word	0x1fff7a10
 8017604:	1fff7a14 	.word	0x1fff7a14
 8017608:	1fff7a18 	.word	0x1fff7a18
 801760c:	2000023e 	.word	0x2000023e
 8017610:	2000024e 	.word	0x2000024e

08017614 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017614:	b480      	push	{r7}
 8017616:	b087      	sub	sp, #28
 8017618:	af00      	add	r7, sp, #0
 801761a:	60f8      	str	r0, [r7, #12]
 801761c:	60b9      	str	r1, [r7, #8]
 801761e:	4613      	mov	r3, r2
 8017620:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017622:	2300      	movs	r3, #0
 8017624:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017626:	2300      	movs	r3, #0
 8017628:	75fb      	strb	r3, [r7, #23]
 801762a:	e027      	b.n	801767c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	0f1b      	lsrs	r3, r3, #28
 8017630:	2b09      	cmp	r3, #9
 8017632:	d80b      	bhi.n	801764c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	0f1b      	lsrs	r3, r3, #28
 8017638:	b2da      	uxtb	r2, r3
 801763a:	7dfb      	ldrb	r3, [r7, #23]
 801763c:	005b      	lsls	r3, r3, #1
 801763e:	4619      	mov	r1, r3
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	440b      	add	r3, r1
 8017644:	3230      	adds	r2, #48	; 0x30
 8017646:	b2d2      	uxtb	r2, r2
 8017648:	701a      	strb	r2, [r3, #0]
 801764a:	e00a      	b.n	8017662 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	0f1b      	lsrs	r3, r3, #28
 8017650:	b2da      	uxtb	r2, r3
 8017652:	7dfb      	ldrb	r3, [r7, #23]
 8017654:	005b      	lsls	r3, r3, #1
 8017656:	4619      	mov	r1, r3
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	440b      	add	r3, r1
 801765c:	3237      	adds	r2, #55	; 0x37
 801765e:	b2d2      	uxtb	r2, r2
 8017660:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	011b      	lsls	r3, r3, #4
 8017666:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017668:	7dfb      	ldrb	r3, [r7, #23]
 801766a:	005b      	lsls	r3, r3, #1
 801766c:	3301      	adds	r3, #1
 801766e:	68ba      	ldr	r2, [r7, #8]
 8017670:	4413      	add	r3, r2
 8017672:	2200      	movs	r2, #0
 8017674:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017676:	7dfb      	ldrb	r3, [r7, #23]
 8017678:	3301      	adds	r3, #1
 801767a:	75fb      	strb	r3, [r7, #23]
 801767c:	7dfa      	ldrb	r2, [r7, #23]
 801767e:	79fb      	ldrb	r3, [r7, #7]
 8017680:	429a      	cmp	r2, r3
 8017682:	d3d3      	bcc.n	801762c <IntToUnicode+0x18>
  }
}
 8017684:	bf00      	nop
 8017686:	bf00      	nop
 8017688:	371c      	adds	r7, #28
 801768a:	46bd      	mov	sp, r7
 801768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017690:	4770      	bx	lr
	...

08017694 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b08a      	sub	sp, #40	; 0x28
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801769c:	f107 0314 	add.w	r3, r7, #20
 80176a0:	2200      	movs	r2, #0
 80176a2:	601a      	str	r2, [r3, #0]
 80176a4:	605a      	str	r2, [r3, #4]
 80176a6:	609a      	str	r2, [r3, #8]
 80176a8:	60da      	str	r2, [r3, #12]
 80176aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80176b4:	d13a      	bne.n	801772c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176b6:	2300      	movs	r3, #0
 80176b8:	613b      	str	r3, [r7, #16]
 80176ba:	4b1e      	ldr	r3, [pc, #120]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 80176bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176be:	4a1d      	ldr	r2, [pc, #116]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 80176c0:	f043 0301 	orr.w	r3, r3, #1
 80176c4:	6313      	str	r3, [r2, #48]	; 0x30
 80176c6:	4b1b      	ldr	r3, [pc, #108]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 80176c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ca:	f003 0301 	and.w	r3, r3, #1
 80176ce:	613b      	str	r3, [r7, #16]
 80176d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80176d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80176d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176d8:	2302      	movs	r3, #2
 80176da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176dc:	2300      	movs	r3, #0
 80176de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80176e0:	2303      	movs	r3, #3
 80176e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80176e4:	230a      	movs	r3, #10
 80176e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80176e8:	f107 0314 	add.w	r3, r7, #20
 80176ec:	4619      	mov	r1, r3
 80176ee:	4812      	ldr	r0, [pc, #72]	; (8017738 <HAL_PCD_MspInit+0xa4>)
 80176f0:	f7ed f93a 	bl	8004968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80176f4:	4b0f      	ldr	r3, [pc, #60]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 80176f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176f8:	4a0e      	ldr	r2, [pc, #56]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 80176fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176fe:	6353      	str	r3, [r2, #52]	; 0x34
 8017700:	2300      	movs	r3, #0
 8017702:	60fb      	str	r3, [r7, #12]
 8017704:	4b0b      	ldr	r3, [pc, #44]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 8017706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017708:	4a0a      	ldr	r2, [pc, #40]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 801770a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801770e:	6453      	str	r3, [r2, #68]	; 0x44
 8017710:	4b08      	ldr	r3, [pc, #32]	; (8017734 <HAL_PCD_MspInit+0xa0>)
 8017712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017718:	60fb      	str	r3, [r7, #12]
 801771a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801771c:	2200      	movs	r2, #0
 801771e:	2100      	movs	r1, #0
 8017720:	2043      	movs	r0, #67	; 0x43
 8017722:	f7ed f8ce 	bl	80048c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017726:	2043      	movs	r0, #67	; 0x43
 8017728:	f7ed f8e7 	bl	80048fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801772c:	bf00      	nop
 801772e:	3728      	adds	r7, #40	; 0x28
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	40023800 	.word	0x40023800
 8017738:	40020000 	.word	0x40020000

0801773c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017750:	4619      	mov	r1, r3
 8017752:	4610      	mov	r0, r2
 8017754:	f7f2 f943 	bl	80099de <USBD_LL_SetupStage>
}
 8017758:	bf00      	nop
 801775a:	3708      	adds	r7, #8
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}

08017760 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	460b      	mov	r3, r1
 801776a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017772:	78fa      	ldrb	r2, [r7, #3]
 8017774:	6879      	ldr	r1, [r7, #4]
 8017776:	4613      	mov	r3, r2
 8017778:	00db      	lsls	r3, r3, #3
 801777a:	4413      	add	r3, r2
 801777c:	009b      	lsls	r3, r3, #2
 801777e:	440b      	add	r3, r1
 8017780:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017784:	681a      	ldr	r2, [r3, #0]
 8017786:	78fb      	ldrb	r3, [r7, #3]
 8017788:	4619      	mov	r1, r3
 801778a:	f7f2 f97d 	bl	8009a88 <USBD_LL_DataOutStage>
}
 801778e:	bf00      	nop
 8017790:	3708      	adds	r7, #8
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}

08017796 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017796:	b580      	push	{r7, lr}
 8017798:	b082      	sub	sp, #8
 801779a:	af00      	add	r7, sp, #0
 801779c:	6078      	str	r0, [r7, #4]
 801779e:	460b      	mov	r3, r1
 80177a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80177a8:	78fa      	ldrb	r2, [r7, #3]
 80177aa:	6879      	ldr	r1, [r7, #4]
 80177ac:	4613      	mov	r3, r2
 80177ae:	00db      	lsls	r3, r3, #3
 80177b0:	4413      	add	r3, r2
 80177b2:	009b      	lsls	r3, r3, #2
 80177b4:	440b      	add	r3, r1
 80177b6:	334c      	adds	r3, #76	; 0x4c
 80177b8:	681a      	ldr	r2, [r3, #0]
 80177ba:	78fb      	ldrb	r3, [r7, #3]
 80177bc:	4619      	mov	r1, r3
 80177be:	f7f2 fa16 	bl	8009bee <USBD_LL_DataInStage>
}
 80177c2:	bf00      	nop
 80177c4:	3708      	adds	r7, #8
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}

080177ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b082      	sub	sp, #8
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80177d8:	4618      	mov	r0, r3
 80177da:	f7f2 fb4a 	bl	8009e72 <USBD_LL_SOF>
}
 80177de:	bf00      	nop
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b084      	sub	sp, #16
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80177ee:	2301      	movs	r3, #1
 80177f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d102      	bne.n	8017800 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80177fa:	2300      	movs	r3, #0
 80177fc:	73fb      	strb	r3, [r7, #15]
 80177fe:	e008      	b.n	8017812 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	68db      	ldr	r3, [r3, #12]
 8017804:	2b02      	cmp	r3, #2
 8017806:	d102      	bne.n	801780e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017808:	2301      	movs	r3, #1
 801780a:	73fb      	strb	r3, [r7, #15]
 801780c:	e001      	b.n	8017812 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801780e:	f7eb febd 	bl	800358c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017818:	7bfa      	ldrb	r2, [r7, #15]
 801781a:	4611      	mov	r1, r2
 801781c:	4618      	mov	r0, r3
 801781e:	f7f2 faea 	bl	8009df6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017828:	4618      	mov	r0, r3
 801782a:	f7f2 fa92 	bl	8009d52 <USBD_LL_Reset>
}
 801782e:	bf00      	nop
 8017830:	3710      	adds	r7, #16
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}
	...

08017838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b082      	sub	sp, #8
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017846:	4618      	mov	r0, r3
 8017848:	f7f2 fae5 	bl	8009e16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	687a      	ldr	r2, [r7, #4]
 8017858:	6812      	ldr	r2, [r2, #0]
 801785a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801785e:	f043 0301 	orr.w	r3, r3, #1
 8017862:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	6a1b      	ldr	r3, [r3, #32]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d005      	beq.n	8017878 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801786c:	4b04      	ldr	r3, [pc, #16]	; (8017880 <HAL_PCD_SuspendCallback+0x48>)
 801786e:	691b      	ldr	r3, [r3, #16]
 8017870:	4a03      	ldr	r2, [pc, #12]	; (8017880 <HAL_PCD_SuspendCallback+0x48>)
 8017872:	f043 0306 	orr.w	r3, r3, #6
 8017876:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}
 8017880:	e000ed00 	.word	0xe000ed00

08017884 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b082      	sub	sp, #8
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017892:	4618      	mov	r0, r3
 8017894:	f7f2 fad5 	bl	8009e42 <USBD_LL_Resume>
}
 8017898:	bf00      	nop
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b082      	sub	sp, #8
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	460b      	mov	r3, r1
 80178aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80178b2:	78fa      	ldrb	r2, [r7, #3]
 80178b4:	4611      	mov	r1, r2
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7f2 fb2d 	bl	8009f16 <USBD_LL_IsoOUTIncomplete>
}
 80178bc:	bf00      	nop
 80178be:	3708      	adds	r7, #8
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b082      	sub	sp, #8
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	460b      	mov	r3, r1
 80178ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80178d6:	78fa      	ldrb	r2, [r7, #3]
 80178d8:	4611      	mov	r1, r2
 80178da:	4618      	mov	r0, r3
 80178dc:	f7f2 fae9 	bl	8009eb2 <USBD_LL_IsoINIncomplete>
}
 80178e0:	bf00      	nop
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80178f6:	4618      	mov	r0, r3
 80178f8:	f7f2 fb3f 	bl	8009f7a <USBD_LL_DevConnected>
}
 80178fc:	bf00      	nop
 80178fe:	3708      	adds	r7, #8
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b082      	sub	sp, #8
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017912:	4618      	mov	r0, r3
 8017914:	f7f2 fb3c 	bl	8009f90 <USBD_LL_DevDisconnected>
}
 8017918:	bf00      	nop
 801791a:	3708      	adds	r7, #8
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}

08017920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	781b      	ldrb	r3, [r3, #0]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d13c      	bne.n	80179aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017930:	4a20      	ldr	r2, [pc, #128]	; (80179b4 <USBD_LL_Init+0x94>)
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	4a1e      	ldr	r2, [pc, #120]	; (80179b4 <USBD_LL_Init+0x94>)
 801793c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017940:	4b1c      	ldr	r3, [pc, #112]	; (80179b4 <USBD_LL_Init+0x94>)
 8017942:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017946:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017948:	4b1a      	ldr	r3, [pc, #104]	; (80179b4 <USBD_LL_Init+0x94>)
 801794a:	2204      	movs	r2, #4
 801794c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801794e:	4b19      	ldr	r3, [pc, #100]	; (80179b4 <USBD_LL_Init+0x94>)
 8017950:	2202      	movs	r2, #2
 8017952:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017954:	4b17      	ldr	r3, [pc, #92]	; (80179b4 <USBD_LL_Init+0x94>)
 8017956:	2200      	movs	r2, #0
 8017958:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801795a:	4b16      	ldr	r3, [pc, #88]	; (80179b4 <USBD_LL_Init+0x94>)
 801795c:	2202      	movs	r2, #2
 801795e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017960:	4b14      	ldr	r3, [pc, #80]	; (80179b4 <USBD_LL_Init+0x94>)
 8017962:	2200      	movs	r2, #0
 8017964:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017966:	4b13      	ldr	r3, [pc, #76]	; (80179b4 <USBD_LL_Init+0x94>)
 8017968:	2200      	movs	r2, #0
 801796a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801796c:	4b11      	ldr	r3, [pc, #68]	; (80179b4 <USBD_LL_Init+0x94>)
 801796e:	2200      	movs	r2, #0
 8017970:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017972:	4b10      	ldr	r3, [pc, #64]	; (80179b4 <USBD_LL_Init+0x94>)
 8017974:	2200      	movs	r2, #0
 8017976:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017978:	4b0e      	ldr	r3, [pc, #56]	; (80179b4 <USBD_LL_Init+0x94>)
 801797a:	2200      	movs	r2, #0
 801797c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801797e:	480d      	ldr	r0, [pc, #52]	; (80179b4 <USBD_LL_Init+0x94>)
 8017980:	f7ed f9c0 	bl	8004d04 <HAL_PCD_Init>
 8017984:	4603      	mov	r3, r0
 8017986:	2b00      	cmp	r3, #0
 8017988:	d001      	beq.n	801798e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801798a:	f7eb fdff 	bl	800358c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801798e:	2180      	movs	r1, #128	; 0x80
 8017990:	4808      	ldr	r0, [pc, #32]	; (80179b4 <USBD_LL_Init+0x94>)
 8017992:	f7ee fc18 	bl	80061c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017996:	2240      	movs	r2, #64	; 0x40
 8017998:	2100      	movs	r1, #0
 801799a:	4806      	ldr	r0, [pc, #24]	; (80179b4 <USBD_LL_Init+0x94>)
 801799c:	f7ee fbcc 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80179a0:	2280      	movs	r2, #128	; 0x80
 80179a2:	2101      	movs	r1, #1
 80179a4:	4803      	ldr	r0, [pc, #12]	; (80179b4 <USBD_LL_Init+0x94>)
 80179a6:	f7ee fbc7 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80179aa:	2300      	movs	r3, #0
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	3708      	adds	r7, #8
 80179b0:	46bd      	mov	sp, r7
 80179b2:	bd80      	pop	{r7, pc}
 80179b4:	20001df8 	.word	0x20001df8

080179b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b084      	sub	sp, #16
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179c0:	2300      	movs	r3, #0
 80179c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179c4:	2300      	movs	r3, #0
 80179c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7ed fab5 	bl	8004f3e <HAL_PCD_Start>
 80179d4:	4603      	mov	r3, r0
 80179d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179d8:	7bfb      	ldrb	r3, [r7, #15]
 80179da:	4618      	mov	r0, r3
 80179dc:	f000 f942 	bl	8017c64 <USBD_Get_USB_Status>
 80179e0:	4603      	mov	r3, r0
 80179e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80179e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3710      	adds	r7, #16
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}

080179ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80179ee:	b580      	push	{r7, lr}
 80179f0:	b084      	sub	sp, #16
 80179f2:	af00      	add	r7, sp, #0
 80179f4:	6078      	str	r0, [r7, #4]
 80179f6:	4608      	mov	r0, r1
 80179f8:	4611      	mov	r1, r2
 80179fa:	461a      	mov	r2, r3
 80179fc:	4603      	mov	r3, r0
 80179fe:	70fb      	strb	r3, [r7, #3]
 8017a00:	460b      	mov	r3, r1
 8017a02:	70bb      	strb	r3, [r7, #2]
 8017a04:	4613      	mov	r3, r2
 8017a06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a08:	2300      	movs	r3, #0
 8017a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017a16:	78bb      	ldrb	r3, [r7, #2]
 8017a18:	883a      	ldrh	r2, [r7, #0]
 8017a1a:	78f9      	ldrb	r1, [r7, #3]
 8017a1c:	f7ed ff86 	bl	800592c <HAL_PCD_EP_Open>
 8017a20:	4603      	mov	r3, r0
 8017a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a24:	7bfb      	ldrb	r3, [r7, #15]
 8017a26:	4618      	mov	r0, r3
 8017a28:	f000 f91c 	bl	8017c64 <USBD_Get_USB_Status>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3710      	adds	r7, #16
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}

08017a3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a3a:	b580      	push	{r7, lr}
 8017a3c:	b084      	sub	sp, #16
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	6078      	str	r0, [r7, #4]
 8017a42:	460b      	mov	r3, r1
 8017a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a46:	2300      	movs	r3, #0
 8017a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017a54:	78fa      	ldrb	r2, [r7, #3]
 8017a56:	4611      	mov	r1, r2
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7ed ffcf 	bl	80059fc <HAL_PCD_EP_Close>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a62:	7bfb      	ldrb	r3, [r7, #15]
 8017a64:	4618      	mov	r0, r3
 8017a66:	f000 f8fd 	bl	8017c64 <USBD_Get_USB_Status>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b084      	sub	sp, #16
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	460b      	mov	r3, r1
 8017a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a84:	2300      	movs	r3, #0
 8017a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017a92:	78fa      	ldrb	r2, [r7, #3]
 8017a94:	4611      	mov	r1, r2
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7ee f8a7 	bl	8005bea <HAL_PCD_EP_SetStall>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017aa0:	7bfb      	ldrb	r3, [r7, #15]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f000 f8de 	bl	8017c64 <USBD_Get_USB_Status>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	3710      	adds	r7, #16
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}

08017ab6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ab6:	b580      	push	{r7, lr}
 8017ab8:	b084      	sub	sp, #16
 8017aba:	af00      	add	r7, sp, #0
 8017abc:	6078      	str	r0, [r7, #4]
 8017abe:	460b      	mov	r3, r1
 8017ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ad0:	78fa      	ldrb	r2, [r7, #3]
 8017ad2:	4611      	mov	r1, r2
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f7ee f8ec 	bl	8005cb2 <HAL_PCD_EP_ClrStall>
 8017ada:	4603      	mov	r3, r0
 8017adc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ade:	7bfb      	ldrb	r3, [r7, #15]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f000 f8bf 	bl	8017c64 <USBD_Get_USB_Status>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	3710      	adds	r7, #16
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017af4:	b480      	push	{r7}
 8017af6:	b085      	sub	sp, #20
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	460b      	mov	r3, r1
 8017afe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	da0b      	bge.n	8017b28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017b10:	78fb      	ldrb	r3, [r7, #3]
 8017b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b16:	68f9      	ldr	r1, [r7, #12]
 8017b18:	4613      	mov	r3, r2
 8017b1a:	00db      	lsls	r3, r3, #3
 8017b1c:	4413      	add	r3, r2
 8017b1e:	009b      	lsls	r3, r3, #2
 8017b20:	440b      	add	r3, r1
 8017b22:	333e      	adds	r3, #62	; 0x3e
 8017b24:	781b      	ldrb	r3, [r3, #0]
 8017b26:	e00b      	b.n	8017b40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017b28:	78fb      	ldrb	r3, [r7, #3]
 8017b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b2e:	68f9      	ldr	r1, [r7, #12]
 8017b30:	4613      	mov	r3, r2
 8017b32:	00db      	lsls	r3, r3, #3
 8017b34:	4413      	add	r3, r2
 8017b36:	009b      	lsls	r3, r3, #2
 8017b38:	440b      	add	r3, r1
 8017b3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017b3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3714      	adds	r7, #20
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr

08017b4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b084      	sub	sp, #16
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	460b      	mov	r3, r1
 8017b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b66:	78fa      	ldrb	r2, [r7, #3]
 8017b68:	4611      	mov	r1, r2
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7ed feb9 	bl	80058e2 <HAL_PCD_SetAddress>
 8017b70:	4603      	mov	r3, r0
 8017b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b74:	7bfb      	ldrb	r3, [r7, #15]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f000 f874 	bl	8017c64 <USBD_Get_USB_Status>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3710      	adds	r7, #16
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}

08017b8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	b086      	sub	sp, #24
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	60f8      	str	r0, [r7, #12]
 8017b92:	607a      	str	r2, [r7, #4]
 8017b94:	603b      	str	r3, [r7, #0]
 8017b96:	460b      	mov	r3, r1
 8017b98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017ba8:	7af9      	ldrb	r1, [r7, #11]
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	f7ed ffd2 	bl	8005b56 <HAL_PCD_EP_Transmit>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bb6:	7dfb      	ldrb	r3, [r7, #23]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f000 f853 	bl	8017c64 <USBD_Get_USB_Status>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017bc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3718      	adds	r7, #24
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b086      	sub	sp, #24
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	60f8      	str	r0, [r7, #12]
 8017bd4:	607a      	str	r2, [r7, #4]
 8017bd6:	603b      	str	r3, [r7, #0]
 8017bd8:	460b      	mov	r3, r1
 8017bda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017be0:	2300      	movs	r3, #0
 8017be2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017bea:	7af9      	ldrb	r1, [r7, #11]
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	f7ed ff4e 	bl	8005a90 <HAL_PCD_EP_Receive>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bf8:	7dfb      	ldrb	r3, [r7, #23]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f000 f832 	bl	8017c64 <USBD_Get_USB_Status>
 8017c00:	4603      	mov	r3, r0
 8017c02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017c04:	7dbb      	ldrb	r3, [r7, #22]
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3718      	adds	r7, #24
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}

08017c0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c0e:	b580      	push	{r7, lr}
 8017c10:	b082      	sub	sp, #8
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	6078      	str	r0, [r7, #4]
 8017c16:	460b      	mov	r3, r1
 8017c18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c20:	78fa      	ldrb	r2, [r7, #3]
 8017c22:	4611      	mov	r1, r2
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7ed ff7e 	bl	8005b26 <HAL_PCD_EP_GetRxCount>
 8017c2a:	4603      	mov	r3, r0
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3708      	adds	r7, #8
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}

08017c34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017c34:	b480      	push	{r7}
 8017c36:	b083      	sub	sp, #12
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017c3c:	4b03      	ldr	r3, [pc, #12]	; (8017c4c <USBD_static_malloc+0x18>)
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	370c      	adds	r7, #12
 8017c42:	46bd      	mov	sp, r7
 8017c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c48:	4770      	bx	lr
 8017c4a:	bf00      	nop
 8017c4c:	20002304 	.word	0x20002304

08017c50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017c50:	b480      	push	{r7}
 8017c52:	b083      	sub	sp, #12
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]

}
 8017c58:	bf00      	nop
 8017c5a:	370c      	adds	r7, #12
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c62:	4770      	bx	lr

08017c64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017c64:	b480      	push	{r7}
 8017c66:	b085      	sub	sp, #20
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017c72:	79fb      	ldrb	r3, [r7, #7]
 8017c74:	2b03      	cmp	r3, #3
 8017c76:	d817      	bhi.n	8017ca8 <USBD_Get_USB_Status+0x44>
 8017c78:	a201      	add	r2, pc, #4	; (adr r2, 8017c80 <USBD_Get_USB_Status+0x1c>)
 8017c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c7e:	bf00      	nop
 8017c80:	08017c91 	.word	0x08017c91
 8017c84:	08017c97 	.word	0x08017c97
 8017c88:	08017c9d 	.word	0x08017c9d
 8017c8c:	08017ca3 	.word	0x08017ca3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017c90:	2300      	movs	r3, #0
 8017c92:	73fb      	strb	r3, [r7, #15]
    break;
 8017c94:	e00b      	b.n	8017cae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017c96:	2303      	movs	r3, #3
 8017c98:	73fb      	strb	r3, [r7, #15]
    break;
 8017c9a:	e008      	b.n	8017cae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8017ca0:	e005      	b.n	8017cae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017ca2:	2303      	movs	r3, #3
 8017ca4:	73fb      	strb	r3, [r7, #15]
    break;
 8017ca6:	e002      	b.n	8017cae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017ca8:	2303      	movs	r3, #3
 8017caa:	73fb      	strb	r3, [r7, #15]
    break;
 8017cac:	bf00      	nop
  }
  return usb_status;
 8017cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3714      	adds	r7, #20
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cba:	4770      	bx	lr

08017cbc <_ZdaPv>:
 8017cbc:	f000 b813 	b.w	8017ce6 <_ZdlPv>

08017cc0 <_Znwj>:
 8017cc0:	2801      	cmp	r0, #1
 8017cc2:	bf38      	it	cc
 8017cc4:	2001      	movcc	r0, #1
 8017cc6:	b510      	push	{r4, lr}
 8017cc8:	4604      	mov	r4, r0
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f001 fb74 	bl	80193b8 <malloc>
 8017cd0:	b930      	cbnz	r0, 8017ce0 <_Znwj+0x20>
 8017cd2:	f000 f80b 	bl	8017cec <_ZSt15get_new_handlerv>
 8017cd6:	b908      	cbnz	r0, 8017cdc <_Znwj+0x1c>
 8017cd8:	f001 fb00 	bl	80192dc <abort>
 8017cdc:	4780      	blx	r0
 8017cde:	e7f4      	b.n	8017cca <_Znwj+0xa>
 8017ce0:	bd10      	pop	{r4, pc}

08017ce2 <_Znaj>:
 8017ce2:	f7ff bfed 	b.w	8017cc0 <_Znwj>

08017ce6 <_ZdlPv>:
 8017ce6:	f001 bb6f 	b.w	80193c8 <free>
	...

08017cec <_ZSt15get_new_handlerv>:
 8017cec:	4b02      	ldr	r3, [pc, #8]	; (8017cf8 <_ZSt15get_new_handlerv+0xc>)
 8017cee:	6818      	ldr	r0, [r3, #0]
 8017cf0:	f3bf 8f5b 	dmb	ish
 8017cf4:	4770      	bx	lr
 8017cf6:	bf00      	nop
 8017cf8:	20002524 	.word	0x20002524
 8017cfc:	00000000 	.word	0x00000000

08017d00 <floor>:
 8017d00:	ec51 0b10 	vmov	r0, r1, d0
 8017d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017d0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017d10:	2e13      	cmp	r6, #19
 8017d12:	ee10 5a10 	vmov	r5, s0
 8017d16:	ee10 8a10 	vmov	r8, s0
 8017d1a:	460c      	mov	r4, r1
 8017d1c:	dc32      	bgt.n	8017d84 <floor+0x84>
 8017d1e:	2e00      	cmp	r6, #0
 8017d20:	da14      	bge.n	8017d4c <floor+0x4c>
 8017d22:	a333      	add	r3, pc, #204	; (adr r3, 8017df0 <floor+0xf0>)
 8017d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d28:	f7e8 faba 	bl	80002a0 <__adddf3>
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	2300      	movs	r3, #0
 8017d30:	f7e8 fefc 	bl	8000b2c <__aeabi_dcmpgt>
 8017d34:	b138      	cbz	r0, 8017d46 <floor+0x46>
 8017d36:	2c00      	cmp	r4, #0
 8017d38:	da57      	bge.n	8017dea <floor+0xea>
 8017d3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017d3e:	431d      	orrs	r5, r3
 8017d40:	d001      	beq.n	8017d46 <floor+0x46>
 8017d42:	4c2d      	ldr	r4, [pc, #180]	; (8017df8 <floor+0xf8>)
 8017d44:	2500      	movs	r5, #0
 8017d46:	4621      	mov	r1, r4
 8017d48:	4628      	mov	r0, r5
 8017d4a:	e025      	b.n	8017d98 <floor+0x98>
 8017d4c:	4f2b      	ldr	r7, [pc, #172]	; (8017dfc <floor+0xfc>)
 8017d4e:	4137      	asrs	r7, r6
 8017d50:	ea01 0307 	and.w	r3, r1, r7
 8017d54:	4303      	orrs	r3, r0
 8017d56:	d01f      	beq.n	8017d98 <floor+0x98>
 8017d58:	a325      	add	r3, pc, #148	; (adr r3, 8017df0 <floor+0xf0>)
 8017d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d5e:	f7e8 fa9f 	bl	80002a0 <__adddf3>
 8017d62:	2200      	movs	r2, #0
 8017d64:	2300      	movs	r3, #0
 8017d66:	f7e8 fee1 	bl	8000b2c <__aeabi_dcmpgt>
 8017d6a:	2800      	cmp	r0, #0
 8017d6c:	d0eb      	beq.n	8017d46 <floor+0x46>
 8017d6e:	2c00      	cmp	r4, #0
 8017d70:	bfbe      	ittt	lt
 8017d72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017d76:	fa43 f606 	asrlt.w	r6, r3, r6
 8017d7a:	19a4      	addlt	r4, r4, r6
 8017d7c:	ea24 0407 	bic.w	r4, r4, r7
 8017d80:	2500      	movs	r5, #0
 8017d82:	e7e0      	b.n	8017d46 <floor+0x46>
 8017d84:	2e33      	cmp	r6, #51	; 0x33
 8017d86:	dd0b      	ble.n	8017da0 <floor+0xa0>
 8017d88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017d8c:	d104      	bne.n	8017d98 <floor+0x98>
 8017d8e:	ee10 2a10 	vmov	r2, s0
 8017d92:	460b      	mov	r3, r1
 8017d94:	f7e8 fa84 	bl	80002a0 <__adddf3>
 8017d98:	ec41 0b10 	vmov	d0, r0, r1
 8017d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017da0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8017da4:	f04f 33ff 	mov.w	r3, #4294967295
 8017da8:	fa23 f707 	lsr.w	r7, r3, r7
 8017dac:	4207      	tst	r7, r0
 8017dae:	d0f3      	beq.n	8017d98 <floor+0x98>
 8017db0:	a30f      	add	r3, pc, #60	; (adr r3, 8017df0 <floor+0xf0>)
 8017db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db6:	f7e8 fa73 	bl	80002a0 <__adddf3>
 8017dba:	2200      	movs	r2, #0
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	f7e8 feb5 	bl	8000b2c <__aeabi_dcmpgt>
 8017dc2:	2800      	cmp	r0, #0
 8017dc4:	d0bf      	beq.n	8017d46 <floor+0x46>
 8017dc6:	2c00      	cmp	r4, #0
 8017dc8:	da02      	bge.n	8017dd0 <floor+0xd0>
 8017dca:	2e14      	cmp	r6, #20
 8017dcc:	d103      	bne.n	8017dd6 <floor+0xd6>
 8017dce:	3401      	adds	r4, #1
 8017dd0:	ea25 0507 	bic.w	r5, r5, r7
 8017dd4:	e7b7      	b.n	8017d46 <floor+0x46>
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017ddc:	fa03 f606 	lsl.w	r6, r3, r6
 8017de0:	4435      	add	r5, r6
 8017de2:	4545      	cmp	r5, r8
 8017de4:	bf38      	it	cc
 8017de6:	18e4      	addcc	r4, r4, r3
 8017de8:	e7f2      	b.n	8017dd0 <floor+0xd0>
 8017dea:	2500      	movs	r5, #0
 8017dec:	462c      	mov	r4, r5
 8017dee:	e7aa      	b.n	8017d46 <floor+0x46>
 8017df0:	8800759c 	.word	0x8800759c
 8017df4:	7e37e43c 	.word	0x7e37e43c
 8017df8:	bff00000 	.word	0xbff00000
 8017dfc:	000fffff 	.word	0x000fffff

08017e00 <frexp>:
 8017e00:	b570      	push	{r4, r5, r6, lr}
 8017e02:	2100      	movs	r1, #0
 8017e04:	ec55 4b10 	vmov	r4, r5, d0
 8017e08:	6001      	str	r1, [r0, #0]
 8017e0a:	4916      	ldr	r1, [pc, #88]	; (8017e64 <frexp+0x64>)
 8017e0c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8017e10:	428a      	cmp	r2, r1
 8017e12:	4606      	mov	r6, r0
 8017e14:	462b      	mov	r3, r5
 8017e16:	dc22      	bgt.n	8017e5e <frexp+0x5e>
 8017e18:	ee10 1a10 	vmov	r1, s0
 8017e1c:	4311      	orrs	r1, r2
 8017e1e:	d01e      	beq.n	8017e5e <frexp+0x5e>
 8017e20:	4911      	ldr	r1, [pc, #68]	; (8017e68 <frexp+0x68>)
 8017e22:	4029      	ands	r1, r5
 8017e24:	b969      	cbnz	r1, 8017e42 <frexp+0x42>
 8017e26:	4b11      	ldr	r3, [pc, #68]	; (8017e6c <frexp+0x6c>)
 8017e28:	2200      	movs	r2, #0
 8017e2a:	ee10 0a10 	vmov	r0, s0
 8017e2e:	4629      	mov	r1, r5
 8017e30:	f7e8 fbec 	bl	800060c <__aeabi_dmul>
 8017e34:	460b      	mov	r3, r1
 8017e36:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017e3a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8017e3e:	4604      	mov	r4, r0
 8017e40:	6031      	str	r1, [r6, #0]
 8017e42:	6831      	ldr	r1, [r6, #0]
 8017e44:	1512      	asrs	r2, r2, #20
 8017e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017e4a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8017e4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017e52:	440a      	add	r2, r1
 8017e54:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8017e58:	6032      	str	r2, [r6, #0]
 8017e5a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8017e5e:	ec45 4b10 	vmov	d0, r4, r5
 8017e62:	bd70      	pop	{r4, r5, r6, pc}
 8017e64:	7fefffff 	.word	0x7fefffff
 8017e68:	7ff00000 	.word	0x7ff00000
 8017e6c:	43500000 	.word	0x43500000

08017e70 <round>:
 8017e70:	ec51 0b10 	vmov	r0, r1, d0
 8017e74:	b570      	push	{r4, r5, r6, lr}
 8017e76:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8017e7a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8017e7e:	2c13      	cmp	r4, #19
 8017e80:	ee10 2a10 	vmov	r2, s0
 8017e84:	460b      	mov	r3, r1
 8017e86:	dc19      	bgt.n	8017ebc <round+0x4c>
 8017e88:	2c00      	cmp	r4, #0
 8017e8a:	da09      	bge.n	8017ea0 <round+0x30>
 8017e8c:	3401      	adds	r4, #1
 8017e8e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017e92:	d103      	bne.n	8017e9c <round+0x2c>
 8017e94:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017e98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	e028      	b.n	8017ef2 <round+0x82>
 8017ea0:	4d15      	ldr	r5, [pc, #84]	; (8017ef8 <round+0x88>)
 8017ea2:	4125      	asrs	r5, r4
 8017ea4:	ea01 0605 	and.w	r6, r1, r5
 8017ea8:	4332      	orrs	r2, r6
 8017eaa:	d00e      	beq.n	8017eca <round+0x5a>
 8017eac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017eb0:	fa42 f404 	asr.w	r4, r2, r4
 8017eb4:	4423      	add	r3, r4
 8017eb6:	ea23 0305 	bic.w	r3, r3, r5
 8017eba:	e7ef      	b.n	8017e9c <round+0x2c>
 8017ebc:	2c33      	cmp	r4, #51	; 0x33
 8017ebe:	dd07      	ble.n	8017ed0 <round+0x60>
 8017ec0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8017ec4:	d101      	bne.n	8017eca <round+0x5a>
 8017ec6:	f7e8 f9eb 	bl	80002a0 <__adddf3>
 8017eca:	ec41 0b10 	vmov	d0, r0, r1
 8017ece:	bd70      	pop	{r4, r5, r6, pc}
 8017ed0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8017ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8017ed8:	40f5      	lsrs	r5, r6
 8017eda:	4228      	tst	r0, r5
 8017edc:	d0f5      	beq.n	8017eca <round+0x5a>
 8017ede:	2101      	movs	r1, #1
 8017ee0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8017ee4:	fa01 f404 	lsl.w	r4, r1, r4
 8017ee8:	1912      	adds	r2, r2, r4
 8017eea:	bf28      	it	cs
 8017eec:	185b      	addcs	r3, r3, r1
 8017eee:	ea22 0205 	bic.w	r2, r2, r5
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	e7e8      	b.n	8017eca <round+0x5a>
 8017ef8:	000fffff 	.word	0x000fffff

08017efc <roundf>:
 8017efc:	ee10 0a10 	vmov	r0, s0
 8017f00:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8017f04:	3a7f      	subs	r2, #127	; 0x7f
 8017f06:	2a16      	cmp	r2, #22
 8017f08:	dc15      	bgt.n	8017f36 <roundf+0x3a>
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	da08      	bge.n	8017f20 <roundf+0x24>
 8017f0e:	3201      	adds	r2, #1
 8017f10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8017f14:	d101      	bne.n	8017f1a <roundf+0x1e>
 8017f16:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8017f1a:	ee00 3a10 	vmov	s0, r3
 8017f1e:	4770      	bx	lr
 8017f20:	4907      	ldr	r1, [pc, #28]	; (8017f40 <roundf+0x44>)
 8017f22:	4111      	asrs	r1, r2
 8017f24:	4208      	tst	r0, r1
 8017f26:	d0fa      	beq.n	8017f1e <roundf+0x22>
 8017f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017f2c:	4113      	asrs	r3, r2
 8017f2e:	4403      	add	r3, r0
 8017f30:	ea23 0301 	bic.w	r3, r3, r1
 8017f34:	e7f1      	b.n	8017f1a <roundf+0x1e>
 8017f36:	2a80      	cmp	r2, #128	; 0x80
 8017f38:	d1f1      	bne.n	8017f1e <roundf+0x22>
 8017f3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017f3e:	4770      	bx	lr
 8017f40:	007fffff 	.word	0x007fffff

08017f44 <pow>:
 8017f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f46:	ed2d 8b02 	vpush	{d8}
 8017f4a:	eeb0 8a40 	vmov.f32	s16, s0
 8017f4e:	eef0 8a60 	vmov.f32	s17, s1
 8017f52:	ec55 4b11 	vmov	r4, r5, d1
 8017f56:	f000 f8cb 	bl	80180f0 <__ieee754_pow>
 8017f5a:	4622      	mov	r2, r4
 8017f5c:	462b      	mov	r3, r5
 8017f5e:	4620      	mov	r0, r4
 8017f60:	4629      	mov	r1, r5
 8017f62:	ec57 6b10 	vmov	r6, r7, d0
 8017f66:	f7e8 fdeb 	bl	8000b40 <__aeabi_dcmpun>
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	d13b      	bne.n	8017fe6 <pow+0xa2>
 8017f6e:	ec51 0b18 	vmov	r0, r1, d8
 8017f72:	2200      	movs	r2, #0
 8017f74:	2300      	movs	r3, #0
 8017f76:	f7e8 fdb1 	bl	8000adc <__aeabi_dcmpeq>
 8017f7a:	b1b8      	cbz	r0, 8017fac <pow+0x68>
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	2300      	movs	r3, #0
 8017f80:	4620      	mov	r0, r4
 8017f82:	4629      	mov	r1, r5
 8017f84:	f7e8 fdaa 	bl	8000adc <__aeabi_dcmpeq>
 8017f88:	2800      	cmp	r0, #0
 8017f8a:	d146      	bne.n	801801a <pow+0xd6>
 8017f8c:	ec45 4b10 	vmov	d0, r4, r5
 8017f90:	f001 f8ff 	bl	8019192 <finite>
 8017f94:	b338      	cbz	r0, 8017fe6 <pow+0xa2>
 8017f96:	2200      	movs	r2, #0
 8017f98:	2300      	movs	r3, #0
 8017f9a:	4620      	mov	r0, r4
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	f7e8 fda7 	bl	8000af0 <__aeabi_dcmplt>
 8017fa2:	b300      	cbz	r0, 8017fe6 <pow+0xa2>
 8017fa4:	f001 f9c8 	bl	8019338 <__errno>
 8017fa8:	2322      	movs	r3, #34	; 0x22
 8017faa:	e01b      	b.n	8017fe4 <pow+0xa0>
 8017fac:	ec47 6b10 	vmov	d0, r6, r7
 8017fb0:	f001 f8ef 	bl	8019192 <finite>
 8017fb4:	b9e0      	cbnz	r0, 8017ff0 <pow+0xac>
 8017fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8017fba:	eef0 0a68 	vmov.f32	s1, s17
 8017fbe:	f001 f8e8 	bl	8019192 <finite>
 8017fc2:	b1a8      	cbz	r0, 8017ff0 <pow+0xac>
 8017fc4:	ec45 4b10 	vmov	d0, r4, r5
 8017fc8:	f001 f8e3 	bl	8019192 <finite>
 8017fcc:	b180      	cbz	r0, 8017ff0 <pow+0xac>
 8017fce:	4632      	mov	r2, r6
 8017fd0:	463b      	mov	r3, r7
 8017fd2:	4630      	mov	r0, r6
 8017fd4:	4639      	mov	r1, r7
 8017fd6:	f7e8 fdb3 	bl	8000b40 <__aeabi_dcmpun>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d0e2      	beq.n	8017fa4 <pow+0x60>
 8017fde:	f001 f9ab 	bl	8019338 <__errno>
 8017fe2:	2321      	movs	r3, #33	; 0x21
 8017fe4:	6003      	str	r3, [r0, #0]
 8017fe6:	ecbd 8b02 	vpop	{d8}
 8017fea:	ec47 6b10 	vmov	d0, r6, r7
 8017fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	4639      	mov	r1, r7
 8017ff8:	f7e8 fd70 	bl	8000adc <__aeabi_dcmpeq>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	d0f2      	beq.n	8017fe6 <pow+0xa2>
 8018000:	eeb0 0a48 	vmov.f32	s0, s16
 8018004:	eef0 0a68 	vmov.f32	s1, s17
 8018008:	f001 f8c3 	bl	8019192 <finite>
 801800c:	2800      	cmp	r0, #0
 801800e:	d0ea      	beq.n	8017fe6 <pow+0xa2>
 8018010:	ec45 4b10 	vmov	d0, r4, r5
 8018014:	f001 f8bd 	bl	8019192 <finite>
 8018018:	e7c3      	b.n	8017fa2 <pow+0x5e>
 801801a:	4f01      	ldr	r7, [pc, #4]	; (8018020 <pow+0xdc>)
 801801c:	2600      	movs	r6, #0
 801801e:	e7e2      	b.n	8017fe6 <pow+0xa2>
 8018020:	3ff00000 	.word	0x3ff00000

08018024 <expf>:
 8018024:	b508      	push	{r3, lr}
 8018026:	ed2d 8b02 	vpush	{d8}
 801802a:	eef0 8a40 	vmov.f32	s17, s0
 801802e:	f000 fe3f 	bl	8018cb0 <__ieee754_expf>
 8018032:	eeb0 8a40 	vmov.f32	s16, s0
 8018036:	eeb0 0a68 	vmov.f32	s0, s17
 801803a:	f001 f93b 	bl	80192b4 <finitef>
 801803e:	b160      	cbz	r0, 801805a <expf+0x36>
 8018040:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8018080 <expf+0x5c>
 8018044:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801804c:	dd0a      	ble.n	8018064 <expf+0x40>
 801804e:	f001 f973 	bl	8019338 <__errno>
 8018052:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8018084 <expf+0x60>
 8018056:	2322      	movs	r3, #34	; 0x22
 8018058:	6003      	str	r3, [r0, #0]
 801805a:	eeb0 0a48 	vmov.f32	s0, s16
 801805e:	ecbd 8b02 	vpop	{d8}
 8018062:	bd08      	pop	{r3, pc}
 8018064:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018088 <expf+0x64>
 8018068:	eef4 8ae7 	vcmpe.f32	s17, s15
 801806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018070:	d5f3      	bpl.n	801805a <expf+0x36>
 8018072:	f001 f961 	bl	8019338 <__errno>
 8018076:	2322      	movs	r3, #34	; 0x22
 8018078:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801808c <expf+0x68>
 801807c:	6003      	str	r3, [r0, #0]
 801807e:	e7ec      	b.n	801805a <expf+0x36>
 8018080:	42b17180 	.word	0x42b17180
 8018084:	7f800000 	.word	0x7f800000
 8018088:	c2cff1b5 	.word	0xc2cff1b5
 801808c:	00000000 	.word	0x00000000

08018090 <log10f>:
 8018090:	b508      	push	{r3, lr}
 8018092:	ed2d 8b02 	vpush	{d8}
 8018096:	eeb0 8a40 	vmov.f32	s16, s0
 801809a:	f000 ffc7 	bl	801902c <__ieee754_log10f>
 801809e:	eeb4 8a48 	vcmp.f32	s16, s16
 80180a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a6:	d60f      	bvs.n	80180c8 <log10f+0x38>
 80180a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80180ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180b0:	d80a      	bhi.n	80180c8 <log10f+0x38>
 80180b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80180b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ba:	d108      	bne.n	80180ce <log10f+0x3e>
 80180bc:	f001 f93c 	bl	8019338 <__errno>
 80180c0:	2322      	movs	r3, #34	; 0x22
 80180c2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80180e4 <log10f+0x54>
 80180c6:	6003      	str	r3, [r0, #0]
 80180c8:	ecbd 8b02 	vpop	{d8}
 80180cc:	bd08      	pop	{r3, pc}
 80180ce:	f001 f933 	bl	8019338 <__errno>
 80180d2:	ecbd 8b02 	vpop	{d8}
 80180d6:	2321      	movs	r3, #33	; 0x21
 80180d8:	6003      	str	r3, [r0, #0]
 80180da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80180de:	4802      	ldr	r0, [pc, #8]	; (80180e8 <log10f+0x58>)
 80180e0:	f001 b8f6 	b.w	80192d0 <nanf>
 80180e4:	ff800000 	.word	0xff800000
 80180e8:	0801ca23 	.word	0x0801ca23
 80180ec:	00000000 	.word	0x00000000

080180f0 <__ieee754_pow>:
 80180f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f4:	ed2d 8b06 	vpush	{d8-d10}
 80180f8:	b089      	sub	sp, #36	; 0x24
 80180fa:	ed8d 1b00 	vstr	d1, [sp]
 80180fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018102:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018106:	ea58 0102 	orrs.w	r1, r8, r2
 801810a:	ec57 6b10 	vmov	r6, r7, d0
 801810e:	d115      	bne.n	801813c <__ieee754_pow+0x4c>
 8018110:	19b3      	adds	r3, r6, r6
 8018112:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8018116:	4152      	adcs	r2, r2
 8018118:	4299      	cmp	r1, r3
 801811a:	4b89      	ldr	r3, [pc, #548]	; (8018340 <__ieee754_pow+0x250>)
 801811c:	4193      	sbcs	r3, r2
 801811e:	f080 84d2 	bcs.w	8018ac6 <__ieee754_pow+0x9d6>
 8018122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018126:	4630      	mov	r0, r6
 8018128:	4639      	mov	r1, r7
 801812a:	f7e8 f8b9 	bl	80002a0 <__adddf3>
 801812e:	ec41 0b10 	vmov	d0, r0, r1
 8018132:	b009      	add	sp, #36	; 0x24
 8018134:	ecbd 8b06 	vpop	{d8-d10}
 8018138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801813c:	4b81      	ldr	r3, [pc, #516]	; (8018344 <__ieee754_pow+0x254>)
 801813e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018142:	429c      	cmp	r4, r3
 8018144:	ee10 aa10 	vmov	sl, s0
 8018148:	463d      	mov	r5, r7
 801814a:	dc06      	bgt.n	801815a <__ieee754_pow+0x6a>
 801814c:	d101      	bne.n	8018152 <__ieee754_pow+0x62>
 801814e:	2e00      	cmp	r6, #0
 8018150:	d1e7      	bne.n	8018122 <__ieee754_pow+0x32>
 8018152:	4598      	cmp	r8, r3
 8018154:	dc01      	bgt.n	801815a <__ieee754_pow+0x6a>
 8018156:	d10f      	bne.n	8018178 <__ieee754_pow+0x88>
 8018158:	b172      	cbz	r2, 8018178 <__ieee754_pow+0x88>
 801815a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801815e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8018162:	ea55 050a 	orrs.w	r5, r5, sl
 8018166:	d1dc      	bne.n	8018122 <__ieee754_pow+0x32>
 8018168:	e9dd 3200 	ldrd	r3, r2, [sp]
 801816c:	18db      	adds	r3, r3, r3
 801816e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8018172:	4152      	adcs	r2, r2
 8018174:	429d      	cmp	r5, r3
 8018176:	e7d0      	b.n	801811a <__ieee754_pow+0x2a>
 8018178:	2d00      	cmp	r5, #0
 801817a:	da3b      	bge.n	80181f4 <__ieee754_pow+0x104>
 801817c:	4b72      	ldr	r3, [pc, #456]	; (8018348 <__ieee754_pow+0x258>)
 801817e:	4598      	cmp	r8, r3
 8018180:	dc51      	bgt.n	8018226 <__ieee754_pow+0x136>
 8018182:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018186:	4598      	cmp	r8, r3
 8018188:	f340 84ac 	ble.w	8018ae4 <__ieee754_pow+0x9f4>
 801818c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018190:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018194:	2b14      	cmp	r3, #20
 8018196:	dd0f      	ble.n	80181b8 <__ieee754_pow+0xc8>
 8018198:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801819c:	fa22 f103 	lsr.w	r1, r2, r3
 80181a0:	fa01 f303 	lsl.w	r3, r1, r3
 80181a4:	4293      	cmp	r3, r2
 80181a6:	f040 849d 	bne.w	8018ae4 <__ieee754_pow+0x9f4>
 80181aa:	f001 0101 	and.w	r1, r1, #1
 80181ae:	f1c1 0302 	rsb	r3, r1, #2
 80181b2:	9304      	str	r3, [sp, #16]
 80181b4:	b182      	cbz	r2, 80181d8 <__ieee754_pow+0xe8>
 80181b6:	e05f      	b.n	8018278 <__ieee754_pow+0x188>
 80181b8:	2a00      	cmp	r2, #0
 80181ba:	d15b      	bne.n	8018274 <__ieee754_pow+0x184>
 80181bc:	f1c3 0314 	rsb	r3, r3, #20
 80181c0:	fa48 f103 	asr.w	r1, r8, r3
 80181c4:	fa01 f303 	lsl.w	r3, r1, r3
 80181c8:	4543      	cmp	r3, r8
 80181ca:	f040 8488 	bne.w	8018ade <__ieee754_pow+0x9ee>
 80181ce:	f001 0101 	and.w	r1, r1, #1
 80181d2:	f1c1 0302 	rsb	r3, r1, #2
 80181d6:	9304      	str	r3, [sp, #16]
 80181d8:	4b5c      	ldr	r3, [pc, #368]	; (801834c <__ieee754_pow+0x25c>)
 80181da:	4598      	cmp	r8, r3
 80181dc:	d132      	bne.n	8018244 <__ieee754_pow+0x154>
 80181de:	f1b9 0f00 	cmp.w	r9, #0
 80181e2:	f280 8478 	bge.w	8018ad6 <__ieee754_pow+0x9e6>
 80181e6:	4959      	ldr	r1, [pc, #356]	; (801834c <__ieee754_pow+0x25c>)
 80181e8:	4632      	mov	r2, r6
 80181ea:	463b      	mov	r3, r7
 80181ec:	2000      	movs	r0, #0
 80181ee:	f7e8 fb37 	bl	8000860 <__aeabi_ddiv>
 80181f2:	e79c      	b.n	801812e <__ieee754_pow+0x3e>
 80181f4:	2300      	movs	r3, #0
 80181f6:	9304      	str	r3, [sp, #16]
 80181f8:	2a00      	cmp	r2, #0
 80181fa:	d13d      	bne.n	8018278 <__ieee754_pow+0x188>
 80181fc:	4b51      	ldr	r3, [pc, #324]	; (8018344 <__ieee754_pow+0x254>)
 80181fe:	4598      	cmp	r8, r3
 8018200:	d1ea      	bne.n	80181d8 <__ieee754_pow+0xe8>
 8018202:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018206:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801820a:	ea53 030a 	orrs.w	r3, r3, sl
 801820e:	f000 845a 	beq.w	8018ac6 <__ieee754_pow+0x9d6>
 8018212:	4b4f      	ldr	r3, [pc, #316]	; (8018350 <__ieee754_pow+0x260>)
 8018214:	429c      	cmp	r4, r3
 8018216:	dd08      	ble.n	801822a <__ieee754_pow+0x13a>
 8018218:	f1b9 0f00 	cmp.w	r9, #0
 801821c:	f2c0 8457 	blt.w	8018ace <__ieee754_pow+0x9de>
 8018220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018224:	e783      	b.n	801812e <__ieee754_pow+0x3e>
 8018226:	2302      	movs	r3, #2
 8018228:	e7e5      	b.n	80181f6 <__ieee754_pow+0x106>
 801822a:	f1b9 0f00 	cmp.w	r9, #0
 801822e:	f04f 0000 	mov.w	r0, #0
 8018232:	f04f 0100 	mov.w	r1, #0
 8018236:	f6bf af7a 	bge.w	801812e <__ieee754_pow+0x3e>
 801823a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801823e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018242:	e774      	b.n	801812e <__ieee754_pow+0x3e>
 8018244:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018248:	d106      	bne.n	8018258 <__ieee754_pow+0x168>
 801824a:	4632      	mov	r2, r6
 801824c:	463b      	mov	r3, r7
 801824e:	4630      	mov	r0, r6
 8018250:	4639      	mov	r1, r7
 8018252:	f7e8 f9db 	bl	800060c <__aeabi_dmul>
 8018256:	e76a      	b.n	801812e <__ieee754_pow+0x3e>
 8018258:	4b3e      	ldr	r3, [pc, #248]	; (8018354 <__ieee754_pow+0x264>)
 801825a:	4599      	cmp	r9, r3
 801825c:	d10c      	bne.n	8018278 <__ieee754_pow+0x188>
 801825e:	2d00      	cmp	r5, #0
 8018260:	db0a      	blt.n	8018278 <__ieee754_pow+0x188>
 8018262:	ec47 6b10 	vmov	d0, r6, r7
 8018266:	b009      	add	sp, #36	; 0x24
 8018268:	ecbd 8b06 	vpop	{d8-d10}
 801826c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018270:	f000 bc6c 	b.w	8018b4c <__ieee754_sqrt>
 8018274:	2300      	movs	r3, #0
 8018276:	9304      	str	r3, [sp, #16]
 8018278:	ec47 6b10 	vmov	d0, r6, r7
 801827c:	f000 ff80 	bl	8019180 <fabs>
 8018280:	ec51 0b10 	vmov	r0, r1, d0
 8018284:	f1ba 0f00 	cmp.w	sl, #0
 8018288:	d129      	bne.n	80182de <__ieee754_pow+0x1ee>
 801828a:	b124      	cbz	r4, 8018296 <__ieee754_pow+0x1a6>
 801828c:	4b2f      	ldr	r3, [pc, #188]	; (801834c <__ieee754_pow+0x25c>)
 801828e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018292:	429a      	cmp	r2, r3
 8018294:	d123      	bne.n	80182de <__ieee754_pow+0x1ee>
 8018296:	f1b9 0f00 	cmp.w	r9, #0
 801829a:	da05      	bge.n	80182a8 <__ieee754_pow+0x1b8>
 801829c:	4602      	mov	r2, r0
 801829e:	460b      	mov	r3, r1
 80182a0:	2000      	movs	r0, #0
 80182a2:	492a      	ldr	r1, [pc, #168]	; (801834c <__ieee754_pow+0x25c>)
 80182a4:	f7e8 fadc 	bl	8000860 <__aeabi_ddiv>
 80182a8:	2d00      	cmp	r5, #0
 80182aa:	f6bf af40 	bge.w	801812e <__ieee754_pow+0x3e>
 80182ae:	9b04      	ldr	r3, [sp, #16]
 80182b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80182b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80182b8:	4323      	orrs	r3, r4
 80182ba:	d108      	bne.n	80182ce <__ieee754_pow+0x1de>
 80182bc:	4602      	mov	r2, r0
 80182be:	460b      	mov	r3, r1
 80182c0:	4610      	mov	r0, r2
 80182c2:	4619      	mov	r1, r3
 80182c4:	f7e7 ffea 	bl	800029c <__aeabi_dsub>
 80182c8:	4602      	mov	r2, r0
 80182ca:	460b      	mov	r3, r1
 80182cc:	e78f      	b.n	80181ee <__ieee754_pow+0xfe>
 80182ce:	9b04      	ldr	r3, [sp, #16]
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	f47f af2c 	bne.w	801812e <__ieee754_pow+0x3e>
 80182d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80182da:	4619      	mov	r1, r3
 80182dc:	e727      	b.n	801812e <__ieee754_pow+0x3e>
 80182de:	0feb      	lsrs	r3, r5, #31
 80182e0:	3b01      	subs	r3, #1
 80182e2:	9306      	str	r3, [sp, #24]
 80182e4:	9a06      	ldr	r2, [sp, #24]
 80182e6:	9b04      	ldr	r3, [sp, #16]
 80182e8:	4313      	orrs	r3, r2
 80182ea:	d102      	bne.n	80182f2 <__ieee754_pow+0x202>
 80182ec:	4632      	mov	r2, r6
 80182ee:	463b      	mov	r3, r7
 80182f0:	e7e6      	b.n	80182c0 <__ieee754_pow+0x1d0>
 80182f2:	4b19      	ldr	r3, [pc, #100]	; (8018358 <__ieee754_pow+0x268>)
 80182f4:	4598      	cmp	r8, r3
 80182f6:	f340 80fb 	ble.w	80184f0 <__ieee754_pow+0x400>
 80182fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80182fe:	4598      	cmp	r8, r3
 8018300:	4b13      	ldr	r3, [pc, #76]	; (8018350 <__ieee754_pow+0x260>)
 8018302:	dd0c      	ble.n	801831e <__ieee754_pow+0x22e>
 8018304:	429c      	cmp	r4, r3
 8018306:	dc0f      	bgt.n	8018328 <__ieee754_pow+0x238>
 8018308:	f1b9 0f00 	cmp.w	r9, #0
 801830c:	da0f      	bge.n	801832e <__ieee754_pow+0x23e>
 801830e:	2000      	movs	r0, #0
 8018310:	b009      	add	sp, #36	; 0x24
 8018312:	ecbd 8b06 	vpop	{d8-d10}
 8018316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801831a:	f000 bf06 	b.w	801912a <__math_oflow>
 801831e:	429c      	cmp	r4, r3
 8018320:	dbf2      	blt.n	8018308 <__ieee754_pow+0x218>
 8018322:	4b0a      	ldr	r3, [pc, #40]	; (801834c <__ieee754_pow+0x25c>)
 8018324:	429c      	cmp	r4, r3
 8018326:	dd19      	ble.n	801835c <__ieee754_pow+0x26c>
 8018328:	f1b9 0f00 	cmp.w	r9, #0
 801832c:	dcef      	bgt.n	801830e <__ieee754_pow+0x21e>
 801832e:	2000      	movs	r0, #0
 8018330:	b009      	add	sp, #36	; 0x24
 8018332:	ecbd 8b06 	vpop	{d8-d10}
 8018336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801833a:	f000 beed 	b.w	8019118 <__math_uflow>
 801833e:	bf00      	nop
 8018340:	fff00000 	.word	0xfff00000
 8018344:	7ff00000 	.word	0x7ff00000
 8018348:	433fffff 	.word	0x433fffff
 801834c:	3ff00000 	.word	0x3ff00000
 8018350:	3fefffff 	.word	0x3fefffff
 8018354:	3fe00000 	.word	0x3fe00000
 8018358:	41e00000 	.word	0x41e00000
 801835c:	4b60      	ldr	r3, [pc, #384]	; (80184e0 <__ieee754_pow+0x3f0>)
 801835e:	2200      	movs	r2, #0
 8018360:	f7e7 ff9c 	bl	800029c <__aeabi_dsub>
 8018364:	a354      	add	r3, pc, #336	; (adr r3, 80184b8 <__ieee754_pow+0x3c8>)
 8018366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801836a:	4604      	mov	r4, r0
 801836c:	460d      	mov	r5, r1
 801836e:	f7e8 f94d 	bl	800060c <__aeabi_dmul>
 8018372:	a353      	add	r3, pc, #332	; (adr r3, 80184c0 <__ieee754_pow+0x3d0>)
 8018374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018378:	4606      	mov	r6, r0
 801837a:	460f      	mov	r7, r1
 801837c:	4620      	mov	r0, r4
 801837e:	4629      	mov	r1, r5
 8018380:	f7e8 f944 	bl	800060c <__aeabi_dmul>
 8018384:	4b57      	ldr	r3, [pc, #348]	; (80184e4 <__ieee754_pow+0x3f4>)
 8018386:	4682      	mov	sl, r0
 8018388:	468b      	mov	fp, r1
 801838a:	2200      	movs	r2, #0
 801838c:	4620      	mov	r0, r4
 801838e:	4629      	mov	r1, r5
 8018390:	f7e8 f93c 	bl	800060c <__aeabi_dmul>
 8018394:	4602      	mov	r2, r0
 8018396:	460b      	mov	r3, r1
 8018398:	a14b      	add	r1, pc, #300	; (adr r1, 80184c8 <__ieee754_pow+0x3d8>)
 801839a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801839e:	f7e7 ff7d 	bl	800029c <__aeabi_dsub>
 80183a2:	4622      	mov	r2, r4
 80183a4:	462b      	mov	r3, r5
 80183a6:	f7e8 f931 	bl	800060c <__aeabi_dmul>
 80183aa:	4602      	mov	r2, r0
 80183ac:	460b      	mov	r3, r1
 80183ae:	2000      	movs	r0, #0
 80183b0:	494d      	ldr	r1, [pc, #308]	; (80184e8 <__ieee754_pow+0x3f8>)
 80183b2:	f7e7 ff73 	bl	800029c <__aeabi_dsub>
 80183b6:	4622      	mov	r2, r4
 80183b8:	4680      	mov	r8, r0
 80183ba:	4689      	mov	r9, r1
 80183bc:	462b      	mov	r3, r5
 80183be:	4620      	mov	r0, r4
 80183c0:	4629      	mov	r1, r5
 80183c2:	f7e8 f923 	bl	800060c <__aeabi_dmul>
 80183c6:	4602      	mov	r2, r0
 80183c8:	460b      	mov	r3, r1
 80183ca:	4640      	mov	r0, r8
 80183cc:	4649      	mov	r1, r9
 80183ce:	f7e8 f91d 	bl	800060c <__aeabi_dmul>
 80183d2:	a33f      	add	r3, pc, #252	; (adr r3, 80184d0 <__ieee754_pow+0x3e0>)
 80183d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d8:	f7e8 f918 	bl	800060c <__aeabi_dmul>
 80183dc:	4602      	mov	r2, r0
 80183de:	460b      	mov	r3, r1
 80183e0:	4650      	mov	r0, sl
 80183e2:	4659      	mov	r1, fp
 80183e4:	f7e7 ff5a 	bl	800029c <__aeabi_dsub>
 80183e8:	4602      	mov	r2, r0
 80183ea:	460b      	mov	r3, r1
 80183ec:	4680      	mov	r8, r0
 80183ee:	4689      	mov	r9, r1
 80183f0:	4630      	mov	r0, r6
 80183f2:	4639      	mov	r1, r7
 80183f4:	f7e7 ff54 	bl	80002a0 <__adddf3>
 80183f8:	2000      	movs	r0, #0
 80183fa:	4632      	mov	r2, r6
 80183fc:	463b      	mov	r3, r7
 80183fe:	4604      	mov	r4, r0
 8018400:	460d      	mov	r5, r1
 8018402:	f7e7 ff4b 	bl	800029c <__aeabi_dsub>
 8018406:	4602      	mov	r2, r0
 8018408:	460b      	mov	r3, r1
 801840a:	4640      	mov	r0, r8
 801840c:	4649      	mov	r1, r9
 801840e:	f7e7 ff45 	bl	800029c <__aeabi_dsub>
 8018412:	9b04      	ldr	r3, [sp, #16]
 8018414:	9a06      	ldr	r2, [sp, #24]
 8018416:	3b01      	subs	r3, #1
 8018418:	4313      	orrs	r3, r2
 801841a:	4682      	mov	sl, r0
 801841c:	468b      	mov	fp, r1
 801841e:	f040 81e7 	bne.w	80187f0 <__ieee754_pow+0x700>
 8018422:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80184d8 <__ieee754_pow+0x3e8>
 8018426:	eeb0 8a47 	vmov.f32	s16, s14
 801842a:	eef0 8a67 	vmov.f32	s17, s15
 801842e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018432:	2600      	movs	r6, #0
 8018434:	4632      	mov	r2, r6
 8018436:	463b      	mov	r3, r7
 8018438:	e9dd 0100 	ldrd	r0, r1, [sp]
 801843c:	f7e7 ff2e 	bl	800029c <__aeabi_dsub>
 8018440:	4622      	mov	r2, r4
 8018442:	462b      	mov	r3, r5
 8018444:	f7e8 f8e2 	bl	800060c <__aeabi_dmul>
 8018448:	e9dd 2300 	ldrd	r2, r3, [sp]
 801844c:	4680      	mov	r8, r0
 801844e:	4689      	mov	r9, r1
 8018450:	4650      	mov	r0, sl
 8018452:	4659      	mov	r1, fp
 8018454:	f7e8 f8da 	bl	800060c <__aeabi_dmul>
 8018458:	4602      	mov	r2, r0
 801845a:	460b      	mov	r3, r1
 801845c:	4640      	mov	r0, r8
 801845e:	4649      	mov	r1, r9
 8018460:	f7e7 ff1e 	bl	80002a0 <__adddf3>
 8018464:	4632      	mov	r2, r6
 8018466:	463b      	mov	r3, r7
 8018468:	4680      	mov	r8, r0
 801846a:	4689      	mov	r9, r1
 801846c:	4620      	mov	r0, r4
 801846e:	4629      	mov	r1, r5
 8018470:	f7e8 f8cc 	bl	800060c <__aeabi_dmul>
 8018474:	460b      	mov	r3, r1
 8018476:	4604      	mov	r4, r0
 8018478:	460d      	mov	r5, r1
 801847a:	4602      	mov	r2, r0
 801847c:	4649      	mov	r1, r9
 801847e:	4640      	mov	r0, r8
 8018480:	f7e7 ff0e 	bl	80002a0 <__adddf3>
 8018484:	4b19      	ldr	r3, [pc, #100]	; (80184ec <__ieee754_pow+0x3fc>)
 8018486:	4299      	cmp	r1, r3
 8018488:	ec45 4b19 	vmov	d9, r4, r5
 801848c:	4606      	mov	r6, r0
 801848e:	460f      	mov	r7, r1
 8018490:	468b      	mov	fp, r1
 8018492:	f340 82f1 	ble.w	8018a78 <__ieee754_pow+0x988>
 8018496:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801849a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801849e:	4303      	orrs	r3, r0
 80184a0:	f000 81e4 	beq.w	801886c <__ieee754_pow+0x77c>
 80184a4:	ec51 0b18 	vmov	r0, r1, d8
 80184a8:	2200      	movs	r2, #0
 80184aa:	2300      	movs	r3, #0
 80184ac:	f7e8 fb20 	bl	8000af0 <__aeabi_dcmplt>
 80184b0:	3800      	subs	r0, #0
 80184b2:	bf18      	it	ne
 80184b4:	2001      	movne	r0, #1
 80184b6:	e72b      	b.n	8018310 <__ieee754_pow+0x220>
 80184b8:	60000000 	.word	0x60000000
 80184bc:	3ff71547 	.word	0x3ff71547
 80184c0:	f85ddf44 	.word	0xf85ddf44
 80184c4:	3e54ae0b 	.word	0x3e54ae0b
 80184c8:	55555555 	.word	0x55555555
 80184cc:	3fd55555 	.word	0x3fd55555
 80184d0:	652b82fe 	.word	0x652b82fe
 80184d4:	3ff71547 	.word	0x3ff71547
 80184d8:	00000000 	.word	0x00000000
 80184dc:	bff00000 	.word	0xbff00000
 80184e0:	3ff00000 	.word	0x3ff00000
 80184e4:	3fd00000 	.word	0x3fd00000
 80184e8:	3fe00000 	.word	0x3fe00000
 80184ec:	408fffff 	.word	0x408fffff
 80184f0:	4bd5      	ldr	r3, [pc, #852]	; (8018848 <__ieee754_pow+0x758>)
 80184f2:	402b      	ands	r3, r5
 80184f4:	2200      	movs	r2, #0
 80184f6:	b92b      	cbnz	r3, 8018504 <__ieee754_pow+0x414>
 80184f8:	4bd4      	ldr	r3, [pc, #848]	; (801884c <__ieee754_pow+0x75c>)
 80184fa:	f7e8 f887 	bl	800060c <__aeabi_dmul>
 80184fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018502:	460c      	mov	r4, r1
 8018504:	1523      	asrs	r3, r4, #20
 8018506:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801850a:	4413      	add	r3, r2
 801850c:	9305      	str	r3, [sp, #20]
 801850e:	4bd0      	ldr	r3, [pc, #832]	; (8018850 <__ieee754_pow+0x760>)
 8018510:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018514:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018518:	429c      	cmp	r4, r3
 801851a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801851e:	dd08      	ble.n	8018532 <__ieee754_pow+0x442>
 8018520:	4bcc      	ldr	r3, [pc, #816]	; (8018854 <__ieee754_pow+0x764>)
 8018522:	429c      	cmp	r4, r3
 8018524:	f340 8162 	ble.w	80187ec <__ieee754_pow+0x6fc>
 8018528:	9b05      	ldr	r3, [sp, #20]
 801852a:	3301      	adds	r3, #1
 801852c:	9305      	str	r3, [sp, #20]
 801852e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018532:	2400      	movs	r4, #0
 8018534:	00e3      	lsls	r3, r4, #3
 8018536:	9307      	str	r3, [sp, #28]
 8018538:	4bc7      	ldr	r3, [pc, #796]	; (8018858 <__ieee754_pow+0x768>)
 801853a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801853e:	ed93 7b00 	vldr	d7, [r3]
 8018542:	4629      	mov	r1, r5
 8018544:	ec53 2b17 	vmov	r2, r3, d7
 8018548:	eeb0 9a47 	vmov.f32	s18, s14
 801854c:	eef0 9a67 	vmov.f32	s19, s15
 8018550:	4682      	mov	sl, r0
 8018552:	f7e7 fea3 	bl	800029c <__aeabi_dsub>
 8018556:	4652      	mov	r2, sl
 8018558:	4606      	mov	r6, r0
 801855a:	460f      	mov	r7, r1
 801855c:	462b      	mov	r3, r5
 801855e:	ec51 0b19 	vmov	r0, r1, d9
 8018562:	f7e7 fe9d 	bl	80002a0 <__adddf3>
 8018566:	4602      	mov	r2, r0
 8018568:	460b      	mov	r3, r1
 801856a:	2000      	movs	r0, #0
 801856c:	49bb      	ldr	r1, [pc, #748]	; (801885c <__ieee754_pow+0x76c>)
 801856e:	f7e8 f977 	bl	8000860 <__aeabi_ddiv>
 8018572:	ec41 0b1a 	vmov	d10, r0, r1
 8018576:	4602      	mov	r2, r0
 8018578:	460b      	mov	r3, r1
 801857a:	4630      	mov	r0, r6
 801857c:	4639      	mov	r1, r7
 801857e:	f7e8 f845 	bl	800060c <__aeabi_dmul>
 8018582:	2300      	movs	r3, #0
 8018584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018588:	9302      	str	r3, [sp, #8]
 801858a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801858e:	46ab      	mov	fp, r5
 8018590:	106d      	asrs	r5, r5, #1
 8018592:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018596:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801859a:	ec41 0b18 	vmov	d8, r0, r1
 801859e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80185a2:	2200      	movs	r2, #0
 80185a4:	4640      	mov	r0, r8
 80185a6:	4649      	mov	r1, r9
 80185a8:	4614      	mov	r4, r2
 80185aa:	461d      	mov	r5, r3
 80185ac:	f7e8 f82e 	bl	800060c <__aeabi_dmul>
 80185b0:	4602      	mov	r2, r0
 80185b2:	460b      	mov	r3, r1
 80185b4:	4630      	mov	r0, r6
 80185b6:	4639      	mov	r1, r7
 80185b8:	f7e7 fe70 	bl	800029c <__aeabi_dsub>
 80185bc:	ec53 2b19 	vmov	r2, r3, d9
 80185c0:	4606      	mov	r6, r0
 80185c2:	460f      	mov	r7, r1
 80185c4:	4620      	mov	r0, r4
 80185c6:	4629      	mov	r1, r5
 80185c8:	f7e7 fe68 	bl	800029c <__aeabi_dsub>
 80185cc:	4602      	mov	r2, r0
 80185ce:	460b      	mov	r3, r1
 80185d0:	4650      	mov	r0, sl
 80185d2:	4659      	mov	r1, fp
 80185d4:	f7e7 fe62 	bl	800029c <__aeabi_dsub>
 80185d8:	4642      	mov	r2, r8
 80185da:	464b      	mov	r3, r9
 80185dc:	f7e8 f816 	bl	800060c <__aeabi_dmul>
 80185e0:	4602      	mov	r2, r0
 80185e2:	460b      	mov	r3, r1
 80185e4:	4630      	mov	r0, r6
 80185e6:	4639      	mov	r1, r7
 80185e8:	f7e7 fe58 	bl	800029c <__aeabi_dsub>
 80185ec:	ec53 2b1a 	vmov	r2, r3, d10
 80185f0:	f7e8 f80c 	bl	800060c <__aeabi_dmul>
 80185f4:	ec53 2b18 	vmov	r2, r3, d8
 80185f8:	ec41 0b19 	vmov	d9, r0, r1
 80185fc:	ec51 0b18 	vmov	r0, r1, d8
 8018600:	f7e8 f804 	bl	800060c <__aeabi_dmul>
 8018604:	a37c      	add	r3, pc, #496	; (adr r3, 80187f8 <__ieee754_pow+0x708>)
 8018606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801860a:	4604      	mov	r4, r0
 801860c:	460d      	mov	r5, r1
 801860e:	f7e7 fffd 	bl	800060c <__aeabi_dmul>
 8018612:	a37b      	add	r3, pc, #492	; (adr r3, 8018800 <__ieee754_pow+0x710>)
 8018614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018618:	f7e7 fe42 	bl	80002a0 <__adddf3>
 801861c:	4622      	mov	r2, r4
 801861e:	462b      	mov	r3, r5
 8018620:	f7e7 fff4 	bl	800060c <__aeabi_dmul>
 8018624:	a378      	add	r3, pc, #480	; (adr r3, 8018808 <__ieee754_pow+0x718>)
 8018626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801862a:	f7e7 fe39 	bl	80002a0 <__adddf3>
 801862e:	4622      	mov	r2, r4
 8018630:	462b      	mov	r3, r5
 8018632:	f7e7 ffeb 	bl	800060c <__aeabi_dmul>
 8018636:	a376      	add	r3, pc, #472	; (adr r3, 8018810 <__ieee754_pow+0x720>)
 8018638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801863c:	f7e7 fe30 	bl	80002a0 <__adddf3>
 8018640:	4622      	mov	r2, r4
 8018642:	462b      	mov	r3, r5
 8018644:	f7e7 ffe2 	bl	800060c <__aeabi_dmul>
 8018648:	a373      	add	r3, pc, #460	; (adr r3, 8018818 <__ieee754_pow+0x728>)
 801864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801864e:	f7e7 fe27 	bl	80002a0 <__adddf3>
 8018652:	4622      	mov	r2, r4
 8018654:	462b      	mov	r3, r5
 8018656:	f7e7 ffd9 	bl	800060c <__aeabi_dmul>
 801865a:	a371      	add	r3, pc, #452	; (adr r3, 8018820 <__ieee754_pow+0x730>)
 801865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018660:	f7e7 fe1e 	bl	80002a0 <__adddf3>
 8018664:	4622      	mov	r2, r4
 8018666:	4606      	mov	r6, r0
 8018668:	460f      	mov	r7, r1
 801866a:	462b      	mov	r3, r5
 801866c:	4620      	mov	r0, r4
 801866e:	4629      	mov	r1, r5
 8018670:	f7e7 ffcc 	bl	800060c <__aeabi_dmul>
 8018674:	4602      	mov	r2, r0
 8018676:	460b      	mov	r3, r1
 8018678:	4630      	mov	r0, r6
 801867a:	4639      	mov	r1, r7
 801867c:	f7e7 ffc6 	bl	800060c <__aeabi_dmul>
 8018680:	4642      	mov	r2, r8
 8018682:	4604      	mov	r4, r0
 8018684:	460d      	mov	r5, r1
 8018686:	464b      	mov	r3, r9
 8018688:	ec51 0b18 	vmov	r0, r1, d8
 801868c:	f7e7 fe08 	bl	80002a0 <__adddf3>
 8018690:	ec53 2b19 	vmov	r2, r3, d9
 8018694:	f7e7 ffba 	bl	800060c <__aeabi_dmul>
 8018698:	4622      	mov	r2, r4
 801869a:	462b      	mov	r3, r5
 801869c:	f7e7 fe00 	bl	80002a0 <__adddf3>
 80186a0:	4642      	mov	r2, r8
 80186a2:	4682      	mov	sl, r0
 80186a4:	468b      	mov	fp, r1
 80186a6:	464b      	mov	r3, r9
 80186a8:	4640      	mov	r0, r8
 80186aa:	4649      	mov	r1, r9
 80186ac:	f7e7 ffae 	bl	800060c <__aeabi_dmul>
 80186b0:	4b6b      	ldr	r3, [pc, #428]	; (8018860 <__ieee754_pow+0x770>)
 80186b2:	2200      	movs	r2, #0
 80186b4:	4606      	mov	r6, r0
 80186b6:	460f      	mov	r7, r1
 80186b8:	f7e7 fdf2 	bl	80002a0 <__adddf3>
 80186bc:	4652      	mov	r2, sl
 80186be:	465b      	mov	r3, fp
 80186c0:	f7e7 fdee 	bl	80002a0 <__adddf3>
 80186c4:	2000      	movs	r0, #0
 80186c6:	4604      	mov	r4, r0
 80186c8:	460d      	mov	r5, r1
 80186ca:	4602      	mov	r2, r0
 80186cc:	460b      	mov	r3, r1
 80186ce:	4640      	mov	r0, r8
 80186d0:	4649      	mov	r1, r9
 80186d2:	f7e7 ff9b 	bl	800060c <__aeabi_dmul>
 80186d6:	4b62      	ldr	r3, [pc, #392]	; (8018860 <__ieee754_pow+0x770>)
 80186d8:	4680      	mov	r8, r0
 80186da:	4689      	mov	r9, r1
 80186dc:	2200      	movs	r2, #0
 80186de:	4620      	mov	r0, r4
 80186e0:	4629      	mov	r1, r5
 80186e2:	f7e7 fddb 	bl	800029c <__aeabi_dsub>
 80186e6:	4632      	mov	r2, r6
 80186e8:	463b      	mov	r3, r7
 80186ea:	f7e7 fdd7 	bl	800029c <__aeabi_dsub>
 80186ee:	4602      	mov	r2, r0
 80186f0:	460b      	mov	r3, r1
 80186f2:	4650      	mov	r0, sl
 80186f4:	4659      	mov	r1, fp
 80186f6:	f7e7 fdd1 	bl	800029c <__aeabi_dsub>
 80186fa:	ec53 2b18 	vmov	r2, r3, d8
 80186fe:	f7e7 ff85 	bl	800060c <__aeabi_dmul>
 8018702:	4622      	mov	r2, r4
 8018704:	4606      	mov	r6, r0
 8018706:	460f      	mov	r7, r1
 8018708:	462b      	mov	r3, r5
 801870a:	ec51 0b19 	vmov	r0, r1, d9
 801870e:	f7e7 ff7d 	bl	800060c <__aeabi_dmul>
 8018712:	4602      	mov	r2, r0
 8018714:	460b      	mov	r3, r1
 8018716:	4630      	mov	r0, r6
 8018718:	4639      	mov	r1, r7
 801871a:	f7e7 fdc1 	bl	80002a0 <__adddf3>
 801871e:	4606      	mov	r6, r0
 8018720:	460f      	mov	r7, r1
 8018722:	4602      	mov	r2, r0
 8018724:	460b      	mov	r3, r1
 8018726:	4640      	mov	r0, r8
 8018728:	4649      	mov	r1, r9
 801872a:	f7e7 fdb9 	bl	80002a0 <__adddf3>
 801872e:	a33e      	add	r3, pc, #248	; (adr r3, 8018828 <__ieee754_pow+0x738>)
 8018730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018734:	2000      	movs	r0, #0
 8018736:	4604      	mov	r4, r0
 8018738:	460d      	mov	r5, r1
 801873a:	f7e7 ff67 	bl	800060c <__aeabi_dmul>
 801873e:	4642      	mov	r2, r8
 8018740:	ec41 0b18 	vmov	d8, r0, r1
 8018744:	464b      	mov	r3, r9
 8018746:	4620      	mov	r0, r4
 8018748:	4629      	mov	r1, r5
 801874a:	f7e7 fda7 	bl	800029c <__aeabi_dsub>
 801874e:	4602      	mov	r2, r0
 8018750:	460b      	mov	r3, r1
 8018752:	4630      	mov	r0, r6
 8018754:	4639      	mov	r1, r7
 8018756:	f7e7 fda1 	bl	800029c <__aeabi_dsub>
 801875a:	a335      	add	r3, pc, #212	; (adr r3, 8018830 <__ieee754_pow+0x740>)
 801875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018760:	f7e7 ff54 	bl	800060c <__aeabi_dmul>
 8018764:	a334      	add	r3, pc, #208	; (adr r3, 8018838 <__ieee754_pow+0x748>)
 8018766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801876a:	4606      	mov	r6, r0
 801876c:	460f      	mov	r7, r1
 801876e:	4620      	mov	r0, r4
 8018770:	4629      	mov	r1, r5
 8018772:	f7e7 ff4b 	bl	800060c <__aeabi_dmul>
 8018776:	4602      	mov	r2, r0
 8018778:	460b      	mov	r3, r1
 801877a:	4630      	mov	r0, r6
 801877c:	4639      	mov	r1, r7
 801877e:	f7e7 fd8f 	bl	80002a0 <__adddf3>
 8018782:	9a07      	ldr	r2, [sp, #28]
 8018784:	4b37      	ldr	r3, [pc, #220]	; (8018864 <__ieee754_pow+0x774>)
 8018786:	4413      	add	r3, r2
 8018788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801878c:	f7e7 fd88 	bl	80002a0 <__adddf3>
 8018790:	4682      	mov	sl, r0
 8018792:	9805      	ldr	r0, [sp, #20]
 8018794:	468b      	mov	fp, r1
 8018796:	f7e7 fecf 	bl	8000538 <__aeabi_i2d>
 801879a:	9a07      	ldr	r2, [sp, #28]
 801879c:	4b32      	ldr	r3, [pc, #200]	; (8018868 <__ieee754_pow+0x778>)
 801879e:	4413      	add	r3, r2
 80187a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80187a4:	4606      	mov	r6, r0
 80187a6:	460f      	mov	r7, r1
 80187a8:	4652      	mov	r2, sl
 80187aa:	465b      	mov	r3, fp
 80187ac:	ec51 0b18 	vmov	r0, r1, d8
 80187b0:	f7e7 fd76 	bl	80002a0 <__adddf3>
 80187b4:	4642      	mov	r2, r8
 80187b6:	464b      	mov	r3, r9
 80187b8:	f7e7 fd72 	bl	80002a0 <__adddf3>
 80187bc:	4632      	mov	r2, r6
 80187be:	463b      	mov	r3, r7
 80187c0:	f7e7 fd6e 	bl	80002a0 <__adddf3>
 80187c4:	2000      	movs	r0, #0
 80187c6:	4632      	mov	r2, r6
 80187c8:	463b      	mov	r3, r7
 80187ca:	4604      	mov	r4, r0
 80187cc:	460d      	mov	r5, r1
 80187ce:	f7e7 fd65 	bl	800029c <__aeabi_dsub>
 80187d2:	4642      	mov	r2, r8
 80187d4:	464b      	mov	r3, r9
 80187d6:	f7e7 fd61 	bl	800029c <__aeabi_dsub>
 80187da:	ec53 2b18 	vmov	r2, r3, d8
 80187de:	f7e7 fd5d 	bl	800029c <__aeabi_dsub>
 80187e2:	4602      	mov	r2, r0
 80187e4:	460b      	mov	r3, r1
 80187e6:	4650      	mov	r0, sl
 80187e8:	4659      	mov	r1, fp
 80187ea:	e610      	b.n	801840e <__ieee754_pow+0x31e>
 80187ec:	2401      	movs	r4, #1
 80187ee:	e6a1      	b.n	8018534 <__ieee754_pow+0x444>
 80187f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018840 <__ieee754_pow+0x750>
 80187f4:	e617      	b.n	8018426 <__ieee754_pow+0x336>
 80187f6:	bf00      	nop
 80187f8:	4a454eef 	.word	0x4a454eef
 80187fc:	3fca7e28 	.word	0x3fca7e28
 8018800:	93c9db65 	.word	0x93c9db65
 8018804:	3fcd864a 	.word	0x3fcd864a
 8018808:	a91d4101 	.word	0xa91d4101
 801880c:	3fd17460 	.word	0x3fd17460
 8018810:	518f264d 	.word	0x518f264d
 8018814:	3fd55555 	.word	0x3fd55555
 8018818:	db6fabff 	.word	0xdb6fabff
 801881c:	3fdb6db6 	.word	0x3fdb6db6
 8018820:	33333303 	.word	0x33333303
 8018824:	3fe33333 	.word	0x3fe33333
 8018828:	e0000000 	.word	0xe0000000
 801882c:	3feec709 	.word	0x3feec709
 8018830:	dc3a03fd 	.word	0xdc3a03fd
 8018834:	3feec709 	.word	0x3feec709
 8018838:	145b01f5 	.word	0x145b01f5
 801883c:	be3e2fe0 	.word	0xbe3e2fe0
 8018840:	00000000 	.word	0x00000000
 8018844:	3ff00000 	.word	0x3ff00000
 8018848:	7ff00000 	.word	0x7ff00000
 801884c:	43400000 	.word	0x43400000
 8018850:	0003988e 	.word	0x0003988e
 8018854:	000bb679 	.word	0x000bb679
 8018858:	0801c9a0 	.word	0x0801c9a0
 801885c:	3ff00000 	.word	0x3ff00000
 8018860:	40080000 	.word	0x40080000
 8018864:	0801c9c0 	.word	0x0801c9c0
 8018868:	0801c9b0 	.word	0x0801c9b0
 801886c:	a3b5      	add	r3, pc, #724	; (adr r3, 8018b44 <__ieee754_pow+0xa54>)
 801886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018872:	4640      	mov	r0, r8
 8018874:	4649      	mov	r1, r9
 8018876:	f7e7 fd13 	bl	80002a0 <__adddf3>
 801887a:	4622      	mov	r2, r4
 801887c:	ec41 0b1a 	vmov	d10, r0, r1
 8018880:	462b      	mov	r3, r5
 8018882:	4630      	mov	r0, r6
 8018884:	4639      	mov	r1, r7
 8018886:	f7e7 fd09 	bl	800029c <__aeabi_dsub>
 801888a:	4602      	mov	r2, r0
 801888c:	460b      	mov	r3, r1
 801888e:	ec51 0b1a 	vmov	r0, r1, d10
 8018892:	f7e8 f94b 	bl	8000b2c <__aeabi_dcmpgt>
 8018896:	2800      	cmp	r0, #0
 8018898:	f47f ae04 	bne.w	80184a4 <__ieee754_pow+0x3b4>
 801889c:	4aa4      	ldr	r2, [pc, #656]	; (8018b30 <__ieee754_pow+0xa40>)
 801889e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80188a2:	4293      	cmp	r3, r2
 80188a4:	f340 8108 	ble.w	8018ab8 <__ieee754_pow+0x9c8>
 80188a8:	151b      	asrs	r3, r3, #20
 80188aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80188ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80188b2:	fa4a f303 	asr.w	r3, sl, r3
 80188b6:	445b      	add	r3, fp
 80188b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80188bc:	4e9d      	ldr	r6, [pc, #628]	; (8018b34 <__ieee754_pow+0xa44>)
 80188be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80188c2:	4116      	asrs	r6, r2
 80188c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80188c8:	2000      	movs	r0, #0
 80188ca:	ea23 0106 	bic.w	r1, r3, r6
 80188ce:	f1c2 0214 	rsb	r2, r2, #20
 80188d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80188d6:	fa4a fa02 	asr.w	sl, sl, r2
 80188da:	f1bb 0f00 	cmp.w	fp, #0
 80188de:	4602      	mov	r2, r0
 80188e0:	460b      	mov	r3, r1
 80188e2:	4620      	mov	r0, r4
 80188e4:	4629      	mov	r1, r5
 80188e6:	bfb8      	it	lt
 80188e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80188ec:	f7e7 fcd6 	bl	800029c <__aeabi_dsub>
 80188f0:	ec41 0b19 	vmov	d9, r0, r1
 80188f4:	4642      	mov	r2, r8
 80188f6:	464b      	mov	r3, r9
 80188f8:	ec51 0b19 	vmov	r0, r1, d9
 80188fc:	f7e7 fcd0 	bl	80002a0 <__adddf3>
 8018900:	a37b      	add	r3, pc, #492	; (adr r3, 8018af0 <__ieee754_pow+0xa00>)
 8018902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018906:	2000      	movs	r0, #0
 8018908:	4604      	mov	r4, r0
 801890a:	460d      	mov	r5, r1
 801890c:	f7e7 fe7e 	bl	800060c <__aeabi_dmul>
 8018910:	ec53 2b19 	vmov	r2, r3, d9
 8018914:	4606      	mov	r6, r0
 8018916:	460f      	mov	r7, r1
 8018918:	4620      	mov	r0, r4
 801891a:	4629      	mov	r1, r5
 801891c:	f7e7 fcbe 	bl	800029c <__aeabi_dsub>
 8018920:	4602      	mov	r2, r0
 8018922:	460b      	mov	r3, r1
 8018924:	4640      	mov	r0, r8
 8018926:	4649      	mov	r1, r9
 8018928:	f7e7 fcb8 	bl	800029c <__aeabi_dsub>
 801892c:	a372      	add	r3, pc, #456	; (adr r3, 8018af8 <__ieee754_pow+0xa08>)
 801892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018932:	f7e7 fe6b 	bl	800060c <__aeabi_dmul>
 8018936:	a372      	add	r3, pc, #456	; (adr r3, 8018b00 <__ieee754_pow+0xa10>)
 8018938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801893c:	4680      	mov	r8, r0
 801893e:	4689      	mov	r9, r1
 8018940:	4620      	mov	r0, r4
 8018942:	4629      	mov	r1, r5
 8018944:	f7e7 fe62 	bl	800060c <__aeabi_dmul>
 8018948:	4602      	mov	r2, r0
 801894a:	460b      	mov	r3, r1
 801894c:	4640      	mov	r0, r8
 801894e:	4649      	mov	r1, r9
 8018950:	f7e7 fca6 	bl	80002a0 <__adddf3>
 8018954:	4604      	mov	r4, r0
 8018956:	460d      	mov	r5, r1
 8018958:	4602      	mov	r2, r0
 801895a:	460b      	mov	r3, r1
 801895c:	4630      	mov	r0, r6
 801895e:	4639      	mov	r1, r7
 8018960:	f7e7 fc9e 	bl	80002a0 <__adddf3>
 8018964:	4632      	mov	r2, r6
 8018966:	463b      	mov	r3, r7
 8018968:	4680      	mov	r8, r0
 801896a:	4689      	mov	r9, r1
 801896c:	f7e7 fc96 	bl	800029c <__aeabi_dsub>
 8018970:	4602      	mov	r2, r0
 8018972:	460b      	mov	r3, r1
 8018974:	4620      	mov	r0, r4
 8018976:	4629      	mov	r1, r5
 8018978:	f7e7 fc90 	bl	800029c <__aeabi_dsub>
 801897c:	4642      	mov	r2, r8
 801897e:	4606      	mov	r6, r0
 8018980:	460f      	mov	r7, r1
 8018982:	464b      	mov	r3, r9
 8018984:	4640      	mov	r0, r8
 8018986:	4649      	mov	r1, r9
 8018988:	f7e7 fe40 	bl	800060c <__aeabi_dmul>
 801898c:	a35e      	add	r3, pc, #376	; (adr r3, 8018b08 <__ieee754_pow+0xa18>)
 801898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018992:	4604      	mov	r4, r0
 8018994:	460d      	mov	r5, r1
 8018996:	f7e7 fe39 	bl	800060c <__aeabi_dmul>
 801899a:	a35d      	add	r3, pc, #372	; (adr r3, 8018b10 <__ieee754_pow+0xa20>)
 801899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a0:	f7e7 fc7c 	bl	800029c <__aeabi_dsub>
 80189a4:	4622      	mov	r2, r4
 80189a6:	462b      	mov	r3, r5
 80189a8:	f7e7 fe30 	bl	800060c <__aeabi_dmul>
 80189ac:	a35a      	add	r3, pc, #360	; (adr r3, 8018b18 <__ieee754_pow+0xa28>)
 80189ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b2:	f7e7 fc75 	bl	80002a0 <__adddf3>
 80189b6:	4622      	mov	r2, r4
 80189b8:	462b      	mov	r3, r5
 80189ba:	f7e7 fe27 	bl	800060c <__aeabi_dmul>
 80189be:	a358      	add	r3, pc, #352	; (adr r3, 8018b20 <__ieee754_pow+0xa30>)
 80189c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c4:	f7e7 fc6a 	bl	800029c <__aeabi_dsub>
 80189c8:	4622      	mov	r2, r4
 80189ca:	462b      	mov	r3, r5
 80189cc:	f7e7 fe1e 	bl	800060c <__aeabi_dmul>
 80189d0:	a355      	add	r3, pc, #340	; (adr r3, 8018b28 <__ieee754_pow+0xa38>)
 80189d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d6:	f7e7 fc63 	bl	80002a0 <__adddf3>
 80189da:	4622      	mov	r2, r4
 80189dc:	462b      	mov	r3, r5
 80189de:	f7e7 fe15 	bl	800060c <__aeabi_dmul>
 80189e2:	4602      	mov	r2, r0
 80189e4:	460b      	mov	r3, r1
 80189e6:	4640      	mov	r0, r8
 80189e8:	4649      	mov	r1, r9
 80189ea:	f7e7 fc57 	bl	800029c <__aeabi_dsub>
 80189ee:	4604      	mov	r4, r0
 80189f0:	460d      	mov	r5, r1
 80189f2:	4602      	mov	r2, r0
 80189f4:	460b      	mov	r3, r1
 80189f6:	4640      	mov	r0, r8
 80189f8:	4649      	mov	r1, r9
 80189fa:	f7e7 fe07 	bl	800060c <__aeabi_dmul>
 80189fe:	2200      	movs	r2, #0
 8018a00:	ec41 0b19 	vmov	d9, r0, r1
 8018a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018a08:	4620      	mov	r0, r4
 8018a0a:	4629      	mov	r1, r5
 8018a0c:	f7e7 fc46 	bl	800029c <__aeabi_dsub>
 8018a10:	4602      	mov	r2, r0
 8018a12:	460b      	mov	r3, r1
 8018a14:	ec51 0b19 	vmov	r0, r1, d9
 8018a18:	f7e7 ff22 	bl	8000860 <__aeabi_ddiv>
 8018a1c:	4632      	mov	r2, r6
 8018a1e:	4604      	mov	r4, r0
 8018a20:	460d      	mov	r5, r1
 8018a22:	463b      	mov	r3, r7
 8018a24:	4640      	mov	r0, r8
 8018a26:	4649      	mov	r1, r9
 8018a28:	f7e7 fdf0 	bl	800060c <__aeabi_dmul>
 8018a2c:	4632      	mov	r2, r6
 8018a2e:	463b      	mov	r3, r7
 8018a30:	f7e7 fc36 	bl	80002a0 <__adddf3>
 8018a34:	4602      	mov	r2, r0
 8018a36:	460b      	mov	r3, r1
 8018a38:	4620      	mov	r0, r4
 8018a3a:	4629      	mov	r1, r5
 8018a3c:	f7e7 fc2e 	bl	800029c <__aeabi_dsub>
 8018a40:	4642      	mov	r2, r8
 8018a42:	464b      	mov	r3, r9
 8018a44:	f7e7 fc2a 	bl	800029c <__aeabi_dsub>
 8018a48:	460b      	mov	r3, r1
 8018a4a:	4602      	mov	r2, r0
 8018a4c:	493a      	ldr	r1, [pc, #232]	; (8018b38 <__ieee754_pow+0xa48>)
 8018a4e:	2000      	movs	r0, #0
 8018a50:	f7e7 fc24 	bl	800029c <__aeabi_dsub>
 8018a54:	ec41 0b10 	vmov	d0, r0, r1
 8018a58:	ee10 3a90 	vmov	r3, s1
 8018a5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018a64:	da2b      	bge.n	8018abe <__ieee754_pow+0x9ce>
 8018a66:	4650      	mov	r0, sl
 8018a68:	f000 fb9e 	bl	80191a8 <scalbn>
 8018a6c:	ec51 0b10 	vmov	r0, r1, d0
 8018a70:	ec53 2b18 	vmov	r2, r3, d8
 8018a74:	f7ff bbed 	b.w	8018252 <__ieee754_pow+0x162>
 8018a78:	4b30      	ldr	r3, [pc, #192]	; (8018b3c <__ieee754_pow+0xa4c>)
 8018a7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018a7e:	429e      	cmp	r6, r3
 8018a80:	f77f af0c 	ble.w	801889c <__ieee754_pow+0x7ac>
 8018a84:	4b2e      	ldr	r3, [pc, #184]	; (8018b40 <__ieee754_pow+0xa50>)
 8018a86:	440b      	add	r3, r1
 8018a88:	4303      	orrs	r3, r0
 8018a8a:	d009      	beq.n	8018aa0 <__ieee754_pow+0x9b0>
 8018a8c:	ec51 0b18 	vmov	r0, r1, d8
 8018a90:	2200      	movs	r2, #0
 8018a92:	2300      	movs	r3, #0
 8018a94:	f7e8 f82c 	bl	8000af0 <__aeabi_dcmplt>
 8018a98:	3800      	subs	r0, #0
 8018a9a:	bf18      	it	ne
 8018a9c:	2001      	movne	r0, #1
 8018a9e:	e447      	b.n	8018330 <__ieee754_pow+0x240>
 8018aa0:	4622      	mov	r2, r4
 8018aa2:	462b      	mov	r3, r5
 8018aa4:	f7e7 fbfa 	bl	800029c <__aeabi_dsub>
 8018aa8:	4642      	mov	r2, r8
 8018aaa:	464b      	mov	r3, r9
 8018aac:	f7e8 f834 	bl	8000b18 <__aeabi_dcmpge>
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	f43f aef3 	beq.w	801889c <__ieee754_pow+0x7ac>
 8018ab6:	e7e9      	b.n	8018a8c <__ieee754_pow+0x99c>
 8018ab8:	f04f 0a00 	mov.w	sl, #0
 8018abc:	e71a      	b.n	80188f4 <__ieee754_pow+0x804>
 8018abe:	ec51 0b10 	vmov	r0, r1, d0
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	e7d4      	b.n	8018a70 <__ieee754_pow+0x980>
 8018ac6:	491c      	ldr	r1, [pc, #112]	; (8018b38 <__ieee754_pow+0xa48>)
 8018ac8:	2000      	movs	r0, #0
 8018aca:	f7ff bb30 	b.w	801812e <__ieee754_pow+0x3e>
 8018ace:	2000      	movs	r0, #0
 8018ad0:	2100      	movs	r1, #0
 8018ad2:	f7ff bb2c 	b.w	801812e <__ieee754_pow+0x3e>
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	4639      	mov	r1, r7
 8018ada:	f7ff bb28 	b.w	801812e <__ieee754_pow+0x3e>
 8018ade:	9204      	str	r2, [sp, #16]
 8018ae0:	f7ff bb7a 	b.w	80181d8 <__ieee754_pow+0xe8>
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	f7ff bb64 	b.w	80181b2 <__ieee754_pow+0xc2>
 8018aea:	bf00      	nop
 8018aec:	f3af 8000 	nop.w
 8018af0:	00000000 	.word	0x00000000
 8018af4:	3fe62e43 	.word	0x3fe62e43
 8018af8:	fefa39ef 	.word	0xfefa39ef
 8018afc:	3fe62e42 	.word	0x3fe62e42
 8018b00:	0ca86c39 	.word	0x0ca86c39
 8018b04:	be205c61 	.word	0xbe205c61
 8018b08:	72bea4d0 	.word	0x72bea4d0
 8018b0c:	3e663769 	.word	0x3e663769
 8018b10:	c5d26bf1 	.word	0xc5d26bf1
 8018b14:	3ebbbd41 	.word	0x3ebbbd41
 8018b18:	af25de2c 	.word	0xaf25de2c
 8018b1c:	3f11566a 	.word	0x3f11566a
 8018b20:	16bebd93 	.word	0x16bebd93
 8018b24:	3f66c16c 	.word	0x3f66c16c
 8018b28:	5555553e 	.word	0x5555553e
 8018b2c:	3fc55555 	.word	0x3fc55555
 8018b30:	3fe00000 	.word	0x3fe00000
 8018b34:	000fffff 	.word	0x000fffff
 8018b38:	3ff00000 	.word	0x3ff00000
 8018b3c:	4090cbff 	.word	0x4090cbff
 8018b40:	3f6f3400 	.word	0x3f6f3400
 8018b44:	652b82fe 	.word	0x652b82fe
 8018b48:	3c971547 	.word	0x3c971547

08018b4c <__ieee754_sqrt>:
 8018b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b50:	ec55 4b10 	vmov	r4, r5, d0
 8018b54:	4e55      	ldr	r6, [pc, #340]	; (8018cac <__ieee754_sqrt+0x160>)
 8018b56:	43ae      	bics	r6, r5
 8018b58:	ee10 0a10 	vmov	r0, s0
 8018b5c:	ee10 3a10 	vmov	r3, s0
 8018b60:	462a      	mov	r2, r5
 8018b62:	4629      	mov	r1, r5
 8018b64:	d110      	bne.n	8018b88 <__ieee754_sqrt+0x3c>
 8018b66:	ee10 2a10 	vmov	r2, s0
 8018b6a:	462b      	mov	r3, r5
 8018b6c:	f7e7 fd4e 	bl	800060c <__aeabi_dmul>
 8018b70:	4602      	mov	r2, r0
 8018b72:	460b      	mov	r3, r1
 8018b74:	4620      	mov	r0, r4
 8018b76:	4629      	mov	r1, r5
 8018b78:	f7e7 fb92 	bl	80002a0 <__adddf3>
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	460d      	mov	r5, r1
 8018b80:	ec45 4b10 	vmov	d0, r4, r5
 8018b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b88:	2d00      	cmp	r5, #0
 8018b8a:	dc10      	bgt.n	8018bae <__ieee754_sqrt+0x62>
 8018b8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018b90:	4330      	orrs	r0, r6
 8018b92:	d0f5      	beq.n	8018b80 <__ieee754_sqrt+0x34>
 8018b94:	b15d      	cbz	r5, 8018bae <__ieee754_sqrt+0x62>
 8018b96:	ee10 2a10 	vmov	r2, s0
 8018b9a:	462b      	mov	r3, r5
 8018b9c:	ee10 0a10 	vmov	r0, s0
 8018ba0:	f7e7 fb7c 	bl	800029c <__aeabi_dsub>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	460b      	mov	r3, r1
 8018ba8:	f7e7 fe5a 	bl	8000860 <__aeabi_ddiv>
 8018bac:	e7e6      	b.n	8018b7c <__ieee754_sqrt+0x30>
 8018bae:	1512      	asrs	r2, r2, #20
 8018bb0:	d074      	beq.n	8018c9c <__ieee754_sqrt+0x150>
 8018bb2:	07d4      	lsls	r4, r2, #31
 8018bb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018bb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018bc0:	bf5e      	ittt	pl
 8018bc2:	0fda      	lsrpl	r2, r3, #31
 8018bc4:	005b      	lslpl	r3, r3, #1
 8018bc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018bca:	2400      	movs	r4, #0
 8018bcc:	0fda      	lsrs	r2, r3, #31
 8018bce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018bd2:	107f      	asrs	r7, r7, #1
 8018bd4:	005b      	lsls	r3, r3, #1
 8018bd6:	2516      	movs	r5, #22
 8018bd8:	4620      	mov	r0, r4
 8018bda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018bde:	1886      	adds	r6, r0, r2
 8018be0:	428e      	cmp	r6, r1
 8018be2:	bfde      	ittt	le
 8018be4:	1b89      	suble	r1, r1, r6
 8018be6:	18b0      	addle	r0, r6, r2
 8018be8:	18a4      	addle	r4, r4, r2
 8018bea:	0049      	lsls	r1, r1, #1
 8018bec:	3d01      	subs	r5, #1
 8018bee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018bf2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018bf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018bfa:	d1f0      	bne.n	8018bde <__ieee754_sqrt+0x92>
 8018bfc:	462a      	mov	r2, r5
 8018bfe:	f04f 0e20 	mov.w	lr, #32
 8018c02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018c06:	4281      	cmp	r1, r0
 8018c08:	eb06 0c05 	add.w	ip, r6, r5
 8018c0c:	dc02      	bgt.n	8018c14 <__ieee754_sqrt+0xc8>
 8018c0e:	d113      	bne.n	8018c38 <__ieee754_sqrt+0xec>
 8018c10:	459c      	cmp	ip, r3
 8018c12:	d811      	bhi.n	8018c38 <__ieee754_sqrt+0xec>
 8018c14:	f1bc 0f00 	cmp.w	ip, #0
 8018c18:	eb0c 0506 	add.w	r5, ip, r6
 8018c1c:	da43      	bge.n	8018ca6 <__ieee754_sqrt+0x15a>
 8018c1e:	2d00      	cmp	r5, #0
 8018c20:	db41      	blt.n	8018ca6 <__ieee754_sqrt+0x15a>
 8018c22:	f100 0801 	add.w	r8, r0, #1
 8018c26:	1a09      	subs	r1, r1, r0
 8018c28:	459c      	cmp	ip, r3
 8018c2a:	bf88      	it	hi
 8018c2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018c30:	eba3 030c 	sub.w	r3, r3, ip
 8018c34:	4432      	add	r2, r6
 8018c36:	4640      	mov	r0, r8
 8018c38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018c3c:	f1be 0e01 	subs.w	lr, lr, #1
 8018c40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018c48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018c4c:	d1db      	bne.n	8018c06 <__ieee754_sqrt+0xba>
 8018c4e:	430b      	orrs	r3, r1
 8018c50:	d006      	beq.n	8018c60 <__ieee754_sqrt+0x114>
 8018c52:	1c50      	adds	r0, r2, #1
 8018c54:	bf13      	iteet	ne
 8018c56:	3201      	addne	r2, #1
 8018c58:	3401      	addeq	r4, #1
 8018c5a:	4672      	moveq	r2, lr
 8018c5c:	f022 0201 	bicne.w	r2, r2, #1
 8018c60:	1063      	asrs	r3, r4, #1
 8018c62:	0852      	lsrs	r2, r2, #1
 8018c64:	07e1      	lsls	r1, r4, #31
 8018c66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018c6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018c6e:	bf48      	it	mi
 8018c70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018c74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018c78:	4614      	mov	r4, r2
 8018c7a:	e781      	b.n	8018b80 <__ieee754_sqrt+0x34>
 8018c7c:	0ad9      	lsrs	r1, r3, #11
 8018c7e:	3815      	subs	r0, #21
 8018c80:	055b      	lsls	r3, r3, #21
 8018c82:	2900      	cmp	r1, #0
 8018c84:	d0fa      	beq.n	8018c7c <__ieee754_sqrt+0x130>
 8018c86:	02cd      	lsls	r5, r1, #11
 8018c88:	d50a      	bpl.n	8018ca0 <__ieee754_sqrt+0x154>
 8018c8a:	f1c2 0420 	rsb	r4, r2, #32
 8018c8e:	fa23 f404 	lsr.w	r4, r3, r4
 8018c92:	1e55      	subs	r5, r2, #1
 8018c94:	4093      	lsls	r3, r2
 8018c96:	4321      	orrs	r1, r4
 8018c98:	1b42      	subs	r2, r0, r5
 8018c9a:	e78a      	b.n	8018bb2 <__ieee754_sqrt+0x66>
 8018c9c:	4610      	mov	r0, r2
 8018c9e:	e7f0      	b.n	8018c82 <__ieee754_sqrt+0x136>
 8018ca0:	0049      	lsls	r1, r1, #1
 8018ca2:	3201      	adds	r2, #1
 8018ca4:	e7ef      	b.n	8018c86 <__ieee754_sqrt+0x13a>
 8018ca6:	4680      	mov	r8, r0
 8018ca8:	e7bd      	b.n	8018c26 <__ieee754_sqrt+0xda>
 8018caa:	bf00      	nop
 8018cac:	7ff00000 	.word	0x7ff00000

08018cb0 <__ieee754_expf>:
 8018cb0:	ee10 2a10 	vmov	r2, s0
 8018cb4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018cb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018cbc:	d902      	bls.n	8018cc4 <__ieee754_expf+0x14>
 8018cbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018cc2:	4770      	bx	lr
 8018cc4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8018cc8:	d106      	bne.n	8018cd8 <__ieee754_expf+0x28>
 8018cca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018e04 <__ieee754_expf+0x154>
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	bf18      	it	ne
 8018cd2:	eeb0 0a67 	vmovne.f32	s0, s15
 8018cd6:	4770      	bx	lr
 8018cd8:	484b      	ldr	r0, [pc, #300]	; (8018e08 <__ieee754_expf+0x158>)
 8018cda:	4282      	cmp	r2, r0
 8018cdc:	dd02      	ble.n	8018ce4 <__ieee754_expf+0x34>
 8018cde:	2000      	movs	r0, #0
 8018ce0:	f000 ba48 	b.w	8019174 <__math_oflowf>
 8018ce4:	2a00      	cmp	r2, #0
 8018ce6:	da05      	bge.n	8018cf4 <__ieee754_expf+0x44>
 8018ce8:	4a48      	ldr	r2, [pc, #288]	; (8018e0c <__ieee754_expf+0x15c>)
 8018cea:	4291      	cmp	r1, r2
 8018cec:	d902      	bls.n	8018cf4 <__ieee754_expf+0x44>
 8018cee:	2000      	movs	r0, #0
 8018cf0:	f000 ba3a 	b.w	8019168 <__math_uflowf>
 8018cf4:	4a46      	ldr	r2, [pc, #280]	; (8018e10 <__ieee754_expf+0x160>)
 8018cf6:	4291      	cmp	r1, r2
 8018cf8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018cfc:	d952      	bls.n	8018da4 <__ieee754_expf+0xf4>
 8018cfe:	4a45      	ldr	r2, [pc, #276]	; (8018e14 <__ieee754_expf+0x164>)
 8018d00:	4291      	cmp	r1, r2
 8018d02:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8018d06:	d834      	bhi.n	8018d72 <__ieee754_expf+0xc2>
 8018d08:	4943      	ldr	r1, [pc, #268]	; (8018e18 <__ieee754_expf+0x168>)
 8018d0a:	4411      	add	r1, r2
 8018d0c:	ed91 7a00 	vldr	s14, [r1]
 8018d10:	4942      	ldr	r1, [pc, #264]	; (8018e1c <__ieee754_expf+0x16c>)
 8018d12:	440a      	add	r2, r1
 8018d14:	edd2 7a00 	vldr	s15, [r2]
 8018d18:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018d1c:	f1c3 0201 	rsb	r2, r3, #1
 8018d20:	1ad2      	subs	r2, r2, r3
 8018d22:	ee37 0a67 	vsub.f32	s0, s14, s15
 8018d26:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018d2a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8018e20 <__ieee754_expf+0x170>
 8018d2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8018e24 <__ieee754_expf+0x174>
 8018d32:	eee6 6a05 	vfma.f32	s13, s12, s10
 8018d36:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8018e28 <__ieee754_expf+0x178>
 8018d3a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8018d3e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8018e2c <__ieee754_expf+0x17c>
 8018d42:	eee5 6a06 	vfma.f32	s13, s10, s12
 8018d46:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8018e30 <__ieee754_expf+0x180>
 8018d4a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8018d4e:	eef0 6a40 	vmov.f32	s13, s0
 8018d52:	eee5 6a46 	vfms.f32	s13, s10, s12
 8018d56:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8018d5a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8018d5e:	bb92      	cbnz	r2, 8018dc6 <__ieee754_expf+0x116>
 8018d60:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8018d64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8018d68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018d6c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8018d70:	4770      	bx	lr
 8018d72:	4b30      	ldr	r3, [pc, #192]	; (8018e34 <__ieee754_expf+0x184>)
 8018d74:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8018e38 <__ieee754_expf+0x188>
 8018d78:	eddf 6a30 	vldr	s13, [pc, #192]	; 8018e3c <__ieee754_expf+0x18c>
 8018d7c:	4413      	add	r3, r2
 8018d7e:	edd3 7a00 	vldr	s15, [r3]
 8018d82:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018d86:	eeb0 7a40 	vmov.f32	s14, s0
 8018d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d8e:	ee17 2a90 	vmov	r2, s15
 8018d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d96:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018d9a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8018e40 <__ieee754_expf+0x190>
 8018d9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018da2:	e7be      	b.n	8018d22 <__ieee754_expf+0x72>
 8018da4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8018da8:	d20b      	bcs.n	8018dc2 <__ieee754_expf+0x112>
 8018daa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8018e44 <__ieee754_expf+0x194>
 8018dae:	ee70 6a26 	vadd.f32	s13, s0, s13
 8018db2:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dba:	dd02      	ble.n	8018dc2 <__ieee754_expf+0x112>
 8018dbc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018dc0:	4770      	bx	lr
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	e7af      	b.n	8018d26 <__ieee754_expf+0x76>
 8018dc6:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018dca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8018dce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8018dd2:	bfb8      	it	lt
 8018dd4:	3264      	addlt	r2, #100	; 0x64
 8018dd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018dda:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8018dde:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8018de2:	ee17 3a90 	vmov	r3, s15
 8018de6:	bfab      	itete	ge
 8018de8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018dec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018df0:	ee00 3a10 	vmovge	s0, r3
 8018df4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8018e48 <__ieee754_expf+0x198>
 8018df8:	bfbc      	itt	lt
 8018dfa:	ee00 3a10 	vmovlt	s0, r3
 8018dfe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018e02:	4770      	bx	lr
 8018e04:	00000000 	.word	0x00000000
 8018e08:	42b17217 	.word	0x42b17217
 8018e0c:	42cff1b5 	.word	0x42cff1b5
 8018e10:	3eb17218 	.word	0x3eb17218
 8018e14:	3f851591 	.word	0x3f851591
 8018e18:	0801c9d8 	.word	0x0801c9d8
 8018e1c:	0801c9e0 	.word	0x0801c9e0
 8018e20:	3331bb4c 	.word	0x3331bb4c
 8018e24:	b5ddea0e 	.word	0xb5ddea0e
 8018e28:	388ab355 	.word	0x388ab355
 8018e2c:	bb360b61 	.word	0xbb360b61
 8018e30:	3e2aaaab 	.word	0x3e2aaaab
 8018e34:	0801c9d0 	.word	0x0801c9d0
 8018e38:	3fb8aa3b 	.word	0x3fb8aa3b
 8018e3c:	3f317180 	.word	0x3f317180
 8018e40:	3717f7d1 	.word	0x3717f7d1
 8018e44:	7149f2ca 	.word	0x7149f2ca
 8018e48:	0d800000 	.word	0x0d800000

08018e4c <__ieee754_logf>:
 8018e4c:	ee10 3a10 	vmov	r3, s0
 8018e50:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018e54:	d106      	bne.n	8018e64 <__ieee754_logf+0x18>
 8018e56:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8018fec <__ieee754_logf+0x1a0>
 8018e5a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8018ff0 <__ieee754_logf+0x1a4>
 8018e5e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018e62:	4770      	bx	lr
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	da02      	bge.n	8018e6e <__ieee754_logf+0x22>
 8018e68:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018e6c:	e7f5      	b.n	8018e5a <__ieee754_logf+0xe>
 8018e6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018e72:	db02      	blt.n	8018e7a <__ieee754_logf+0x2e>
 8018e74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e78:	4770      	bx	lr
 8018e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018e7e:	bfb8      	it	lt
 8018e80:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8018ff4 <__ieee754_logf+0x1a8>
 8018e84:	485c      	ldr	r0, [pc, #368]	; (8018ff8 <__ieee754_logf+0x1ac>)
 8018e86:	bfbe      	ittt	lt
 8018e88:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018e8c:	f06f 0118 	mvnlt.w	r1, #24
 8018e90:	ee17 3a90 	vmovlt	r3, s15
 8018e94:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8018e98:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018e9c:	4418      	add	r0, r3
 8018e9e:	bfa8      	it	ge
 8018ea0:	2100      	movge	r1, #0
 8018ea2:	3a7f      	subs	r2, #127	; 0x7f
 8018ea4:	440a      	add	r2, r1
 8018ea6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8018eaa:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8018eae:	4319      	orrs	r1, r3
 8018eb0:	ee00 1a10 	vmov	s0, r1
 8018eb4:	4951      	ldr	r1, [pc, #324]	; (8018ffc <__ieee754_logf+0x1b0>)
 8018eb6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8018eba:	f103 000f 	add.w	r0, r3, #15
 8018ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018ec2:	4001      	ands	r1, r0
 8018ec4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018ec8:	bb89      	cbnz	r1, 8018f2e <__ieee754_logf+0xe2>
 8018eca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed2:	d10f      	bne.n	8018ef4 <__ieee754_logf+0xa8>
 8018ed4:	2a00      	cmp	r2, #0
 8018ed6:	f000 8085 	beq.w	8018fe4 <__ieee754_logf+0x198>
 8018eda:	ee07 2a90 	vmov	s15, r2
 8018ede:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8019000 <__ieee754_logf+0x1b4>
 8018ee2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019004 <__ieee754_logf+0x1b8>
 8018ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018eea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018eee:	eea7 0a87 	vfma.f32	s0, s15, s14
 8018ef2:	4770      	bx	lr
 8018ef4:	eddf 6a44 	vldr	s13, [pc, #272]	; 8019008 <__ieee754_logf+0x1bc>
 8018ef8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018efc:	eee0 7a66 	vfms.f32	s15, s0, s13
 8018f00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f08:	b912      	cbnz	r2, 8018f10 <__ieee754_logf+0xc4>
 8018f0a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018f0e:	4770      	bx	lr
 8018f10:	ee07 2a90 	vmov	s15, r2
 8018f14:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8019000 <__ieee754_logf+0x1b4>
 8018f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f1c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018f20:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018f24:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8019004 <__ieee754_logf+0x1b8>
 8018f28:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8018f2c:	4770      	bx	lr
 8018f2e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018f32:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018f36:	eddf 5a35 	vldr	s11, [pc, #212]	; 801900c <__ieee754_logf+0x1c0>
 8018f3a:	eddf 4a35 	vldr	s9, [pc, #212]	; 8019010 <__ieee754_logf+0x1c4>
 8018f3e:	4935      	ldr	r1, [pc, #212]	; (8019014 <__ieee754_logf+0x1c8>)
 8018f40:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8018f44:	4419      	add	r1, r3
 8018f46:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8018f4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018f4e:	430b      	orrs	r3, r1
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	ee07 2a90 	vmov	s15, r2
 8018f56:	ee26 5a06 	vmul.f32	s10, s12, s12
 8018f5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018f5e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8018f62:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8019018 <__ieee754_logf+0x1cc>
 8018f66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018f6a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801901c <__ieee754_logf+0x1d0>
 8018f6e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018f72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019020 <__ieee754_logf+0x1d4>
 8018f76:	eee7 7a24 	vfma.f32	s15, s14, s9
 8018f7a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8019024 <__ieee754_logf+0x1d8>
 8018f7e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8018f82:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019028 <__ieee754_logf+0x1dc>
 8018f86:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018f8a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018f8e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8018f92:	dd1c      	ble.n	8018fce <__ieee754_logf+0x182>
 8018f94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018f98:	ee20 7a07 	vmul.f32	s14, s0, s14
 8018f9c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8018fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018fa4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018fa8:	b922      	cbnz	r2, 8018fb4 <__ieee754_logf+0x168>
 8018faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018fb2:	4770      	bx	lr
 8018fb4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8019000 <__ieee754_logf+0x1b4>
 8018fb8:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fc0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018fc4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019004 <__ieee754_logf+0x1b8>
 8018fc8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8018fcc:	4770      	bx	lr
 8018fce:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018fd2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018fd6:	2a00      	cmp	r2, #0
 8018fd8:	d0e9      	beq.n	8018fae <__ieee754_logf+0x162>
 8018fda:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8019000 <__ieee754_logf+0x1b4>
 8018fde:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8018fe2:	e7ed      	b.n	8018fc0 <__ieee754_logf+0x174>
 8018fe4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8018ff0 <__ieee754_logf+0x1a4>
 8018fe8:	4770      	bx	lr
 8018fea:	bf00      	nop
 8018fec:	cc000000 	.word	0xcc000000
 8018ff0:	00000000 	.word	0x00000000
 8018ff4:	4c000000 	.word	0x4c000000
 8018ff8:	004afb20 	.word	0x004afb20
 8018ffc:	007ffff0 	.word	0x007ffff0
 8019000:	3717f7d1 	.word	0x3717f7d1
 8019004:	3f317180 	.word	0x3f317180
 8019008:	3eaaaaab 	.word	0x3eaaaaab
 801900c:	3e1cd04f 	.word	0x3e1cd04f
 8019010:	3e178897 	.word	0x3e178897
 8019014:	ffcf5c30 	.word	0xffcf5c30
 8019018:	3e638e29 	.word	0x3e638e29
 801901c:	3ecccccd 	.word	0x3ecccccd
 8019020:	3e3a3325 	.word	0x3e3a3325
 8019024:	3e924925 	.word	0x3e924925
 8019028:	3f2aaaab 	.word	0x3f2aaaab

0801902c <__ieee754_log10f>:
 801902c:	b508      	push	{r3, lr}
 801902e:	ee10 2a10 	vmov	r2, s0
 8019032:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019036:	ed2d 8b02 	vpush	{d8}
 801903a:	d108      	bne.n	801904e <__ieee754_log10f+0x22>
 801903c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80190c4 <__ieee754_log10f+0x98>
 8019040:	eddf 7a21 	vldr	s15, [pc, #132]	; 80190c8 <__ieee754_log10f+0x9c>
 8019044:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019048:	ecbd 8b02 	vpop	{d8}
 801904c:	bd08      	pop	{r3, pc}
 801904e:	2a00      	cmp	r2, #0
 8019050:	da02      	bge.n	8019058 <__ieee754_log10f+0x2c>
 8019052:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019056:	e7f3      	b.n	8019040 <__ieee754_log10f+0x14>
 8019058:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801905c:	db02      	blt.n	8019064 <__ieee754_log10f+0x38>
 801905e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019062:	e7f1      	b.n	8019048 <__ieee754_log10f+0x1c>
 8019064:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8019068:	bfbf      	itttt	lt
 801906a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80190cc <__ieee754_log10f+0xa0>
 801906e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019072:	f06f 0118 	mvnlt.w	r1, #24
 8019076:	ee17 2a90 	vmovlt	r2, s15
 801907a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801907e:	bfa8      	it	ge
 8019080:	2100      	movge	r1, #0
 8019082:	3b7f      	subs	r3, #127	; 0x7f
 8019084:	440b      	add	r3, r1
 8019086:	0fd9      	lsrs	r1, r3, #31
 8019088:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801908c:	ee07 3a90 	vmov	s15, r3
 8019090:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019094:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8019098:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801909c:	ee00 3a10 	vmov	s0, r3
 80190a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80190a4:	f7ff fed2 	bl	8018e4c <__ieee754_logf>
 80190a8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80190d0 <__ieee754_log10f+0xa4>
 80190ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80190b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80190d4 <__ieee754_log10f+0xa8>
 80190b4:	eea8 0a27 	vfma.f32	s0, s16, s15
 80190b8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80190d8 <__ieee754_log10f+0xac>
 80190bc:	eea8 0a27 	vfma.f32	s0, s16, s15
 80190c0:	e7c2      	b.n	8019048 <__ieee754_log10f+0x1c>
 80190c2:	bf00      	nop
 80190c4:	cc000000 	.word	0xcc000000
 80190c8:	00000000 	.word	0x00000000
 80190cc:	4c000000 	.word	0x4c000000
 80190d0:	3ede5bd9 	.word	0x3ede5bd9
 80190d4:	355427db 	.word	0x355427db
 80190d8:	3e9a2080 	.word	0x3e9a2080

080190dc <with_errno>:
 80190dc:	b570      	push	{r4, r5, r6, lr}
 80190de:	4604      	mov	r4, r0
 80190e0:	460d      	mov	r5, r1
 80190e2:	4616      	mov	r6, r2
 80190e4:	f000 f928 	bl	8019338 <__errno>
 80190e8:	4629      	mov	r1, r5
 80190ea:	6006      	str	r6, [r0, #0]
 80190ec:	4620      	mov	r0, r4
 80190ee:	bd70      	pop	{r4, r5, r6, pc}

080190f0 <xflow>:
 80190f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80190f2:	4614      	mov	r4, r2
 80190f4:	461d      	mov	r5, r3
 80190f6:	b108      	cbz	r0, 80190fc <xflow+0xc>
 80190f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80190fc:	e9cd 2300 	strd	r2, r3, [sp]
 8019100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019104:	4620      	mov	r0, r4
 8019106:	4629      	mov	r1, r5
 8019108:	f7e7 fa80 	bl	800060c <__aeabi_dmul>
 801910c:	2222      	movs	r2, #34	; 0x22
 801910e:	b003      	add	sp, #12
 8019110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019114:	f7ff bfe2 	b.w	80190dc <with_errno>

08019118 <__math_uflow>:
 8019118:	b508      	push	{r3, lr}
 801911a:	2200      	movs	r2, #0
 801911c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019120:	f7ff ffe6 	bl	80190f0 <xflow>
 8019124:	ec41 0b10 	vmov	d0, r0, r1
 8019128:	bd08      	pop	{r3, pc}

0801912a <__math_oflow>:
 801912a:	b508      	push	{r3, lr}
 801912c:	2200      	movs	r2, #0
 801912e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8019132:	f7ff ffdd 	bl	80190f0 <xflow>
 8019136:	ec41 0b10 	vmov	d0, r0, r1
 801913a:	bd08      	pop	{r3, pc}

0801913c <with_errnof>:
 801913c:	b513      	push	{r0, r1, r4, lr}
 801913e:	4604      	mov	r4, r0
 8019140:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019144:	f000 f8f8 	bl	8019338 <__errno>
 8019148:	ed9d 0a01 	vldr	s0, [sp, #4]
 801914c:	6004      	str	r4, [r0, #0]
 801914e:	b002      	add	sp, #8
 8019150:	bd10      	pop	{r4, pc}

08019152 <xflowf>:
 8019152:	b130      	cbz	r0, 8019162 <xflowf+0x10>
 8019154:	eef1 7a40 	vneg.f32	s15, s0
 8019158:	ee27 0a80 	vmul.f32	s0, s15, s0
 801915c:	2022      	movs	r0, #34	; 0x22
 801915e:	f7ff bfed 	b.w	801913c <with_errnof>
 8019162:	eef0 7a40 	vmov.f32	s15, s0
 8019166:	e7f7      	b.n	8019158 <xflowf+0x6>

08019168 <__math_uflowf>:
 8019168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019170 <__math_uflowf+0x8>
 801916c:	f7ff bff1 	b.w	8019152 <xflowf>
 8019170:	10000000 	.word	0x10000000

08019174 <__math_oflowf>:
 8019174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801917c <__math_oflowf+0x8>
 8019178:	f7ff bfeb 	b.w	8019152 <xflowf>
 801917c:	70000000 	.word	0x70000000

08019180 <fabs>:
 8019180:	ec51 0b10 	vmov	r0, r1, d0
 8019184:	ee10 2a10 	vmov	r2, s0
 8019188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801918c:	ec43 2b10 	vmov	d0, r2, r3
 8019190:	4770      	bx	lr

08019192 <finite>:
 8019192:	b082      	sub	sp, #8
 8019194:	ed8d 0b00 	vstr	d0, [sp]
 8019198:	9801      	ldr	r0, [sp, #4]
 801919a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801919e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80191a2:	0fc0      	lsrs	r0, r0, #31
 80191a4:	b002      	add	sp, #8
 80191a6:	4770      	bx	lr

080191a8 <scalbn>:
 80191a8:	b570      	push	{r4, r5, r6, lr}
 80191aa:	ec55 4b10 	vmov	r4, r5, d0
 80191ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80191b2:	4606      	mov	r6, r0
 80191b4:	462b      	mov	r3, r5
 80191b6:	b99a      	cbnz	r2, 80191e0 <scalbn+0x38>
 80191b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80191bc:	4323      	orrs	r3, r4
 80191be:	d036      	beq.n	801922e <scalbn+0x86>
 80191c0:	4b39      	ldr	r3, [pc, #228]	; (80192a8 <scalbn+0x100>)
 80191c2:	4629      	mov	r1, r5
 80191c4:	ee10 0a10 	vmov	r0, s0
 80191c8:	2200      	movs	r2, #0
 80191ca:	f7e7 fa1f 	bl	800060c <__aeabi_dmul>
 80191ce:	4b37      	ldr	r3, [pc, #220]	; (80192ac <scalbn+0x104>)
 80191d0:	429e      	cmp	r6, r3
 80191d2:	4604      	mov	r4, r0
 80191d4:	460d      	mov	r5, r1
 80191d6:	da10      	bge.n	80191fa <scalbn+0x52>
 80191d8:	a32b      	add	r3, pc, #172	; (adr r3, 8019288 <scalbn+0xe0>)
 80191da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191de:	e03a      	b.n	8019256 <scalbn+0xae>
 80191e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80191e4:	428a      	cmp	r2, r1
 80191e6:	d10c      	bne.n	8019202 <scalbn+0x5a>
 80191e8:	ee10 2a10 	vmov	r2, s0
 80191ec:	4620      	mov	r0, r4
 80191ee:	4629      	mov	r1, r5
 80191f0:	f7e7 f856 	bl	80002a0 <__adddf3>
 80191f4:	4604      	mov	r4, r0
 80191f6:	460d      	mov	r5, r1
 80191f8:	e019      	b.n	801922e <scalbn+0x86>
 80191fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80191fe:	460b      	mov	r3, r1
 8019200:	3a36      	subs	r2, #54	; 0x36
 8019202:	4432      	add	r2, r6
 8019204:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019208:	428a      	cmp	r2, r1
 801920a:	dd08      	ble.n	801921e <scalbn+0x76>
 801920c:	2d00      	cmp	r5, #0
 801920e:	a120      	add	r1, pc, #128	; (adr r1, 8019290 <scalbn+0xe8>)
 8019210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019214:	da1c      	bge.n	8019250 <scalbn+0xa8>
 8019216:	a120      	add	r1, pc, #128	; (adr r1, 8019298 <scalbn+0xf0>)
 8019218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801921c:	e018      	b.n	8019250 <scalbn+0xa8>
 801921e:	2a00      	cmp	r2, #0
 8019220:	dd08      	ble.n	8019234 <scalbn+0x8c>
 8019222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801922a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801922e:	ec45 4b10 	vmov	d0, r4, r5
 8019232:	bd70      	pop	{r4, r5, r6, pc}
 8019234:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019238:	da19      	bge.n	801926e <scalbn+0xc6>
 801923a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801923e:	429e      	cmp	r6, r3
 8019240:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019244:	dd0a      	ble.n	801925c <scalbn+0xb4>
 8019246:	a112      	add	r1, pc, #72	; (adr r1, 8019290 <scalbn+0xe8>)
 8019248:	e9d1 0100 	ldrd	r0, r1, [r1]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d1e2      	bne.n	8019216 <scalbn+0x6e>
 8019250:	a30f      	add	r3, pc, #60	; (adr r3, 8019290 <scalbn+0xe8>)
 8019252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019256:	f7e7 f9d9 	bl	800060c <__aeabi_dmul>
 801925a:	e7cb      	b.n	80191f4 <scalbn+0x4c>
 801925c:	a10a      	add	r1, pc, #40	; (adr r1, 8019288 <scalbn+0xe0>)
 801925e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d0b8      	beq.n	80191d8 <scalbn+0x30>
 8019266:	a10e      	add	r1, pc, #56	; (adr r1, 80192a0 <scalbn+0xf8>)
 8019268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801926c:	e7b4      	b.n	80191d8 <scalbn+0x30>
 801926e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019272:	3236      	adds	r2, #54	; 0x36
 8019274:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019278:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801927c:	4620      	mov	r0, r4
 801927e:	4b0c      	ldr	r3, [pc, #48]	; (80192b0 <scalbn+0x108>)
 8019280:	2200      	movs	r2, #0
 8019282:	e7e8      	b.n	8019256 <scalbn+0xae>
 8019284:	f3af 8000 	nop.w
 8019288:	c2f8f359 	.word	0xc2f8f359
 801928c:	01a56e1f 	.word	0x01a56e1f
 8019290:	8800759c 	.word	0x8800759c
 8019294:	7e37e43c 	.word	0x7e37e43c
 8019298:	8800759c 	.word	0x8800759c
 801929c:	fe37e43c 	.word	0xfe37e43c
 80192a0:	c2f8f359 	.word	0xc2f8f359
 80192a4:	81a56e1f 	.word	0x81a56e1f
 80192a8:	43500000 	.word	0x43500000
 80192ac:	ffff3cb0 	.word	0xffff3cb0
 80192b0:	3c900000 	.word	0x3c900000

080192b4 <finitef>:
 80192b4:	b082      	sub	sp, #8
 80192b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80192ba:	9801      	ldr	r0, [sp, #4]
 80192bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80192c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80192c4:	bfac      	ite	ge
 80192c6:	2000      	movge	r0, #0
 80192c8:	2001      	movlt	r0, #1
 80192ca:	b002      	add	sp, #8
 80192cc:	4770      	bx	lr
	...

080192d0 <nanf>:
 80192d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80192d8 <nanf+0x8>
 80192d4:	4770      	bx	lr
 80192d6:	bf00      	nop
 80192d8:	7fc00000 	.word	0x7fc00000

080192dc <abort>:
 80192dc:	b508      	push	{r3, lr}
 80192de:	2006      	movs	r0, #6
 80192e0:	f000 fcc6 	bl	8019c70 <raise>
 80192e4:	2001      	movs	r0, #1
 80192e6:	f7eb f891 	bl	800440c <_exit>
	...

080192ec <__assert_func>:
 80192ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192ee:	4614      	mov	r4, r2
 80192f0:	461a      	mov	r2, r3
 80192f2:	4b09      	ldr	r3, [pc, #36]	; (8019318 <__assert_func+0x2c>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	4605      	mov	r5, r0
 80192f8:	68d8      	ldr	r0, [r3, #12]
 80192fa:	b14c      	cbz	r4, 8019310 <__assert_func+0x24>
 80192fc:	4b07      	ldr	r3, [pc, #28]	; (801931c <__assert_func+0x30>)
 80192fe:	9100      	str	r1, [sp, #0]
 8019300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019304:	4906      	ldr	r1, [pc, #24]	; (8019320 <__assert_func+0x34>)
 8019306:	462b      	mov	r3, r5
 8019308:	f000 f81c 	bl	8019344 <fiprintf>
 801930c:	f7ff ffe6 	bl	80192dc <abort>
 8019310:	4b04      	ldr	r3, [pc, #16]	; (8019324 <__assert_func+0x38>)
 8019312:	461c      	mov	r4, r3
 8019314:	e7f3      	b.n	80192fe <__assert_func+0x12>
 8019316:	bf00      	nop
 8019318:	20000258 	.word	0x20000258
 801931c:	0801c9e8 	.word	0x0801c9e8
 8019320:	0801c9f5 	.word	0x0801c9f5
 8019324:	0801ca23 	.word	0x0801ca23

08019328 <calloc>:
 8019328:	4b02      	ldr	r3, [pc, #8]	; (8019334 <calloc+0xc>)
 801932a:	460a      	mov	r2, r1
 801932c:	4601      	mov	r1, r0
 801932e:	6818      	ldr	r0, [r3, #0]
 8019330:	f000 b882 	b.w	8019438 <_calloc_r>
 8019334:	20000258 	.word	0x20000258

08019338 <__errno>:
 8019338:	4b01      	ldr	r3, [pc, #4]	; (8019340 <__errno+0x8>)
 801933a:	6818      	ldr	r0, [r3, #0]
 801933c:	4770      	bx	lr
 801933e:	bf00      	nop
 8019340:	20000258 	.word	0x20000258

08019344 <fiprintf>:
 8019344:	b40e      	push	{r1, r2, r3}
 8019346:	b503      	push	{r0, r1, lr}
 8019348:	4601      	mov	r1, r0
 801934a:	ab03      	add	r3, sp, #12
 801934c:	4805      	ldr	r0, [pc, #20]	; (8019364 <fiprintf+0x20>)
 801934e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019352:	6800      	ldr	r0, [r0, #0]
 8019354:	9301      	str	r3, [sp, #4]
 8019356:	f000 f98f 	bl	8019678 <_vfiprintf_r>
 801935a:	b002      	add	sp, #8
 801935c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019360:	b003      	add	sp, #12
 8019362:	4770      	bx	lr
 8019364:	20000258 	.word	0x20000258

08019368 <__libc_init_array>:
 8019368:	b570      	push	{r4, r5, r6, lr}
 801936a:	4d0d      	ldr	r5, [pc, #52]	; (80193a0 <__libc_init_array+0x38>)
 801936c:	4c0d      	ldr	r4, [pc, #52]	; (80193a4 <__libc_init_array+0x3c>)
 801936e:	1b64      	subs	r4, r4, r5
 8019370:	10a4      	asrs	r4, r4, #2
 8019372:	2600      	movs	r6, #0
 8019374:	42a6      	cmp	r6, r4
 8019376:	d109      	bne.n	801938c <__libc_init_array+0x24>
 8019378:	4d0b      	ldr	r5, [pc, #44]	; (80193a8 <__libc_init_array+0x40>)
 801937a:	4c0c      	ldr	r4, [pc, #48]	; (80193ac <__libc_init_array+0x44>)
 801937c:	f001 f9da 	bl	801a734 <_init>
 8019380:	1b64      	subs	r4, r4, r5
 8019382:	10a4      	asrs	r4, r4, #2
 8019384:	2600      	movs	r6, #0
 8019386:	42a6      	cmp	r6, r4
 8019388:	d105      	bne.n	8019396 <__libc_init_array+0x2e>
 801938a:	bd70      	pop	{r4, r5, r6, pc}
 801938c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019390:	4798      	blx	r3
 8019392:	3601      	adds	r6, #1
 8019394:	e7ee      	b.n	8019374 <__libc_init_array+0xc>
 8019396:	f855 3b04 	ldr.w	r3, [r5], #4
 801939a:	4798      	blx	r3
 801939c:	3601      	adds	r6, #1
 801939e:	e7f2      	b.n	8019386 <__libc_init_array+0x1e>
 80193a0:	0801cac4 	.word	0x0801cac4
 80193a4:	0801cac4 	.word	0x0801cac4
 80193a8:	0801cac4 	.word	0x0801cac4
 80193ac:	0801cacc 	.word	0x0801cacc

080193b0 <__retarget_lock_init_recursive>:
 80193b0:	4770      	bx	lr

080193b2 <__retarget_lock_acquire_recursive>:
 80193b2:	4770      	bx	lr

080193b4 <__retarget_lock_release_recursive>:
 80193b4:	4770      	bx	lr
	...

080193b8 <malloc>:
 80193b8:	4b02      	ldr	r3, [pc, #8]	; (80193c4 <malloc+0xc>)
 80193ba:	4601      	mov	r1, r0
 80193bc:	6818      	ldr	r0, [r3, #0]
 80193be:	f000 b8bd 	b.w	801953c <_malloc_r>
 80193c2:	bf00      	nop
 80193c4:	20000258 	.word	0x20000258

080193c8 <free>:
 80193c8:	4b02      	ldr	r3, [pc, #8]	; (80193d4 <free+0xc>)
 80193ca:	4601      	mov	r1, r0
 80193cc:	6818      	ldr	r0, [r3, #0]
 80193ce:	f000 b849 	b.w	8019464 <_free_r>
 80193d2:	bf00      	nop
 80193d4:	20000258 	.word	0x20000258

080193d8 <memcpy>:
 80193d8:	440a      	add	r2, r1
 80193da:	4291      	cmp	r1, r2
 80193dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80193e0:	d100      	bne.n	80193e4 <memcpy+0xc>
 80193e2:	4770      	bx	lr
 80193e4:	b510      	push	{r4, lr}
 80193e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193ee:	4291      	cmp	r1, r2
 80193f0:	d1f9      	bne.n	80193e6 <memcpy+0xe>
 80193f2:	bd10      	pop	{r4, pc}

080193f4 <memmove>:
 80193f4:	4288      	cmp	r0, r1
 80193f6:	b510      	push	{r4, lr}
 80193f8:	eb01 0402 	add.w	r4, r1, r2
 80193fc:	d902      	bls.n	8019404 <memmove+0x10>
 80193fe:	4284      	cmp	r4, r0
 8019400:	4623      	mov	r3, r4
 8019402:	d807      	bhi.n	8019414 <memmove+0x20>
 8019404:	1e43      	subs	r3, r0, #1
 8019406:	42a1      	cmp	r1, r4
 8019408:	d008      	beq.n	801941c <memmove+0x28>
 801940a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801940e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019412:	e7f8      	b.n	8019406 <memmove+0x12>
 8019414:	4402      	add	r2, r0
 8019416:	4601      	mov	r1, r0
 8019418:	428a      	cmp	r2, r1
 801941a:	d100      	bne.n	801941e <memmove+0x2a>
 801941c:	bd10      	pop	{r4, pc}
 801941e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019426:	e7f7      	b.n	8019418 <memmove+0x24>

08019428 <memset>:
 8019428:	4402      	add	r2, r0
 801942a:	4603      	mov	r3, r0
 801942c:	4293      	cmp	r3, r2
 801942e:	d100      	bne.n	8019432 <memset+0xa>
 8019430:	4770      	bx	lr
 8019432:	f803 1b01 	strb.w	r1, [r3], #1
 8019436:	e7f9      	b.n	801942c <memset+0x4>

08019438 <_calloc_r>:
 8019438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801943a:	fba1 2402 	umull	r2, r4, r1, r2
 801943e:	b94c      	cbnz	r4, 8019454 <_calloc_r+0x1c>
 8019440:	4611      	mov	r1, r2
 8019442:	9201      	str	r2, [sp, #4]
 8019444:	f000 f87a 	bl	801953c <_malloc_r>
 8019448:	9a01      	ldr	r2, [sp, #4]
 801944a:	4605      	mov	r5, r0
 801944c:	b930      	cbnz	r0, 801945c <_calloc_r+0x24>
 801944e:	4628      	mov	r0, r5
 8019450:	b003      	add	sp, #12
 8019452:	bd30      	pop	{r4, r5, pc}
 8019454:	220c      	movs	r2, #12
 8019456:	6002      	str	r2, [r0, #0]
 8019458:	2500      	movs	r5, #0
 801945a:	e7f8      	b.n	801944e <_calloc_r+0x16>
 801945c:	4621      	mov	r1, r4
 801945e:	f7ff ffe3 	bl	8019428 <memset>
 8019462:	e7f4      	b.n	801944e <_calloc_r+0x16>

08019464 <_free_r>:
 8019464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019466:	2900      	cmp	r1, #0
 8019468:	d044      	beq.n	80194f4 <_free_r+0x90>
 801946a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801946e:	9001      	str	r0, [sp, #4]
 8019470:	2b00      	cmp	r3, #0
 8019472:	f1a1 0404 	sub.w	r4, r1, #4
 8019476:	bfb8      	it	lt
 8019478:	18e4      	addlt	r4, r4, r3
 801947a:	f000 ff11 	bl	801a2a0 <__malloc_lock>
 801947e:	4a1e      	ldr	r2, [pc, #120]	; (80194f8 <_free_r+0x94>)
 8019480:	9801      	ldr	r0, [sp, #4]
 8019482:	6813      	ldr	r3, [r2, #0]
 8019484:	b933      	cbnz	r3, 8019494 <_free_r+0x30>
 8019486:	6063      	str	r3, [r4, #4]
 8019488:	6014      	str	r4, [r2, #0]
 801948a:	b003      	add	sp, #12
 801948c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019490:	f000 bf0c 	b.w	801a2ac <__malloc_unlock>
 8019494:	42a3      	cmp	r3, r4
 8019496:	d908      	bls.n	80194aa <_free_r+0x46>
 8019498:	6825      	ldr	r5, [r4, #0]
 801949a:	1961      	adds	r1, r4, r5
 801949c:	428b      	cmp	r3, r1
 801949e:	bf01      	itttt	eq
 80194a0:	6819      	ldreq	r1, [r3, #0]
 80194a2:	685b      	ldreq	r3, [r3, #4]
 80194a4:	1949      	addeq	r1, r1, r5
 80194a6:	6021      	streq	r1, [r4, #0]
 80194a8:	e7ed      	b.n	8019486 <_free_r+0x22>
 80194aa:	461a      	mov	r2, r3
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	b10b      	cbz	r3, 80194b4 <_free_r+0x50>
 80194b0:	42a3      	cmp	r3, r4
 80194b2:	d9fa      	bls.n	80194aa <_free_r+0x46>
 80194b4:	6811      	ldr	r1, [r2, #0]
 80194b6:	1855      	adds	r5, r2, r1
 80194b8:	42a5      	cmp	r5, r4
 80194ba:	d10b      	bne.n	80194d4 <_free_r+0x70>
 80194bc:	6824      	ldr	r4, [r4, #0]
 80194be:	4421      	add	r1, r4
 80194c0:	1854      	adds	r4, r2, r1
 80194c2:	42a3      	cmp	r3, r4
 80194c4:	6011      	str	r1, [r2, #0]
 80194c6:	d1e0      	bne.n	801948a <_free_r+0x26>
 80194c8:	681c      	ldr	r4, [r3, #0]
 80194ca:	685b      	ldr	r3, [r3, #4]
 80194cc:	6053      	str	r3, [r2, #4]
 80194ce:	4421      	add	r1, r4
 80194d0:	6011      	str	r1, [r2, #0]
 80194d2:	e7da      	b.n	801948a <_free_r+0x26>
 80194d4:	d902      	bls.n	80194dc <_free_r+0x78>
 80194d6:	230c      	movs	r3, #12
 80194d8:	6003      	str	r3, [r0, #0]
 80194da:	e7d6      	b.n	801948a <_free_r+0x26>
 80194dc:	6825      	ldr	r5, [r4, #0]
 80194de:	1961      	adds	r1, r4, r5
 80194e0:	428b      	cmp	r3, r1
 80194e2:	bf04      	itt	eq
 80194e4:	6819      	ldreq	r1, [r3, #0]
 80194e6:	685b      	ldreq	r3, [r3, #4]
 80194e8:	6063      	str	r3, [r4, #4]
 80194ea:	bf04      	itt	eq
 80194ec:	1949      	addeq	r1, r1, r5
 80194ee:	6021      	streq	r1, [r4, #0]
 80194f0:	6054      	str	r4, [r2, #4]
 80194f2:	e7ca      	b.n	801948a <_free_r+0x26>
 80194f4:	b003      	add	sp, #12
 80194f6:	bd30      	pop	{r4, r5, pc}
 80194f8:	2000252c 	.word	0x2000252c

080194fc <sbrk_aligned>:
 80194fc:	b570      	push	{r4, r5, r6, lr}
 80194fe:	4e0e      	ldr	r6, [pc, #56]	; (8019538 <sbrk_aligned+0x3c>)
 8019500:	460c      	mov	r4, r1
 8019502:	6831      	ldr	r1, [r6, #0]
 8019504:	4605      	mov	r5, r0
 8019506:	b911      	cbnz	r1, 801950e <sbrk_aligned+0x12>
 8019508:	f000 fb7a 	bl	8019c00 <_sbrk_r>
 801950c:	6030      	str	r0, [r6, #0]
 801950e:	4621      	mov	r1, r4
 8019510:	4628      	mov	r0, r5
 8019512:	f000 fb75 	bl	8019c00 <_sbrk_r>
 8019516:	1c43      	adds	r3, r0, #1
 8019518:	d00a      	beq.n	8019530 <sbrk_aligned+0x34>
 801951a:	1cc4      	adds	r4, r0, #3
 801951c:	f024 0403 	bic.w	r4, r4, #3
 8019520:	42a0      	cmp	r0, r4
 8019522:	d007      	beq.n	8019534 <sbrk_aligned+0x38>
 8019524:	1a21      	subs	r1, r4, r0
 8019526:	4628      	mov	r0, r5
 8019528:	f000 fb6a 	bl	8019c00 <_sbrk_r>
 801952c:	3001      	adds	r0, #1
 801952e:	d101      	bne.n	8019534 <sbrk_aligned+0x38>
 8019530:	f04f 34ff 	mov.w	r4, #4294967295
 8019534:	4620      	mov	r0, r4
 8019536:	bd70      	pop	{r4, r5, r6, pc}
 8019538:	20002530 	.word	0x20002530

0801953c <_malloc_r>:
 801953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019540:	1ccd      	adds	r5, r1, #3
 8019542:	f025 0503 	bic.w	r5, r5, #3
 8019546:	3508      	adds	r5, #8
 8019548:	2d0c      	cmp	r5, #12
 801954a:	bf38      	it	cc
 801954c:	250c      	movcc	r5, #12
 801954e:	2d00      	cmp	r5, #0
 8019550:	4607      	mov	r7, r0
 8019552:	db01      	blt.n	8019558 <_malloc_r+0x1c>
 8019554:	42a9      	cmp	r1, r5
 8019556:	d905      	bls.n	8019564 <_malloc_r+0x28>
 8019558:	230c      	movs	r3, #12
 801955a:	603b      	str	r3, [r7, #0]
 801955c:	2600      	movs	r6, #0
 801955e:	4630      	mov	r0, r6
 8019560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019564:	4e2e      	ldr	r6, [pc, #184]	; (8019620 <_malloc_r+0xe4>)
 8019566:	f000 fe9b 	bl	801a2a0 <__malloc_lock>
 801956a:	6833      	ldr	r3, [r6, #0]
 801956c:	461c      	mov	r4, r3
 801956e:	bb34      	cbnz	r4, 80195be <_malloc_r+0x82>
 8019570:	4629      	mov	r1, r5
 8019572:	4638      	mov	r0, r7
 8019574:	f7ff ffc2 	bl	80194fc <sbrk_aligned>
 8019578:	1c43      	adds	r3, r0, #1
 801957a:	4604      	mov	r4, r0
 801957c:	d14d      	bne.n	801961a <_malloc_r+0xde>
 801957e:	6834      	ldr	r4, [r6, #0]
 8019580:	4626      	mov	r6, r4
 8019582:	2e00      	cmp	r6, #0
 8019584:	d140      	bne.n	8019608 <_malloc_r+0xcc>
 8019586:	6823      	ldr	r3, [r4, #0]
 8019588:	4631      	mov	r1, r6
 801958a:	4638      	mov	r0, r7
 801958c:	eb04 0803 	add.w	r8, r4, r3
 8019590:	f000 fb36 	bl	8019c00 <_sbrk_r>
 8019594:	4580      	cmp	r8, r0
 8019596:	d13a      	bne.n	801960e <_malloc_r+0xd2>
 8019598:	6821      	ldr	r1, [r4, #0]
 801959a:	3503      	adds	r5, #3
 801959c:	1a6d      	subs	r5, r5, r1
 801959e:	f025 0503 	bic.w	r5, r5, #3
 80195a2:	3508      	adds	r5, #8
 80195a4:	2d0c      	cmp	r5, #12
 80195a6:	bf38      	it	cc
 80195a8:	250c      	movcc	r5, #12
 80195aa:	4629      	mov	r1, r5
 80195ac:	4638      	mov	r0, r7
 80195ae:	f7ff ffa5 	bl	80194fc <sbrk_aligned>
 80195b2:	3001      	adds	r0, #1
 80195b4:	d02b      	beq.n	801960e <_malloc_r+0xd2>
 80195b6:	6823      	ldr	r3, [r4, #0]
 80195b8:	442b      	add	r3, r5
 80195ba:	6023      	str	r3, [r4, #0]
 80195bc:	e00e      	b.n	80195dc <_malloc_r+0xa0>
 80195be:	6822      	ldr	r2, [r4, #0]
 80195c0:	1b52      	subs	r2, r2, r5
 80195c2:	d41e      	bmi.n	8019602 <_malloc_r+0xc6>
 80195c4:	2a0b      	cmp	r2, #11
 80195c6:	d916      	bls.n	80195f6 <_malloc_r+0xba>
 80195c8:	1961      	adds	r1, r4, r5
 80195ca:	42a3      	cmp	r3, r4
 80195cc:	6025      	str	r5, [r4, #0]
 80195ce:	bf18      	it	ne
 80195d0:	6059      	strne	r1, [r3, #4]
 80195d2:	6863      	ldr	r3, [r4, #4]
 80195d4:	bf08      	it	eq
 80195d6:	6031      	streq	r1, [r6, #0]
 80195d8:	5162      	str	r2, [r4, r5]
 80195da:	604b      	str	r3, [r1, #4]
 80195dc:	4638      	mov	r0, r7
 80195de:	f104 060b 	add.w	r6, r4, #11
 80195e2:	f000 fe63 	bl	801a2ac <__malloc_unlock>
 80195e6:	f026 0607 	bic.w	r6, r6, #7
 80195ea:	1d23      	adds	r3, r4, #4
 80195ec:	1af2      	subs	r2, r6, r3
 80195ee:	d0b6      	beq.n	801955e <_malloc_r+0x22>
 80195f0:	1b9b      	subs	r3, r3, r6
 80195f2:	50a3      	str	r3, [r4, r2]
 80195f4:	e7b3      	b.n	801955e <_malloc_r+0x22>
 80195f6:	6862      	ldr	r2, [r4, #4]
 80195f8:	42a3      	cmp	r3, r4
 80195fa:	bf0c      	ite	eq
 80195fc:	6032      	streq	r2, [r6, #0]
 80195fe:	605a      	strne	r2, [r3, #4]
 8019600:	e7ec      	b.n	80195dc <_malloc_r+0xa0>
 8019602:	4623      	mov	r3, r4
 8019604:	6864      	ldr	r4, [r4, #4]
 8019606:	e7b2      	b.n	801956e <_malloc_r+0x32>
 8019608:	4634      	mov	r4, r6
 801960a:	6876      	ldr	r6, [r6, #4]
 801960c:	e7b9      	b.n	8019582 <_malloc_r+0x46>
 801960e:	230c      	movs	r3, #12
 8019610:	603b      	str	r3, [r7, #0]
 8019612:	4638      	mov	r0, r7
 8019614:	f000 fe4a 	bl	801a2ac <__malloc_unlock>
 8019618:	e7a1      	b.n	801955e <_malloc_r+0x22>
 801961a:	6025      	str	r5, [r4, #0]
 801961c:	e7de      	b.n	80195dc <_malloc_r+0xa0>
 801961e:	bf00      	nop
 8019620:	2000252c 	.word	0x2000252c

08019624 <__sfputc_r>:
 8019624:	6893      	ldr	r3, [r2, #8]
 8019626:	3b01      	subs	r3, #1
 8019628:	2b00      	cmp	r3, #0
 801962a:	b410      	push	{r4}
 801962c:	6093      	str	r3, [r2, #8]
 801962e:	da08      	bge.n	8019642 <__sfputc_r+0x1e>
 8019630:	6994      	ldr	r4, [r2, #24]
 8019632:	42a3      	cmp	r3, r4
 8019634:	db01      	blt.n	801963a <__sfputc_r+0x16>
 8019636:	290a      	cmp	r1, #10
 8019638:	d103      	bne.n	8019642 <__sfputc_r+0x1e>
 801963a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801963e:	f000 bb53 	b.w	8019ce8 <__swbuf_r>
 8019642:	6813      	ldr	r3, [r2, #0]
 8019644:	1c58      	adds	r0, r3, #1
 8019646:	6010      	str	r0, [r2, #0]
 8019648:	7019      	strb	r1, [r3, #0]
 801964a:	4608      	mov	r0, r1
 801964c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019650:	4770      	bx	lr

08019652 <__sfputs_r>:
 8019652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019654:	4606      	mov	r6, r0
 8019656:	460f      	mov	r7, r1
 8019658:	4614      	mov	r4, r2
 801965a:	18d5      	adds	r5, r2, r3
 801965c:	42ac      	cmp	r4, r5
 801965e:	d101      	bne.n	8019664 <__sfputs_r+0x12>
 8019660:	2000      	movs	r0, #0
 8019662:	e007      	b.n	8019674 <__sfputs_r+0x22>
 8019664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019668:	463a      	mov	r2, r7
 801966a:	4630      	mov	r0, r6
 801966c:	f7ff ffda 	bl	8019624 <__sfputc_r>
 8019670:	1c43      	adds	r3, r0, #1
 8019672:	d1f3      	bne.n	801965c <__sfputs_r+0xa>
 8019674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019678 <_vfiprintf_r>:
 8019678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801967c:	460d      	mov	r5, r1
 801967e:	b09d      	sub	sp, #116	; 0x74
 8019680:	4614      	mov	r4, r2
 8019682:	4698      	mov	r8, r3
 8019684:	4606      	mov	r6, r0
 8019686:	b118      	cbz	r0, 8019690 <_vfiprintf_r+0x18>
 8019688:	6983      	ldr	r3, [r0, #24]
 801968a:	b90b      	cbnz	r3, 8019690 <_vfiprintf_r+0x18>
 801968c:	f000 fd06 	bl	801a09c <__sinit>
 8019690:	4b89      	ldr	r3, [pc, #548]	; (80198b8 <_vfiprintf_r+0x240>)
 8019692:	429d      	cmp	r5, r3
 8019694:	d11b      	bne.n	80196ce <_vfiprintf_r+0x56>
 8019696:	6875      	ldr	r5, [r6, #4]
 8019698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801969a:	07d9      	lsls	r1, r3, #31
 801969c:	d405      	bmi.n	80196aa <_vfiprintf_r+0x32>
 801969e:	89ab      	ldrh	r3, [r5, #12]
 80196a0:	059a      	lsls	r2, r3, #22
 80196a2:	d402      	bmi.n	80196aa <_vfiprintf_r+0x32>
 80196a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196a6:	f7ff fe84 	bl	80193b2 <__retarget_lock_acquire_recursive>
 80196aa:	89ab      	ldrh	r3, [r5, #12]
 80196ac:	071b      	lsls	r3, r3, #28
 80196ae:	d501      	bpl.n	80196b4 <_vfiprintf_r+0x3c>
 80196b0:	692b      	ldr	r3, [r5, #16]
 80196b2:	b9eb      	cbnz	r3, 80196f0 <_vfiprintf_r+0x78>
 80196b4:	4629      	mov	r1, r5
 80196b6:	4630      	mov	r0, r6
 80196b8:	f000 fb68 	bl	8019d8c <__swsetup_r>
 80196bc:	b1c0      	cbz	r0, 80196f0 <_vfiprintf_r+0x78>
 80196be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196c0:	07dc      	lsls	r4, r3, #31
 80196c2:	d50e      	bpl.n	80196e2 <_vfiprintf_r+0x6a>
 80196c4:	f04f 30ff 	mov.w	r0, #4294967295
 80196c8:	b01d      	add	sp, #116	; 0x74
 80196ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ce:	4b7b      	ldr	r3, [pc, #492]	; (80198bc <_vfiprintf_r+0x244>)
 80196d0:	429d      	cmp	r5, r3
 80196d2:	d101      	bne.n	80196d8 <_vfiprintf_r+0x60>
 80196d4:	68b5      	ldr	r5, [r6, #8]
 80196d6:	e7df      	b.n	8019698 <_vfiprintf_r+0x20>
 80196d8:	4b79      	ldr	r3, [pc, #484]	; (80198c0 <_vfiprintf_r+0x248>)
 80196da:	429d      	cmp	r5, r3
 80196dc:	bf08      	it	eq
 80196de:	68f5      	ldreq	r5, [r6, #12]
 80196e0:	e7da      	b.n	8019698 <_vfiprintf_r+0x20>
 80196e2:	89ab      	ldrh	r3, [r5, #12]
 80196e4:	0598      	lsls	r0, r3, #22
 80196e6:	d4ed      	bmi.n	80196c4 <_vfiprintf_r+0x4c>
 80196e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196ea:	f7ff fe63 	bl	80193b4 <__retarget_lock_release_recursive>
 80196ee:	e7e9      	b.n	80196c4 <_vfiprintf_r+0x4c>
 80196f0:	2300      	movs	r3, #0
 80196f2:	9309      	str	r3, [sp, #36]	; 0x24
 80196f4:	2320      	movs	r3, #32
 80196f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80196fe:	2330      	movs	r3, #48	; 0x30
 8019700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80198c4 <_vfiprintf_r+0x24c>
 8019704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019708:	f04f 0901 	mov.w	r9, #1
 801970c:	4623      	mov	r3, r4
 801970e:	469a      	mov	sl, r3
 8019710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019714:	b10a      	cbz	r2, 801971a <_vfiprintf_r+0xa2>
 8019716:	2a25      	cmp	r2, #37	; 0x25
 8019718:	d1f9      	bne.n	801970e <_vfiprintf_r+0x96>
 801971a:	ebba 0b04 	subs.w	fp, sl, r4
 801971e:	d00b      	beq.n	8019738 <_vfiprintf_r+0xc0>
 8019720:	465b      	mov	r3, fp
 8019722:	4622      	mov	r2, r4
 8019724:	4629      	mov	r1, r5
 8019726:	4630      	mov	r0, r6
 8019728:	f7ff ff93 	bl	8019652 <__sfputs_r>
 801972c:	3001      	adds	r0, #1
 801972e:	f000 80aa 	beq.w	8019886 <_vfiprintf_r+0x20e>
 8019732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019734:	445a      	add	r2, fp
 8019736:	9209      	str	r2, [sp, #36]	; 0x24
 8019738:	f89a 3000 	ldrb.w	r3, [sl]
 801973c:	2b00      	cmp	r3, #0
 801973e:	f000 80a2 	beq.w	8019886 <_vfiprintf_r+0x20e>
 8019742:	2300      	movs	r3, #0
 8019744:	f04f 32ff 	mov.w	r2, #4294967295
 8019748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801974c:	f10a 0a01 	add.w	sl, sl, #1
 8019750:	9304      	str	r3, [sp, #16]
 8019752:	9307      	str	r3, [sp, #28]
 8019754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019758:	931a      	str	r3, [sp, #104]	; 0x68
 801975a:	4654      	mov	r4, sl
 801975c:	2205      	movs	r2, #5
 801975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019762:	4858      	ldr	r0, [pc, #352]	; (80198c4 <_vfiprintf_r+0x24c>)
 8019764:	f7e6 fd34 	bl	80001d0 <memchr>
 8019768:	9a04      	ldr	r2, [sp, #16]
 801976a:	b9d8      	cbnz	r0, 80197a4 <_vfiprintf_r+0x12c>
 801976c:	06d1      	lsls	r1, r2, #27
 801976e:	bf44      	itt	mi
 8019770:	2320      	movmi	r3, #32
 8019772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019776:	0713      	lsls	r3, r2, #28
 8019778:	bf44      	itt	mi
 801977a:	232b      	movmi	r3, #43	; 0x2b
 801977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019780:	f89a 3000 	ldrb.w	r3, [sl]
 8019784:	2b2a      	cmp	r3, #42	; 0x2a
 8019786:	d015      	beq.n	80197b4 <_vfiprintf_r+0x13c>
 8019788:	9a07      	ldr	r2, [sp, #28]
 801978a:	4654      	mov	r4, sl
 801978c:	2000      	movs	r0, #0
 801978e:	f04f 0c0a 	mov.w	ip, #10
 8019792:	4621      	mov	r1, r4
 8019794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019798:	3b30      	subs	r3, #48	; 0x30
 801979a:	2b09      	cmp	r3, #9
 801979c:	d94e      	bls.n	801983c <_vfiprintf_r+0x1c4>
 801979e:	b1b0      	cbz	r0, 80197ce <_vfiprintf_r+0x156>
 80197a0:	9207      	str	r2, [sp, #28]
 80197a2:	e014      	b.n	80197ce <_vfiprintf_r+0x156>
 80197a4:	eba0 0308 	sub.w	r3, r0, r8
 80197a8:	fa09 f303 	lsl.w	r3, r9, r3
 80197ac:	4313      	orrs	r3, r2
 80197ae:	9304      	str	r3, [sp, #16]
 80197b0:	46a2      	mov	sl, r4
 80197b2:	e7d2      	b.n	801975a <_vfiprintf_r+0xe2>
 80197b4:	9b03      	ldr	r3, [sp, #12]
 80197b6:	1d19      	adds	r1, r3, #4
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	9103      	str	r1, [sp, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	bfbb      	ittet	lt
 80197c0:	425b      	neglt	r3, r3
 80197c2:	f042 0202 	orrlt.w	r2, r2, #2
 80197c6:	9307      	strge	r3, [sp, #28]
 80197c8:	9307      	strlt	r3, [sp, #28]
 80197ca:	bfb8      	it	lt
 80197cc:	9204      	strlt	r2, [sp, #16]
 80197ce:	7823      	ldrb	r3, [r4, #0]
 80197d0:	2b2e      	cmp	r3, #46	; 0x2e
 80197d2:	d10c      	bne.n	80197ee <_vfiprintf_r+0x176>
 80197d4:	7863      	ldrb	r3, [r4, #1]
 80197d6:	2b2a      	cmp	r3, #42	; 0x2a
 80197d8:	d135      	bne.n	8019846 <_vfiprintf_r+0x1ce>
 80197da:	9b03      	ldr	r3, [sp, #12]
 80197dc:	1d1a      	adds	r2, r3, #4
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	9203      	str	r2, [sp, #12]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	bfb8      	it	lt
 80197e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80197ea:	3402      	adds	r4, #2
 80197ec:	9305      	str	r3, [sp, #20]
 80197ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80198d4 <_vfiprintf_r+0x25c>
 80197f2:	7821      	ldrb	r1, [r4, #0]
 80197f4:	2203      	movs	r2, #3
 80197f6:	4650      	mov	r0, sl
 80197f8:	f7e6 fcea 	bl	80001d0 <memchr>
 80197fc:	b140      	cbz	r0, 8019810 <_vfiprintf_r+0x198>
 80197fe:	2340      	movs	r3, #64	; 0x40
 8019800:	eba0 000a 	sub.w	r0, r0, sl
 8019804:	fa03 f000 	lsl.w	r0, r3, r0
 8019808:	9b04      	ldr	r3, [sp, #16]
 801980a:	4303      	orrs	r3, r0
 801980c:	3401      	adds	r4, #1
 801980e:	9304      	str	r3, [sp, #16]
 8019810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019814:	482c      	ldr	r0, [pc, #176]	; (80198c8 <_vfiprintf_r+0x250>)
 8019816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801981a:	2206      	movs	r2, #6
 801981c:	f7e6 fcd8 	bl	80001d0 <memchr>
 8019820:	2800      	cmp	r0, #0
 8019822:	d03f      	beq.n	80198a4 <_vfiprintf_r+0x22c>
 8019824:	4b29      	ldr	r3, [pc, #164]	; (80198cc <_vfiprintf_r+0x254>)
 8019826:	bb1b      	cbnz	r3, 8019870 <_vfiprintf_r+0x1f8>
 8019828:	9b03      	ldr	r3, [sp, #12]
 801982a:	3307      	adds	r3, #7
 801982c:	f023 0307 	bic.w	r3, r3, #7
 8019830:	3308      	adds	r3, #8
 8019832:	9303      	str	r3, [sp, #12]
 8019834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019836:	443b      	add	r3, r7
 8019838:	9309      	str	r3, [sp, #36]	; 0x24
 801983a:	e767      	b.n	801970c <_vfiprintf_r+0x94>
 801983c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019840:	460c      	mov	r4, r1
 8019842:	2001      	movs	r0, #1
 8019844:	e7a5      	b.n	8019792 <_vfiprintf_r+0x11a>
 8019846:	2300      	movs	r3, #0
 8019848:	3401      	adds	r4, #1
 801984a:	9305      	str	r3, [sp, #20]
 801984c:	4619      	mov	r1, r3
 801984e:	f04f 0c0a 	mov.w	ip, #10
 8019852:	4620      	mov	r0, r4
 8019854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019858:	3a30      	subs	r2, #48	; 0x30
 801985a:	2a09      	cmp	r2, #9
 801985c:	d903      	bls.n	8019866 <_vfiprintf_r+0x1ee>
 801985e:	2b00      	cmp	r3, #0
 8019860:	d0c5      	beq.n	80197ee <_vfiprintf_r+0x176>
 8019862:	9105      	str	r1, [sp, #20]
 8019864:	e7c3      	b.n	80197ee <_vfiprintf_r+0x176>
 8019866:	fb0c 2101 	mla	r1, ip, r1, r2
 801986a:	4604      	mov	r4, r0
 801986c:	2301      	movs	r3, #1
 801986e:	e7f0      	b.n	8019852 <_vfiprintf_r+0x1da>
 8019870:	ab03      	add	r3, sp, #12
 8019872:	9300      	str	r3, [sp, #0]
 8019874:	462a      	mov	r2, r5
 8019876:	4b16      	ldr	r3, [pc, #88]	; (80198d0 <_vfiprintf_r+0x258>)
 8019878:	a904      	add	r1, sp, #16
 801987a:	4630      	mov	r0, r6
 801987c:	f3af 8000 	nop.w
 8019880:	4607      	mov	r7, r0
 8019882:	1c78      	adds	r0, r7, #1
 8019884:	d1d6      	bne.n	8019834 <_vfiprintf_r+0x1bc>
 8019886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019888:	07d9      	lsls	r1, r3, #31
 801988a:	d405      	bmi.n	8019898 <_vfiprintf_r+0x220>
 801988c:	89ab      	ldrh	r3, [r5, #12]
 801988e:	059a      	lsls	r2, r3, #22
 8019890:	d402      	bmi.n	8019898 <_vfiprintf_r+0x220>
 8019892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019894:	f7ff fd8e 	bl	80193b4 <__retarget_lock_release_recursive>
 8019898:	89ab      	ldrh	r3, [r5, #12]
 801989a:	065b      	lsls	r3, r3, #25
 801989c:	f53f af12 	bmi.w	80196c4 <_vfiprintf_r+0x4c>
 80198a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198a2:	e711      	b.n	80196c8 <_vfiprintf_r+0x50>
 80198a4:	ab03      	add	r3, sp, #12
 80198a6:	9300      	str	r3, [sp, #0]
 80198a8:	462a      	mov	r2, r5
 80198aa:	4b09      	ldr	r3, [pc, #36]	; (80198d0 <_vfiprintf_r+0x258>)
 80198ac:	a904      	add	r1, sp, #16
 80198ae:	4630      	mov	r0, r6
 80198b0:	f000 f880 	bl	80199b4 <_printf_i>
 80198b4:	e7e4      	b.n	8019880 <_vfiprintf_r+0x208>
 80198b6:	bf00      	nop
 80198b8:	0801ca7c 	.word	0x0801ca7c
 80198bc:	0801ca9c 	.word	0x0801ca9c
 80198c0:	0801ca5c 	.word	0x0801ca5c
 80198c4:	0801ca28 	.word	0x0801ca28
 80198c8:	0801ca32 	.word	0x0801ca32
 80198cc:	00000000 	.word	0x00000000
 80198d0:	08019653 	.word	0x08019653
 80198d4:	0801ca2e 	.word	0x0801ca2e

080198d8 <_printf_common>:
 80198d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198dc:	4616      	mov	r6, r2
 80198de:	4699      	mov	r9, r3
 80198e0:	688a      	ldr	r2, [r1, #8]
 80198e2:	690b      	ldr	r3, [r1, #16]
 80198e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80198e8:	4293      	cmp	r3, r2
 80198ea:	bfb8      	it	lt
 80198ec:	4613      	movlt	r3, r2
 80198ee:	6033      	str	r3, [r6, #0]
 80198f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80198f4:	4607      	mov	r7, r0
 80198f6:	460c      	mov	r4, r1
 80198f8:	b10a      	cbz	r2, 80198fe <_printf_common+0x26>
 80198fa:	3301      	adds	r3, #1
 80198fc:	6033      	str	r3, [r6, #0]
 80198fe:	6823      	ldr	r3, [r4, #0]
 8019900:	0699      	lsls	r1, r3, #26
 8019902:	bf42      	ittt	mi
 8019904:	6833      	ldrmi	r3, [r6, #0]
 8019906:	3302      	addmi	r3, #2
 8019908:	6033      	strmi	r3, [r6, #0]
 801990a:	6825      	ldr	r5, [r4, #0]
 801990c:	f015 0506 	ands.w	r5, r5, #6
 8019910:	d106      	bne.n	8019920 <_printf_common+0x48>
 8019912:	f104 0a19 	add.w	sl, r4, #25
 8019916:	68e3      	ldr	r3, [r4, #12]
 8019918:	6832      	ldr	r2, [r6, #0]
 801991a:	1a9b      	subs	r3, r3, r2
 801991c:	42ab      	cmp	r3, r5
 801991e:	dc26      	bgt.n	801996e <_printf_common+0x96>
 8019920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019924:	1e13      	subs	r3, r2, #0
 8019926:	6822      	ldr	r2, [r4, #0]
 8019928:	bf18      	it	ne
 801992a:	2301      	movne	r3, #1
 801992c:	0692      	lsls	r2, r2, #26
 801992e:	d42b      	bmi.n	8019988 <_printf_common+0xb0>
 8019930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019934:	4649      	mov	r1, r9
 8019936:	4638      	mov	r0, r7
 8019938:	47c0      	blx	r8
 801993a:	3001      	adds	r0, #1
 801993c:	d01e      	beq.n	801997c <_printf_common+0xa4>
 801993e:	6823      	ldr	r3, [r4, #0]
 8019940:	68e5      	ldr	r5, [r4, #12]
 8019942:	6832      	ldr	r2, [r6, #0]
 8019944:	f003 0306 	and.w	r3, r3, #6
 8019948:	2b04      	cmp	r3, #4
 801994a:	bf08      	it	eq
 801994c:	1aad      	subeq	r5, r5, r2
 801994e:	68a3      	ldr	r3, [r4, #8]
 8019950:	6922      	ldr	r2, [r4, #16]
 8019952:	bf0c      	ite	eq
 8019954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019958:	2500      	movne	r5, #0
 801995a:	4293      	cmp	r3, r2
 801995c:	bfc4      	itt	gt
 801995e:	1a9b      	subgt	r3, r3, r2
 8019960:	18ed      	addgt	r5, r5, r3
 8019962:	2600      	movs	r6, #0
 8019964:	341a      	adds	r4, #26
 8019966:	42b5      	cmp	r5, r6
 8019968:	d11a      	bne.n	80199a0 <_printf_common+0xc8>
 801996a:	2000      	movs	r0, #0
 801996c:	e008      	b.n	8019980 <_printf_common+0xa8>
 801996e:	2301      	movs	r3, #1
 8019970:	4652      	mov	r2, sl
 8019972:	4649      	mov	r1, r9
 8019974:	4638      	mov	r0, r7
 8019976:	47c0      	blx	r8
 8019978:	3001      	adds	r0, #1
 801997a:	d103      	bne.n	8019984 <_printf_common+0xac>
 801997c:	f04f 30ff 	mov.w	r0, #4294967295
 8019980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019984:	3501      	adds	r5, #1
 8019986:	e7c6      	b.n	8019916 <_printf_common+0x3e>
 8019988:	18e1      	adds	r1, r4, r3
 801998a:	1c5a      	adds	r2, r3, #1
 801998c:	2030      	movs	r0, #48	; 0x30
 801998e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019992:	4422      	add	r2, r4
 8019994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801999c:	3302      	adds	r3, #2
 801999e:	e7c7      	b.n	8019930 <_printf_common+0x58>
 80199a0:	2301      	movs	r3, #1
 80199a2:	4622      	mov	r2, r4
 80199a4:	4649      	mov	r1, r9
 80199a6:	4638      	mov	r0, r7
 80199a8:	47c0      	blx	r8
 80199aa:	3001      	adds	r0, #1
 80199ac:	d0e6      	beq.n	801997c <_printf_common+0xa4>
 80199ae:	3601      	adds	r6, #1
 80199b0:	e7d9      	b.n	8019966 <_printf_common+0x8e>
	...

080199b4 <_printf_i>:
 80199b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199b8:	7e0f      	ldrb	r7, [r1, #24]
 80199ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80199bc:	2f78      	cmp	r7, #120	; 0x78
 80199be:	4691      	mov	r9, r2
 80199c0:	4680      	mov	r8, r0
 80199c2:	460c      	mov	r4, r1
 80199c4:	469a      	mov	sl, r3
 80199c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80199ca:	d807      	bhi.n	80199dc <_printf_i+0x28>
 80199cc:	2f62      	cmp	r7, #98	; 0x62
 80199ce:	d80a      	bhi.n	80199e6 <_printf_i+0x32>
 80199d0:	2f00      	cmp	r7, #0
 80199d2:	f000 80d8 	beq.w	8019b86 <_printf_i+0x1d2>
 80199d6:	2f58      	cmp	r7, #88	; 0x58
 80199d8:	f000 80a3 	beq.w	8019b22 <_printf_i+0x16e>
 80199dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80199e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80199e4:	e03a      	b.n	8019a5c <_printf_i+0xa8>
 80199e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80199ea:	2b15      	cmp	r3, #21
 80199ec:	d8f6      	bhi.n	80199dc <_printf_i+0x28>
 80199ee:	a101      	add	r1, pc, #4	; (adr r1, 80199f4 <_printf_i+0x40>)
 80199f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199f4:	08019a4d 	.word	0x08019a4d
 80199f8:	08019a61 	.word	0x08019a61
 80199fc:	080199dd 	.word	0x080199dd
 8019a00:	080199dd 	.word	0x080199dd
 8019a04:	080199dd 	.word	0x080199dd
 8019a08:	080199dd 	.word	0x080199dd
 8019a0c:	08019a61 	.word	0x08019a61
 8019a10:	080199dd 	.word	0x080199dd
 8019a14:	080199dd 	.word	0x080199dd
 8019a18:	080199dd 	.word	0x080199dd
 8019a1c:	080199dd 	.word	0x080199dd
 8019a20:	08019b6d 	.word	0x08019b6d
 8019a24:	08019a91 	.word	0x08019a91
 8019a28:	08019b4f 	.word	0x08019b4f
 8019a2c:	080199dd 	.word	0x080199dd
 8019a30:	080199dd 	.word	0x080199dd
 8019a34:	08019b8f 	.word	0x08019b8f
 8019a38:	080199dd 	.word	0x080199dd
 8019a3c:	08019a91 	.word	0x08019a91
 8019a40:	080199dd 	.word	0x080199dd
 8019a44:	080199dd 	.word	0x080199dd
 8019a48:	08019b57 	.word	0x08019b57
 8019a4c:	682b      	ldr	r3, [r5, #0]
 8019a4e:	1d1a      	adds	r2, r3, #4
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	602a      	str	r2, [r5, #0]
 8019a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e0a3      	b.n	8019ba8 <_printf_i+0x1f4>
 8019a60:	6820      	ldr	r0, [r4, #0]
 8019a62:	6829      	ldr	r1, [r5, #0]
 8019a64:	0606      	lsls	r6, r0, #24
 8019a66:	f101 0304 	add.w	r3, r1, #4
 8019a6a:	d50a      	bpl.n	8019a82 <_printf_i+0xce>
 8019a6c:	680e      	ldr	r6, [r1, #0]
 8019a6e:	602b      	str	r3, [r5, #0]
 8019a70:	2e00      	cmp	r6, #0
 8019a72:	da03      	bge.n	8019a7c <_printf_i+0xc8>
 8019a74:	232d      	movs	r3, #45	; 0x2d
 8019a76:	4276      	negs	r6, r6
 8019a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a7c:	485e      	ldr	r0, [pc, #376]	; (8019bf8 <_printf_i+0x244>)
 8019a7e:	230a      	movs	r3, #10
 8019a80:	e019      	b.n	8019ab6 <_printf_i+0x102>
 8019a82:	680e      	ldr	r6, [r1, #0]
 8019a84:	602b      	str	r3, [r5, #0]
 8019a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019a8a:	bf18      	it	ne
 8019a8c:	b236      	sxthne	r6, r6
 8019a8e:	e7ef      	b.n	8019a70 <_printf_i+0xbc>
 8019a90:	682b      	ldr	r3, [r5, #0]
 8019a92:	6820      	ldr	r0, [r4, #0]
 8019a94:	1d19      	adds	r1, r3, #4
 8019a96:	6029      	str	r1, [r5, #0]
 8019a98:	0601      	lsls	r1, r0, #24
 8019a9a:	d501      	bpl.n	8019aa0 <_printf_i+0xec>
 8019a9c:	681e      	ldr	r6, [r3, #0]
 8019a9e:	e002      	b.n	8019aa6 <_printf_i+0xf2>
 8019aa0:	0646      	lsls	r6, r0, #25
 8019aa2:	d5fb      	bpl.n	8019a9c <_printf_i+0xe8>
 8019aa4:	881e      	ldrh	r6, [r3, #0]
 8019aa6:	4854      	ldr	r0, [pc, #336]	; (8019bf8 <_printf_i+0x244>)
 8019aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8019aaa:	bf0c      	ite	eq
 8019aac:	2308      	moveq	r3, #8
 8019aae:	230a      	movne	r3, #10
 8019ab0:	2100      	movs	r1, #0
 8019ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019ab6:	6865      	ldr	r5, [r4, #4]
 8019ab8:	60a5      	str	r5, [r4, #8]
 8019aba:	2d00      	cmp	r5, #0
 8019abc:	bfa2      	ittt	ge
 8019abe:	6821      	ldrge	r1, [r4, #0]
 8019ac0:	f021 0104 	bicge.w	r1, r1, #4
 8019ac4:	6021      	strge	r1, [r4, #0]
 8019ac6:	b90e      	cbnz	r6, 8019acc <_printf_i+0x118>
 8019ac8:	2d00      	cmp	r5, #0
 8019aca:	d04d      	beq.n	8019b68 <_printf_i+0x1b4>
 8019acc:	4615      	mov	r5, r2
 8019ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8019ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8019ad6:	5dc7      	ldrb	r7, [r0, r7]
 8019ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019adc:	4637      	mov	r7, r6
 8019ade:	42bb      	cmp	r3, r7
 8019ae0:	460e      	mov	r6, r1
 8019ae2:	d9f4      	bls.n	8019ace <_printf_i+0x11a>
 8019ae4:	2b08      	cmp	r3, #8
 8019ae6:	d10b      	bne.n	8019b00 <_printf_i+0x14c>
 8019ae8:	6823      	ldr	r3, [r4, #0]
 8019aea:	07de      	lsls	r6, r3, #31
 8019aec:	d508      	bpl.n	8019b00 <_printf_i+0x14c>
 8019aee:	6923      	ldr	r3, [r4, #16]
 8019af0:	6861      	ldr	r1, [r4, #4]
 8019af2:	4299      	cmp	r1, r3
 8019af4:	bfde      	ittt	le
 8019af6:	2330      	movle	r3, #48	; 0x30
 8019af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019b00:	1b52      	subs	r2, r2, r5
 8019b02:	6122      	str	r2, [r4, #16]
 8019b04:	f8cd a000 	str.w	sl, [sp]
 8019b08:	464b      	mov	r3, r9
 8019b0a:	aa03      	add	r2, sp, #12
 8019b0c:	4621      	mov	r1, r4
 8019b0e:	4640      	mov	r0, r8
 8019b10:	f7ff fee2 	bl	80198d8 <_printf_common>
 8019b14:	3001      	adds	r0, #1
 8019b16:	d14c      	bne.n	8019bb2 <_printf_i+0x1fe>
 8019b18:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1c:	b004      	add	sp, #16
 8019b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b22:	4835      	ldr	r0, [pc, #212]	; (8019bf8 <_printf_i+0x244>)
 8019b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019b28:	6829      	ldr	r1, [r5, #0]
 8019b2a:	6823      	ldr	r3, [r4, #0]
 8019b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019b30:	6029      	str	r1, [r5, #0]
 8019b32:	061d      	lsls	r5, r3, #24
 8019b34:	d514      	bpl.n	8019b60 <_printf_i+0x1ac>
 8019b36:	07df      	lsls	r7, r3, #31
 8019b38:	bf44      	itt	mi
 8019b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8019b3e:	6023      	strmi	r3, [r4, #0]
 8019b40:	b91e      	cbnz	r6, 8019b4a <_printf_i+0x196>
 8019b42:	6823      	ldr	r3, [r4, #0]
 8019b44:	f023 0320 	bic.w	r3, r3, #32
 8019b48:	6023      	str	r3, [r4, #0]
 8019b4a:	2310      	movs	r3, #16
 8019b4c:	e7b0      	b.n	8019ab0 <_printf_i+0xfc>
 8019b4e:	6823      	ldr	r3, [r4, #0]
 8019b50:	f043 0320 	orr.w	r3, r3, #32
 8019b54:	6023      	str	r3, [r4, #0]
 8019b56:	2378      	movs	r3, #120	; 0x78
 8019b58:	4828      	ldr	r0, [pc, #160]	; (8019bfc <_printf_i+0x248>)
 8019b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b5e:	e7e3      	b.n	8019b28 <_printf_i+0x174>
 8019b60:	0659      	lsls	r1, r3, #25
 8019b62:	bf48      	it	mi
 8019b64:	b2b6      	uxthmi	r6, r6
 8019b66:	e7e6      	b.n	8019b36 <_printf_i+0x182>
 8019b68:	4615      	mov	r5, r2
 8019b6a:	e7bb      	b.n	8019ae4 <_printf_i+0x130>
 8019b6c:	682b      	ldr	r3, [r5, #0]
 8019b6e:	6826      	ldr	r6, [r4, #0]
 8019b70:	6961      	ldr	r1, [r4, #20]
 8019b72:	1d18      	adds	r0, r3, #4
 8019b74:	6028      	str	r0, [r5, #0]
 8019b76:	0635      	lsls	r5, r6, #24
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	d501      	bpl.n	8019b80 <_printf_i+0x1cc>
 8019b7c:	6019      	str	r1, [r3, #0]
 8019b7e:	e002      	b.n	8019b86 <_printf_i+0x1d2>
 8019b80:	0670      	lsls	r0, r6, #25
 8019b82:	d5fb      	bpl.n	8019b7c <_printf_i+0x1c8>
 8019b84:	8019      	strh	r1, [r3, #0]
 8019b86:	2300      	movs	r3, #0
 8019b88:	6123      	str	r3, [r4, #16]
 8019b8a:	4615      	mov	r5, r2
 8019b8c:	e7ba      	b.n	8019b04 <_printf_i+0x150>
 8019b8e:	682b      	ldr	r3, [r5, #0]
 8019b90:	1d1a      	adds	r2, r3, #4
 8019b92:	602a      	str	r2, [r5, #0]
 8019b94:	681d      	ldr	r5, [r3, #0]
 8019b96:	6862      	ldr	r2, [r4, #4]
 8019b98:	2100      	movs	r1, #0
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	f7e6 fb18 	bl	80001d0 <memchr>
 8019ba0:	b108      	cbz	r0, 8019ba6 <_printf_i+0x1f2>
 8019ba2:	1b40      	subs	r0, r0, r5
 8019ba4:	6060      	str	r0, [r4, #4]
 8019ba6:	6863      	ldr	r3, [r4, #4]
 8019ba8:	6123      	str	r3, [r4, #16]
 8019baa:	2300      	movs	r3, #0
 8019bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019bb0:	e7a8      	b.n	8019b04 <_printf_i+0x150>
 8019bb2:	6923      	ldr	r3, [r4, #16]
 8019bb4:	462a      	mov	r2, r5
 8019bb6:	4649      	mov	r1, r9
 8019bb8:	4640      	mov	r0, r8
 8019bba:	47d0      	blx	sl
 8019bbc:	3001      	adds	r0, #1
 8019bbe:	d0ab      	beq.n	8019b18 <_printf_i+0x164>
 8019bc0:	6823      	ldr	r3, [r4, #0]
 8019bc2:	079b      	lsls	r3, r3, #30
 8019bc4:	d413      	bmi.n	8019bee <_printf_i+0x23a>
 8019bc6:	68e0      	ldr	r0, [r4, #12]
 8019bc8:	9b03      	ldr	r3, [sp, #12]
 8019bca:	4298      	cmp	r0, r3
 8019bcc:	bfb8      	it	lt
 8019bce:	4618      	movlt	r0, r3
 8019bd0:	e7a4      	b.n	8019b1c <_printf_i+0x168>
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	4632      	mov	r2, r6
 8019bd6:	4649      	mov	r1, r9
 8019bd8:	4640      	mov	r0, r8
 8019bda:	47d0      	blx	sl
 8019bdc:	3001      	adds	r0, #1
 8019bde:	d09b      	beq.n	8019b18 <_printf_i+0x164>
 8019be0:	3501      	adds	r5, #1
 8019be2:	68e3      	ldr	r3, [r4, #12]
 8019be4:	9903      	ldr	r1, [sp, #12]
 8019be6:	1a5b      	subs	r3, r3, r1
 8019be8:	42ab      	cmp	r3, r5
 8019bea:	dcf2      	bgt.n	8019bd2 <_printf_i+0x21e>
 8019bec:	e7eb      	b.n	8019bc6 <_printf_i+0x212>
 8019bee:	2500      	movs	r5, #0
 8019bf0:	f104 0619 	add.w	r6, r4, #25
 8019bf4:	e7f5      	b.n	8019be2 <_printf_i+0x22e>
 8019bf6:	bf00      	nop
 8019bf8:	0801ca39 	.word	0x0801ca39
 8019bfc:	0801ca4a 	.word	0x0801ca4a

08019c00 <_sbrk_r>:
 8019c00:	b538      	push	{r3, r4, r5, lr}
 8019c02:	4d06      	ldr	r5, [pc, #24]	; (8019c1c <_sbrk_r+0x1c>)
 8019c04:	2300      	movs	r3, #0
 8019c06:	4604      	mov	r4, r0
 8019c08:	4608      	mov	r0, r1
 8019c0a:	602b      	str	r3, [r5, #0]
 8019c0c:	f7ea fc76 	bl	80044fc <_sbrk>
 8019c10:	1c43      	adds	r3, r0, #1
 8019c12:	d102      	bne.n	8019c1a <_sbrk_r+0x1a>
 8019c14:	682b      	ldr	r3, [r5, #0]
 8019c16:	b103      	cbz	r3, 8019c1a <_sbrk_r+0x1a>
 8019c18:	6023      	str	r3, [r4, #0]
 8019c1a:	bd38      	pop	{r3, r4, r5, pc}
 8019c1c:	20002534 	.word	0x20002534

08019c20 <_raise_r>:
 8019c20:	291f      	cmp	r1, #31
 8019c22:	b538      	push	{r3, r4, r5, lr}
 8019c24:	4604      	mov	r4, r0
 8019c26:	460d      	mov	r5, r1
 8019c28:	d904      	bls.n	8019c34 <_raise_r+0x14>
 8019c2a:	2316      	movs	r3, #22
 8019c2c:	6003      	str	r3, [r0, #0]
 8019c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c32:	bd38      	pop	{r3, r4, r5, pc}
 8019c34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019c36:	b112      	cbz	r2, 8019c3e <_raise_r+0x1e>
 8019c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019c3c:	b94b      	cbnz	r3, 8019c52 <_raise_r+0x32>
 8019c3e:	4620      	mov	r0, r4
 8019c40:	f000 f830 	bl	8019ca4 <_getpid_r>
 8019c44:	462a      	mov	r2, r5
 8019c46:	4601      	mov	r1, r0
 8019c48:	4620      	mov	r0, r4
 8019c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c4e:	f000 b817 	b.w	8019c80 <_kill_r>
 8019c52:	2b01      	cmp	r3, #1
 8019c54:	d00a      	beq.n	8019c6c <_raise_r+0x4c>
 8019c56:	1c59      	adds	r1, r3, #1
 8019c58:	d103      	bne.n	8019c62 <_raise_r+0x42>
 8019c5a:	2316      	movs	r3, #22
 8019c5c:	6003      	str	r3, [r0, #0]
 8019c5e:	2001      	movs	r0, #1
 8019c60:	e7e7      	b.n	8019c32 <_raise_r+0x12>
 8019c62:	2400      	movs	r4, #0
 8019c64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019c68:	4628      	mov	r0, r5
 8019c6a:	4798      	blx	r3
 8019c6c:	2000      	movs	r0, #0
 8019c6e:	e7e0      	b.n	8019c32 <_raise_r+0x12>

08019c70 <raise>:
 8019c70:	4b02      	ldr	r3, [pc, #8]	; (8019c7c <raise+0xc>)
 8019c72:	4601      	mov	r1, r0
 8019c74:	6818      	ldr	r0, [r3, #0]
 8019c76:	f7ff bfd3 	b.w	8019c20 <_raise_r>
 8019c7a:	bf00      	nop
 8019c7c:	20000258 	.word	0x20000258

08019c80 <_kill_r>:
 8019c80:	b538      	push	{r3, r4, r5, lr}
 8019c82:	4d07      	ldr	r5, [pc, #28]	; (8019ca0 <_kill_r+0x20>)
 8019c84:	2300      	movs	r3, #0
 8019c86:	4604      	mov	r4, r0
 8019c88:	4608      	mov	r0, r1
 8019c8a:	4611      	mov	r1, r2
 8019c8c:	602b      	str	r3, [r5, #0]
 8019c8e:	f7ea fbad 	bl	80043ec <_kill>
 8019c92:	1c43      	adds	r3, r0, #1
 8019c94:	d102      	bne.n	8019c9c <_kill_r+0x1c>
 8019c96:	682b      	ldr	r3, [r5, #0]
 8019c98:	b103      	cbz	r3, 8019c9c <_kill_r+0x1c>
 8019c9a:	6023      	str	r3, [r4, #0]
 8019c9c:	bd38      	pop	{r3, r4, r5, pc}
 8019c9e:	bf00      	nop
 8019ca0:	20002534 	.word	0x20002534

08019ca4 <_getpid_r>:
 8019ca4:	f7ea bb9a 	b.w	80043dc <_getpid>

08019ca8 <_vsiprintf_r>:
 8019ca8:	b500      	push	{lr}
 8019caa:	b09b      	sub	sp, #108	; 0x6c
 8019cac:	9100      	str	r1, [sp, #0]
 8019cae:	9104      	str	r1, [sp, #16]
 8019cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019cb4:	9105      	str	r1, [sp, #20]
 8019cb6:	9102      	str	r1, [sp, #8]
 8019cb8:	4905      	ldr	r1, [pc, #20]	; (8019cd0 <_vsiprintf_r+0x28>)
 8019cba:	9103      	str	r1, [sp, #12]
 8019cbc:	4669      	mov	r1, sp
 8019cbe:	f000 fb85 	bl	801a3cc <_svfiprintf_r>
 8019cc2:	9b00      	ldr	r3, [sp, #0]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	701a      	strb	r2, [r3, #0]
 8019cc8:	b01b      	add	sp, #108	; 0x6c
 8019cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cce:	bf00      	nop
 8019cd0:	ffff0208 	.word	0xffff0208

08019cd4 <vsiprintf>:
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	460a      	mov	r2, r1
 8019cd8:	4601      	mov	r1, r0
 8019cda:	4802      	ldr	r0, [pc, #8]	; (8019ce4 <vsiprintf+0x10>)
 8019cdc:	6800      	ldr	r0, [r0, #0]
 8019cde:	f7ff bfe3 	b.w	8019ca8 <_vsiprintf_r>
 8019ce2:	bf00      	nop
 8019ce4:	20000258 	.word	0x20000258

08019ce8 <__swbuf_r>:
 8019ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cea:	460e      	mov	r6, r1
 8019cec:	4614      	mov	r4, r2
 8019cee:	4605      	mov	r5, r0
 8019cf0:	b118      	cbz	r0, 8019cfa <__swbuf_r+0x12>
 8019cf2:	6983      	ldr	r3, [r0, #24]
 8019cf4:	b90b      	cbnz	r3, 8019cfa <__swbuf_r+0x12>
 8019cf6:	f000 f9d1 	bl	801a09c <__sinit>
 8019cfa:	4b21      	ldr	r3, [pc, #132]	; (8019d80 <__swbuf_r+0x98>)
 8019cfc:	429c      	cmp	r4, r3
 8019cfe:	d12b      	bne.n	8019d58 <__swbuf_r+0x70>
 8019d00:	686c      	ldr	r4, [r5, #4]
 8019d02:	69a3      	ldr	r3, [r4, #24]
 8019d04:	60a3      	str	r3, [r4, #8]
 8019d06:	89a3      	ldrh	r3, [r4, #12]
 8019d08:	071a      	lsls	r2, r3, #28
 8019d0a:	d52f      	bpl.n	8019d6c <__swbuf_r+0x84>
 8019d0c:	6923      	ldr	r3, [r4, #16]
 8019d0e:	b36b      	cbz	r3, 8019d6c <__swbuf_r+0x84>
 8019d10:	6923      	ldr	r3, [r4, #16]
 8019d12:	6820      	ldr	r0, [r4, #0]
 8019d14:	1ac0      	subs	r0, r0, r3
 8019d16:	6963      	ldr	r3, [r4, #20]
 8019d18:	b2f6      	uxtb	r6, r6
 8019d1a:	4283      	cmp	r3, r0
 8019d1c:	4637      	mov	r7, r6
 8019d1e:	dc04      	bgt.n	8019d2a <__swbuf_r+0x42>
 8019d20:	4621      	mov	r1, r4
 8019d22:	4628      	mov	r0, r5
 8019d24:	f000 f926 	bl	8019f74 <_fflush_r>
 8019d28:	bb30      	cbnz	r0, 8019d78 <__swbuf_r+0x90>
 8019d2a:	68a3      	ldr	r3, [r4, #8]
 8019d2c:	3b01      	subs	r3, #1
 8019d2e:	60a3      	str	r3, [r4, #8]
 8019d30:	6823      	ldr	r3, [r4, #0]
 8019d32:	1c5a      	adds	r2, r3, #1
 8019d34:	6022      	str	r2, [r4, #0]
 8019d36:	701e      	strb	r6, [r3, #0]
 8019d38:	6963      	ldr	r3, [r4, #20]
 8019d3a:	3001      	adds	r0, #1
 8019d3c:	4283      	cmp	r3, r0
 8019d3e:	d004      	beq.n	8019d4a <__swbuf_r+0x62>
 8019d40:	89a3      	ldrh	r3, [r4, #12]
 8019d42:	07db      	lsls	r3, r3, #31
 8019d44:	d506      	bpl.n	8019d54 <__swbuf_r+0x6c>
 8019d46:	2e0a      	cmp	r6, #10
 8019d48:	d104      	bne.n	8019d54 <__swbuf_r+0x6c>
 8019d4a:	4621      	mov	r1, r4
 8019d4c:	4628      	mov	r0, r5
 8019d4e:	f000 f911 	bl	8019f74 <_fflush_r>
 8019d52:	b988      	cbnz	r0, 8019d78 <__swbuf_r+0x90>
 8019d54:	4638      	mov	r0, r7
 8019d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d58:	4b0a      	ldr	r3, [pc, #40]	; (8019d84 <__swbuf_r+0x9c>)
 8019d5a:	429c      	cmp	r4, r3
 8019d5c:	d101      	bne.n	8019d62 <__swbuf_r+0x7a>
 8019d5e:	68ac      	ldr	r4, [r5, #8]
 8019d60:	e7cf      	b.n	8019d02 <__swbuf_r+0x1a>
 8019d62:	4b09      	ldr	r3, [pc, #36]	; (8019d88 <__swbuf_r+0xa0>)
 8019d64:	429c      	cmp	r4, r3
 8019d66:	bf08      	it	eq
 8019d68:	68ec      	ldreq	r4, [r5, #12]
 8019d6a:	e7ca      	b.n	8019d02 <__swbuf_r+0x1a>
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	4628      	mov	r0, r5
 8019d70:	f000 f80c 	bl	8019d8c <__swsetup_r>
 8019d74:	2800      	cmp	r0, #0
 8019d76:	d0cb      	beq.n	8019d10 <__swbuf_r+0x28>
 8019d78:	f04f 37ff 	mov.w	r7, #4294967295
 8019d7c:	e7ea      	b.n	8019d54 <__swbuf_r+0x6c>
 8019d7e:	bf00      	nop
 8019d80:	0801ca7c 	.word	0x0801ca7c
 8019d84:	0801ca9c 	.word	0x0801ca9c
 8019d88:	0801ca5c 	.word	0x0801ca5c

08019d8c <__swsetup_r>:
 8019d8c:	4b32      	ldr	r3, [pc, #200]	; (8019e58 <__swsetup_r+0xcc>)
 8019d8e:	b570      	push	{r4, r5, r6, lr}
 8019d90:	681d      	ldr	r5, [r3, #0]
 8019d92:	4606      	mov	r6, r0
 8019d94:	460c      	mov	r4, r1
 8019d96:	b125      	cbz	r5, 8019da2 <__swsetup_r+0x16>
 8019d98:	69ab      	ldr	r3, [r5, #24]
 8019d9a:	b913      	cbnz	r3, 8019da2 <__swsetup_r+0x16>
 8019d9c:	4628      	mov	r0, r5
 8019d9e:	f000 f97d 	bl	801a09c <__sinit>
 8019da2:	4b2e      	ldr	r3, [pc, #184]	; (8019e5c <__swsetup_r+0xd0>)
 8019da4:	429c      	cmp	r4, r3
 8019da6:	d10f      	bne.n	8019dc8 <__swsetup_r+0x3c>
 8019da8:	686c      	ldr	r4, [r5, #4]
 8019daa:	89a3      	ldrh	r3, [r4, #12]
 8019dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019db0:	0719      	lsls	r1, r3, #28
 8019db2:	d42c      	bmi.n	8019e0e <__swsetup_r+0x82>
 8019db4:	06dd      	lsls	r5, r3, #27
 8019db6:	d411      	bmi.n	8019ddc <__swsetup_r+0x50>
 8019db8:	2309      	movs	r3, #9
 8019dba:	6033      	str	r3, [r6, #0]
 8019dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019dc0:	81a3      	strh	r3, [r4, #12]
 8019dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8019dc6:	e03e      	b.n	8019e46 <__swsetup_r+0xba>
 8019dc8:	4b25      	ldr	r3, [pc, #148]	; (8019e60 <__swsetup_r+0xd4>)
 8019dca:	429c      	cmp	r4, r3
 8019dcc:	d101      	bne.n	8019dd2 <__swsetup_r+0x46>
 8019dce:	68ac      	ldr	r4, [r5, #8]
 8019dd0:	e7eb      	b.n	8019daa <__swsetup_r+0x1e>
 8019dd2:	4b24      	ldr	r3, [pc, #144]	; (8019e64 <__swsetup_r+0xd8>)
 8019dd4:	429c      	cmp	r4, r3
 8019dd6:	bf08      	it	eq
 8019dd8:	68ec      	ldreq	r4, [r5, #12]
 8019dda:	e7e6      	b.n	8019daa <__swsetup_r+0x1e>
 8019ddc:	0758      	lsls	r0, r3, #29
 8019dde:	d512      	bpl.n	8019e06 <__swsetup_r+0x7a>
 8019de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019de2:	b141      	cbz	r1, 8019df6 <__swsetup_r+0x6a>
 8019de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019de8:	4299      	cmp	r1, r3
 8019dea:	d002      	beq.n	8019df2 <__swsetup_r+0x66>
 8019dec:	4630      	mov	r0, r6
 8019dee:	f7ff fb39 	bl	8019464 <_free_r>
 8019df2:	2300      	movs	r3, #0
 8019df4:	6363      	str	r3, [r4, #52]	; 0x34
 8019df6:	89a3      	ldrh	r3, [r4, #12]
 8019df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019dfc:	81a3      	strh	r3, [r4, #12]
 8019dfe:	2300      	movs	r3, #0
 8019e00:	6063      	str	r3, [r4, #4]
 8019e02:	6923      	ldr	r3, [r4, #16]
 8019e04:	6023      	str	r3, [r4, #0]
 8019e06:	89a3      	ldrh	r3, [r4, #12]
 8019e08:	f043 0308 	orr.w	r3, r3, #8
 8019e0c:	81a3      	strh	r3, [r4, #12]
 8019e0e:	6923      	ldr	r3, [r4, #16]
 8019e10:	b94b      	cbnz	r3, 8019e26 <__swsetup_r+0x9a>
 8019e12:	89a3      	ldrh	r3, [r4, #12]
 8019e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e1c:	d003      	beq.n	8019e26 <__swsetup_r+0x9a>
 8019e1e:	4621      	mov	r1, r4
 8019e20:	4630      	mov	r0, r6
 8019e22:	f000 f9fd 	bl	801a220 <__smakebuf_r>
 8019e26:	89a0      	ldrh	r0, [r4, #12]
 8019e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e2c:	f010 0301 	ands.w	r3, r0, #1
 8019e30:	d00a      	beq.n	8019e48 <__swsetup_r+0xbc>
 8019e32:	2300      	movs	r3, #0
 8019e34:	60a3      	str	r3, [r4, #8]
 8019e36:	6963      	ldr	r3, [r4, #20]
 8019e38:	425b      	negs	r3, r3
 8019e3a:	61a3      	str	r3, [r4, #24]
 8019e3c:	6923      	ldr	r3, [r4, #16]
 8019e3e:	b943      	cbnz	r3, 8019e52 <__swsetup_r+0xc6>
 8019e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019e44:	d1ba      	bne.n	8019dbc <__swsetup_r+0x30>
 8019e46:	bd70      	pop	{r4, r5, r6, pc}
 8019e48:	0781      	lsls	r1, r0, #30
 8019e4a:	bf58      	it	pl
 8019e4c:	6963      	ldrpl	r3, [r4, #20]
 8019e4e:	60a3      	str	r3, [r4, #8]
 8019e50:	e7f4      	b.n	8019e3c <__swsetup_r+0xb0>
 8019e52:	2000      	movs	r0, #0
 8019e54:	e7f7      	b.n	8019e46 <__swsetup_r+0xba>
 8019e56:	bf00      	nop
 8019e58:	20000258 	.word	0x20000258
 8019e5c:	0801ca7c 	.word	0x0801ca7c
 8019e60:	0801ca9c 	.word	0x0801ca9c
 8019e64:	0801ca5c 	.word	0x0801ca5c

08019e68 <__sflush_r>:
 8019e68:	898a      	ldrh	r2, [r1, #12]
 8019e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e6e:	4605      	mov	r5, r0
 8019e70:	0710      	lsls	r0, r2, #28
 8019e72:	460c      	mov	r4, r1
 8019e74:	d458      	bmi.n	8019f28 <__sflush_r+0xc0>
 8019e76:	684b      	ldr	r3, [r1, #4]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	dc05      	bgt.n	8019e88 <__sflush_r+0x20>
 8019e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	dc02      	bgt.n	8019e88 <__sflush_r+0x20>
 8019e82:	2000      	movs	r0, #0
 8019e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e8a:	2e00      	cmp	r6, #0
 8019e8c:	d0f9      	beq.n	8019e82 <__sflush_r+0x1a>
 8019e8e:	2300      	movs	r3, #0
 8019e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019e94:	682f      	ldr	r7, [r5, #0]
 8019e96:	602b      	str	r3, [r5, #0]
 8019e98:	d032      	beq.n	8019f00 <__sflush_r+0x98>
 8019e9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019e9c:	89a3      	ldrh	r3, [r4, #12]
 8019e9e:	075a      	lsls	r2, r3, #29
 8019ea0:	d505      	bpl.n	8019eae <__sflush_r+0x46>
 8019ea2:	6863      	ldr	r3, [r4, #4]
 8019ea4:	1ac0      	subs	r0, r0, r3
 8019ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019ea8:	b10b      	cbz	r3, 8019eae <__sflush_r+0x46>
 8019eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019eac:	1ac0      	subs	r0, r0, r3
 8019eae:	2300      	movs	r3, #0
 8019eb0:	4602      	mov	r2, r0
 8019eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019eb4:	6a21      	ldr	r1, [r4, #32]
 8019eb6:	4628      	mov	r0, r5
 8019eb8:	47b0      	blx	r6
 8019eba:	1c43      	adds	r3, r0, #1
 8019ebc:	89a3      	ldrh	r3, [r4, #12]
 8019ebe:	d106      	bne.n	8019ece <__sflush_r+0x66>
 8019ec0:	6829      	ldr	r1, [r5, #0]
 8019ec2:	291d      	cmp	r1, #29
 8019ec4:	d82c      	bhi.n	8019f20 <__sflush_r+0xb8>
 8019ec6:	4a2a      	ldr	r2, [pc, #168]	; (8019f70 <__sflush_r+0x108>)
 8019ec8:	40ca      	lsrs	r2, r1
 8019eca:	07d6      	lsls	r6, r2, #31
 8019ecc:	d528      	bpl.n	8019f20 <__sflush_r+0xb8>
 8019ece:	2200      	movs	r2, #0
 8019ed0:	6062      	str	r2, [r4, #4]
 8019ed2:	04d9      	lsls	r1, r3, #19
 8019ed4:	6922      	ldr	r2, [r4, #16]
 8019ed6:	6022      	str	r2, [r4, #0]
 8019ed8:	d504      	bpl.n	8019ee4 <__sflush_r+0x7c>
 8019eda:	1c42      	adds	r2, r0, #1
 8019edc:	d101      	bne.n	8019ee2 <__sflush_r+0x7a>
 8019ede:	682b      	ldr	r3, [r5, #0]
 8019ee0:	b903      	cbnz	r3, 8019ee4 <__sflush_r+0x7c>
 8019ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8019ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ee6:	602f      	str	r7, [r5, #0]
 8019ee8:	2900      	cmp	r1, #0
 8019eea:	d0ca      	beq.n	8019e82 <__sflush_r+0x1a>
 8019eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ef0:	4299      	cmp	r1, r3
 8019ef2:	d002      	beq.n	8019efa <__sflush_r+0x92>
 8019ef4:	4628      	mov	r0, r5
 8019ef6:	f7ff fab5 	bl	8019464 <_free_r>
 8019efa:	2000      	movs	r0, #0
 8019efc:	6360      	str	r0, [r4, #52]	; 0x34
 8019efe:	e7c1      	b.n	8019e84 <__sflush_r+0x1c>
 8019f00:	6a21      	ldr	r1, [r4, #32]
 8019f02:	2301      	movs	r3, #1
 8019f04:	4628      	mov	r0, r5
 8019f06:	47b0      	blx	r6
 8019f08:	1c41      	adds	r1, r0, #1
 8019f0a:	d1c7      	bne.n	8019e9c <__sflush_r+0x34>
 8019f0c:	682b      	ldr	r3, [r5, #0]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d0c4      	beq.n	8019e9c <__sflush_r+0x34>
 8019f12:	2b1d      	cmp	r3, #29
 8019f14:	d001      	beq.n	8019f1a <__sflush_r+0xb2>
 8019f16:	2b16      	cmp	r3, #22
 8019f18:	d101      	bne.n	8019f1e <__sflush_r+0xb6>
 8019f1a:	602f      	str	r7, [r5, #0]
 8019f1c:	e7b1      	b.n	8019e82 <__sflush_r+0x1a>
 8019f1e:	89a3      	ldrh	r3, [r4, #12]
 8019f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f24:	81a3      	strh	r3, [r4, #12]
 8019f26:	e7ad      	b.n	8019e84 <__sflush_r+0x1c>
 8019f28:	690f      	ldr	r7, [r1, #16]
 8019f2a:	2f00      	cmp	r7, #0
 8019f2c:	d0a9      	beq.n	8019e82 <__sflush_r+0x1a>
 8019f2e:	0793      	lsls	r3, r2, #30
 8019f30:	680e      	ldr	r6, [r1, #0]
 8019f32:	bf08      	it	eq
 8019f34:	694b      	ldreq	r3, [r1, #20]
 8019f36:	600f      	str	r7, [r1, #0]
 8019f38:	bf18      	it	ne
 8019f3a:	2300      	movne	r3, #0
 8019f3c:	eba6 0807 	sub.w	r8, r6, r7
 8019f40:	608b      	str	r3, [r1, #8]
 8019f42:	f1b8 0f00 	cmp.w	r8, #0
 8019f46:	dd9c      	ble.n	8019e82 <__sflush_r+0x1a>
 8019f48:	6a21      	ldr	r1, [r4, #32]
 8019f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019f4c:	4643      	mov	r3, r8
 8019f4e:	463a      	mov	r2, r7
 8019f50:	4628      	mov	r0, r5
 8019f52:	47b0      	blx	r6
 8019f54:	2800      	cmp	r0, #0
 8019f56:	dc06      	bgt.n	8019f66 <__sflush_r+0xfe>
 8019f58:	89a3      	ldrh	r3, [r4, #12]
 8019f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f5e:	81a3      	strh	r3, [r4, #12]
 8019f60:	f04f 30ff 	mov.w	r0, #4294967295
 8019f64:	e78e      	b.n	8019e84 <__sflush_r+0x1c>
 8019f66:	4407      	add	r7, r0
 8019f68:	eba8 0800 	sub.w	r8, r8, r0
 8019f6c:	e7e9      	b.n	8019f42 <__sflush_r+0xda>
 8019f6e:	bf00      	nop
 8019f70:	20400001 	.word	0x20400001

08019f74 <_fflush_r>:
 8019f74:	b538      	push	{r3, r4, r5, lr}
 8019f76:	690b      	ldr	r3, [r1, #16]
 8019f78:	4605      	mov	r5, r0
 8019f7a:	460c      	mov	r4, r1
 8019f7c:	b913      	cbnz	r3, 8019f84 <_fflush_r+0x10>
 8019f7e:	2500      	movs	r5, #0
 8019f80:	4628      	mov	r0, r5
 8019f82:	bd38      	pop	{r3, r4, r5, pc}
 8019f84:	b118      	cbz	r0, 8019f8e <_fflush_r+0x1a>
 8019f86:	6983      	ldr	r3, [r0, #24]
 8019f88:	b90b      	cbnz	r3, 8019f8e <_fflush_r+0x1a>
 8019f8a:	f000 f887 	bl	801a09c <__sinit>
 8019f8e:	4b14      	ldr	r3, [pc, #80]	; (8019fe0 <_fflush_r+0x6c>)
 8019f90:	429c      	cmp	r4, r3
 8019f92:	d11b      	bne.n	8019fcc <_fflush_r+0x58>
 8019f94:	686c      	ldr	r4, [r5, #4]
 8019f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d0ef      	beq.n	8019f7e <_fflush_r+0xa>
 8019f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019fa0:	07d0      	lsls	r0, r2, #31
 8019fa2:	d404      	bmi.n	8019fae <_fflush_r+0x3a>
 8019fa4:	0599      	lsls	r1, r3, #22
 8019fa6:	d402      	bmi.n	8019fae <_fflush_r+0x3a>
 8019fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019faa:	f7ff fa02 	bl	80193b2 <__retarget_lock_acquire_recursive>
 8019fae:	4628      	mov	r0, r5
 8019fb0:	4621      	mov	r1, r4
 8019fb2:	f7ff ff59 	bl	8019e68 <__sflush_r>
 8019fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019fb8:	07da      	lsls	r2, r3, #31
 8019fba:	4605      	mov	r5, r0
 8019fbc:	d4e0      	bmi.n	8019f80 <_fflush_r+0xc>
 8019fbe:	89a3      	ldrh	r3, [r4, #12]
 8019fc0:	059b      	lsls	r3, r3, #22
 8019fc2:	d4dd      	bmi.n	8019f80 <_fflush_r+0xc>
 8019fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fc6:	f7ff f9f5 	bl	80193b4 <__retarget_lock_release_recursive>
 8019fca:	e7d9      	b.n	8019f80 <_fflush_r+0xc>
 8019fcc:	4b05      	ldr	r3, [pc, #20]	; (8019fe4 <_fflush_r+0x70>)
 8019fce:	429c      	cmp	r4, r3
 8019fd0:	d101      	bne.n	8019fd6 <_fflush_r+0x62>
 8019fd2:	68ac      	ldr	r4, [r5, #8]
 8019fd4:	e7df      	b.n	8019f96 <_fflush_r+0x22>
 8019fd6:	4b04      	ldr	r3, [pc, #16]	; (8019fe8 <_fflush_r+0x74>)
 8019fd8:	429c      	cmp	r4, r3
 8019fda:	bf08      	it	eq
 8019fdc:	68ec      	ldreq	r4, [r5, #12]
 8019fde:	e7da      	b.n	8019f96 <_fflush_r+0x22>
 8019fe0:	0801ca7c 	.word	0x0801ca7c
 8019fe4:	0801ca9c 	.word	0x0801ca9c
 8019fe8:	0801ca5c 	.word	0x0801ca5c

08019fec <std>:
 8019fec:	2300      	movs	r3, #0
 8019fee:	b510      	push	{r4, lr}
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8019ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ffa:	6083      	str	r3, [r0, #8]
 8019ffc:	8181      	strh	r1, [r0, #12]
 8019ffe:	6643      	str	r3, [r0, #100]	; 0x64
 801a000:	81c2      	strh	r2, [r0, #14]
 801a002:	6183      	str	r3, [r0, #24]
 801a004:	4619      	mov	r1, r3
 801a006:	2208      	movs	r2, #8
 801a008:	305c      	adds	r0, #92	; 0x5c
 801a00a:	f7ff fa0d 	bl	8019428 <memset>
 801a00e:	4b05      	ldr	r3, [pc, #20]	; (801a024 <std+0x38>)
 801a010:	6263      	str	r3, [r4, #36]	; 0x24
 801a012:	4b05      	ldr	r3, [pc, #20]	; (801a028 <std+0x3c>)
 801a014:	62a3      	str	r3, [r4, #40]	; 0x28
 801a016:	4b05      	ldr	r3, [pc, #20]	; (801a02c <std+0x40>)
 801a018:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a01a:	4b05      	ldr	r3, [pc, #20]	; (801a030 <std+0x44>)
 801a01c:	6224      	str	r4, [r4, #32]
 801a01e:	6323      	str	r3, [r4, #48]	; 0x30
 801a020:	bd10      	pop	{r4, pc}
 801a022:	bf00      	nop
 801a024:	0801a5cd 	.word	0x0801a5cd
 801a028:	0801a5ef 	.word	0x0801a5ef
 801a02c:	0801a627 	.word	0x0801a627
 801a030:	0801a64b 	.word	0x0801a64b

0801a034 <_cleanup_r>:
 801a034:	4901      	ldr	r1, [pc, #4]	; (801a03c <_cleanup_r+0x8>)
 801a036:	f000 b8af 	b.w	801a198 <_fwalk_reent>
 801a03a:	bf00      	nop
 801a03c:	08019f75 	.word	0x08019f75

0801a040 <__sfmoreglue>:
 801a040:	b570      	push	{r4, r5, r6, lr}
 801a042:	2268      	movs	r2, #104	; 0x68
 801a044:	1e4d      	subs	r5, r1, #1
 801a046:	4355      	muls	r5, r2
 801a048:	460e      	mov	r6, r1
 801a04a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a04e:	f7ff fa75 	bl	801953c <_malloc_r>
 801a052:	4604      	mov	r4, r0
 801a054:	b140      	cbz	r0, 801a068 <__sfmoreglue+0x28>
 801a056:	2100      	movs	r1, #0
 801a058:	e9c0 1600 	strd	r1, r6, [r0]
 801a05c:	300c      	adds	r0, #12
 801a05e:	60a0      	str	r0, [r4, #8]
 801a060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a064:	f7ff f9e0 	bl	8019428 <memset>
 801a068:	4620      	mov	r0, r4
 801a06a:	bd70      	pop	{r4, r5, r6, pc}

0801a06c <__sfp_lock_acquire>:
 801a06c:	4801      	ldr	r0, [pc, #4]	; (801a074 <__sfp_lock_acquire+0x8>)
 801a06e:	f7ff b9a0 	b.w	80193b2 <__retarget_lock_acquire_recursive>
 801a072:	bf00      	nop
 801a074:	20002529 	.word	0x20002529

0801a078 <__sfp_lock_release>:
 801a078:	4801      	ldr	r0, [pc, #4]	; (801a080 <__sfp_lock_release+0x8>)
 801a07a:	f7ff b99b 	b.w	80193b4 <__retarget_lock_release_recursive>
 801a07e:	bf00      	nop
 801a080:	20002529 	.word	0x20002529

0801a084 <__sinit_lock_acquire>:
 801a084:	4801      	ldr	r0, [pc, #4]	; (801a08c <__sinit_lock_acquire+0x8>)
 801a086:	f7ff b994 	b.w	80193b2 <__retarget_lock_acquire_recursive>
 801a08a:	bf00      	nop
 801a08c:	2000252a 	.word	0x2000252a

0801a090 <__sinit_lock_release>:
 801a090:	4801      	ldr	r0, [pc, #4]	; (801a098 <__sinit_lock_release+0x8>)
 801a092:	f7ff b98f 	b.w	80193b4 <__retarget_lock_release_recursive>
 801a096:	bf00      	nop
 801a098:	2000252a 	.word	0x2000252a

0801a09c <__sinit>:
 801a09c:	b510      	push	{r4, lr}
 801a09e:	4604      	mov	r4, r0
 801a0a0:	f7ff fff0 	bl	801a084 <__sinit_lock_acquire>
 801a0a4:	69a3      	ldr	r3, [r4, #24]
 801a0a6:	b11b      	cbz	r3, 801a0b0 <__sinit+0x14>
 801a0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0ac:	f7ff bff0 	b.w	801a090 <__sinit_lock_release>
 801a0b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a0b4:	6523      	str	r3, [r4, #80]	; 0x50
 801a0b6:	4b13      	ldr	r3, [pc, #76]	; (801a104 <__sinit+0x68>)
 801a0b8:	4a13      	ldr	r2, [pc, #76]	; (801a108 <__sinit+0x6c>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	62a2      	str	r2, [r4, #40]	; 0x28
 801a0be:	42a3      	cmp	r3, r4
 801a0c0:	bf04      	itt	eq
 801a0c2:	2301      	moveq	r3, #1
 801a0c4:	61a3      	streq	r3, [r4, #24]
 801a0c6:	4620      	mov	r0, r4
 801a0c8:	f000 f820 	bl	801a10c <__sfp>
 801a0cc:	6060      	str	r0, [r4, #4]
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	f000 f81c 	bl	801a10c <__sfp>
 801a0d4:	60a0      	str	r0, [r4, #8]
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	f000 f818 	bl	801a10c <__sfp>
 801a0dc:	2200      	movs	r2, #0
 801a0de:	60e0      	str	r0, [r4, #12]
 801a0e0:	2104      	movs	r1, #4
 801a0e2:	6860      	ldr	r0, [r4, #4]
 801a0e4:	f7ff ff82 	bl	8019fec <std>
 801a0e8:	68a0      	ldr	r0, [r4, #8]
 801a0ea:	2201      	movs	r2, #1
 801a0ec:	2109      	movs	r1, #9
 801a0ee:	f7ff ff7d 	bl	8019fec <std>
 801a0f2:	68e0      	ldr	r0, [r4, #12]
 801a0f4:	2202      	movs	r2, #2
 801a0f6:	2112      	movs	r1, #18
 801a0f8:	f7ff ff78 	bl	8019fec <std>
 801a0fc:	2301      	movs	r3, #1
 801a0fe:	61a3      	str	r3, [r4, #24]
 801a100:	e7d2      	b.n	801a0a8 <__sinit+0xc>
 801a102:	bf00      	nop
 801a104:	0801ca24 	.word	0x0801ca24
 801a108:	0801a035 	.word	0x0801a035

0801a10c <__sfp>:
 801a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a10e:	4607      	mov	r7, r0
 801a110:	f7ff ffac 	bl	801a06c <__sfp_lock_acquire>
 801a114:	4b1e      	ldr	r3, [pc, #120]	; (801a190 <__sfp+0x84>)
 801a116:	681e      	ldr	r6, [r3, #0]
 801a118:	69b3      	ldr	r3, [r6, #24]
 801a11a:	b913      	cbnz	r3, 801a122 <__sfp+0x16>
 801a11c:	4630      	mov	r0, r6
 801a11e:	f7ff ffbd 	bl	801a09c <__sinit>
 801a122:	3648      	adds	r6, #72	; 0x48
 801a124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a128:	3b01      	subs	r3, #1
 801a12a:	d503      	bpl.n	801a134 <__sfp+0x28>
 801a12c:	6833      	ldr	r3, [r6, #0]
 801a12e:	b30b      	cbz	r3, 801a174 <__sfp+0x68>
 801a130:	6836      	ldr	r6, [r6, #0]
 801a132:	e7f7      	b.n	801a124 <__sfp+0x18>
 801a134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a138:	b9d5      	cbnz	r5, 801a170 <__sfp+0x64>
 801a13a:	4b16      	ldr	r3, [pc, #88]	; (801a194 <__sfp+0x88>)
 801a13c:	60e3      	str	r3, [r4, #12]
 801a13e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a142:	6665      	str	r5, [r4, #100]	; 0x64
 801a144:	f7ff f934 	bl	80193b0 <__retarget_lock_init_recursive>
 801a148:	f7ff ff96 	bl	801a078 <__sfp_lock_release>
 801a14c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a154:	6025      	str	r5, [r4, #0]
 801a156:	61a5      	str	r5, [r4, #24]
 801a158:	2208      	movs	r2, #8
 801a15a:	4629      	mov	r1, r5
 801a15c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a160:	f7ff f962 	bl	8019428 <memset>
 801a164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a16c:	4620      	mov	r0, r4
 801a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a170:	3468      	adds	r4, #104	; 0x68
 801a172:	e7d9      	b.n	801a128 <__sfp+0x1c>
 801a174:	2104      	movs	r1, #4
 801a176:	4638      	mov	r0, r7
 801a178:	f7ff ff62 	bl	801a040 <__sfmoreglue>
 801a17c:	4604      	mov	r4, r0
 801a17e:	6030      	str	r0, [r6, #0]
 801a180:	2800      	cmp	r0, #0
 801a182:	d1d5      	bne.n	801a130 <__sfp+0x24>
 801a184:	f7ff ff78 	bl	801a078 <__sfp_lock_release>
 801a188:	230c      	movs	r3, #12
 801a18a:	603b      	str	r3, [r7, #0]
 801a18c:	e7ee      	b.n	801a16c <__sfp+0x60>
 801a18e:	bf00      	nop
 801a190:	0801ca24 	.word	0x0801ca24
 801a194:	ffff0001 	.word	0xffff0001

0801a198 <_fwalk_reent>:
 801a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a19c:	4606      	mov	r6, r0
 801a19e:	4688      	mov	r8, r1
 801a1a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a1a4:	2700      	movs	r7, #0
 801a1a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a1aa:	f1b9 0901 	subs.w	r9, r9, #1
 801a1ae:	d505      	bpl.n	801a1bc <_fwalk_reent+0x24>
 801a1b0:	6824      	ldr	r4, [r4, #0]
 801a1b2:	2c00      	cmp	r4, #0
 801a1b4:	d1f7      	bne.n	801a1a6 <_fwalk_reent+0xe>
 801a1b6:	4638      	mov	r0, r7
 801a1b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1bc:	89ab      	ldrh	r3, [r5, #12]
 801a1be:	2b01      	cmp	r3, #1
 801a1c0:	d907      	bls.n	801a1d2 <_fwalk_reent+0x3a>
 801a1c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a1c6:	3301      	adds	r3, #1
 801a1c8:	d003      	beq.n	801a1d2 <_fwalk_reent+0x3a>
 801a1ca:	4629      	mov	r1, r5
 801a1cc:	4630      	mov	r0, r6
 801a1ce:	47c0      	blx	r8
 801a1d0:	4307      	orrs	r7, r0
 801a1d2:	3568      	adds	r5, #104	; 0x68
 801a1d4:	e7e9      	b.n	801a1aa <_fwalk_reent+0x12>

0801a1d6 <__swhatbuf_r>:
 801a1d6:	b570      	push	{r4, r5, r6, lr}
 801a1d8:	460e      	mov	r6, r1
 801a1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1de:	2900      	cmp	r1, #0
 801a1e0:	b096      	sub	sp, #88	; 0x58
 801a1e2:	4614      	mov	r4, r2
 801a1e4:	461d      	mov	r5, r3
 801a1e6:	da08      	bge.n	801a1fa <__swhatbuf_r+0x24>
 801a1e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	602a      	str	r2, [r5, #0]
 801a1f0:	061a      	lsls	r2, r3, #24
 801a1f2:	d410      	bmi.n	801a216 <__swhatbuf_r+0x40>
 801a1f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1f8:	e00e      	b.n	801a218 <__swhatbuf_r+0x42>
 801a1fa:	466a      	mov	r2, sp
 801a1fc:	f000 fa4c 	bl	801a698 <_fstat_r>
 801a200:	2800      	cmp	r0, #0
 801a202:	dbf1      	blt.n	801a1e8 <__swhatbuf_r+0x12>
 801a204:	9a01      	ldr	r2, [sp, #4]
 801a206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a20a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a20e:	425a      	negs	r2, r3
 801a210:	415a      	adcs	r2, r3
 801a212:	602a      	str	r2, [r5, #0]
 801a214:	e7ee      	b.n	801a1f4 <__swhatbuf_r+0x1e>
 801a216:	2340      	movs	r3, #64	; 0x40
 801a218:	2000      	movs	r0, #0
 801a21a:	6023      	str	r3, [r4, #0]
 801a21c:	b016      	add	sp, #88	; 0x58
 801a21e:	bd70      	pop	{r4, r5, r6, pc}

0801a220 <__smakebuf_r>:
 801a220:	898b      	ldrh	r3, [r1, #12]
 801a222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a224:	079d      	lsls	r5, r3, #30
 801a226:	4606      	mov	r6, r0
 801a228:	460c      	mov	r4, r1
 801a22a:	d507      	bpl.n	801a23c <__smakebuf_r+0x1c>
 801a22c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a230:	6023      	str	r3, [r4, #0]
 801a232:	6123      	str	r3, [r4, #16]
 801a234:	2301      	movs	r3, #1
 801a236:	6163      	str	r3, [r4, #20]
 801a238:	b002      	add	sp, #8
 801a23a:	bd70      	pop	{r4, r5, r6, pc}
 801a23c:	ab01      	add	r3, sp, #4
 801a23e:	466a      	mov	r2, sp
 801a240:	f7ff ffc9 	bl	801a1d6 <__swhatbuf_r>
 801a244:	9900      	ldr	r1, [sp, #0]
 801a246:	4605      	mov	r5, r0
 801a248:	4630      	mov	r0, r6
 801a24a:	f7ff f977 	bl	801953c <_malloc_r>
 801a24e:	b948      	cbnz	r0, 801a264 <__smakebuf_r+0x44>
 801a250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a254:	059a      	lsls	r2, r3, #22
 801a256:	d4ef      	bmi.n	801a238 <__smakebuf_r+0x18>
 801a258:	f023 0303 	bic.w	r3, r3, #3
 801a25c:	f043 0302 	orr.w	r3, r3, #2
 801a260:	81a3      	strh	r3, [r4, #12]
 801a262:	e7e3      	b.n	801a22c <__smakebuf_r+0xc>
 801a264:	4b0d      	ldr	r3, [pc, #52]	; (801a29c <__smakebuf_r+0x7c>)
 801a266:	62b3      	str	r3, [r6, #40]	; 0x28
 801a268:	89a3      	ldrh	r3, [r4, #12]
 801a26a:	6020      	str	r0, [r4, #0]
 801a26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a270:	81a3      	strh	r3, [r4, #12]
 801a272:	9b00      	ldr	r3, [sp, #0]
 801a274:	6163      	str	r3, [r4, #20]
 801a276:	9b01      	ldr	r3, [sp, #4]
 801a278:	6120      	str	r0, [r4, #16]
 801a27a:	b15b      	cbz	r3, 801a294 <__smakebuf_r+0x74>
 801a27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a280:	4630      	mov	r0, r6
 801a282:	f000 fa1b 	bl	801a6bc <_isatty_r>
 801a286:	b128      	cbz	r0, 801a294 <__smakebuf_r+0x74>
 801a288:	89a3      	ldrh	r3, [r4, #12]
 801a28a:	f023 0303 	bic.w	r3, r3, #3
 801a28e:	f043 0301 	orr.w	r3, r3, #1
 801a292:	81a3      	strh	r3, [r4, #12]
 801a294:	89a0      	ldrh	r0, [r4, #12]
 801a296:	4305      	orrs	r5, r0
 801a298:	81a5      	strh	r5, [r4, #12]
 801a29a:	e7cd      	b.n	801a238 <__smakebuf_r+0x18>
 801a29c:	0801a035 	.word	0x0801a035

0801a2a0 <__malloc_lock>:
 801a2a0:	4801      	ldr	r0, [pc, #4]	; (801a2a8 <__malloc_lock+0x8>)
 801a2a2:	f7ff b886 	b.w	80193b2 <__retarget_lock_acquire_recursive>
 801a2a6:	bf00      	nop
 801a2a8:	20002528 	.word	0x20002528

0801a2ac <__malloc_unlock>:
 801a2ac:	4801      	ldr	r0, [pc, #4]	; (801a2b4 <__malloc_unlock+0x8>)
 801a2ae:	f7ff b881 	b.w	80193b4 <__retarget_lock_release_recursive>
 801a2b2:	bf00      	nop
 801a2b4:	20002528 	.word	0x20002528

0801a2b8 <_realloc_r>:
 801a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2bc:	4680      	mov	r8, r0
 801a2be:	4614      	mov	r4, r2
 801a2c0:	460e      	mov	r6, r1
 801a2c2:	b921      	cbnz	r1, 801a2ce <_realloc_r+0x16>
 801a2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c8:	4611      	mov	r1, r2
 801a2ca:	f7ff b937 	b.w	801953c <_malloc_r>
 801a2ce:	b92a      	cbnz	r2, 801a2dc <_realloc_r+0x24>
 801a2d0:	f7ff f8c8 	bl	8019464 <_free_r>
 801a2d4:	4625      	mov	r5, r4
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2dc:	f000 fa10 	bl	801a700 <_malloc_usable_size_r>
 801a2e0:	4284      	cmp	r4, r0
 801a2e2:	4607      	mov	r7, r0
 801a2e4:	d802      	bhi.n	801a2ec <_realloc_r+0x34>
 801a2e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a2ea:	d812      	bhi.n	801a312 <_realloc_r+0x5a>
 801a2ec:	4621      	mov	r1, r4
 801a2ee:	4640      	mov	r0, r8
 801a2f0:	f7ff f924 	bl	801953c <_malloc_r>
 801a2f4:	4605      	mov	r5, r0
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d0ed      	beq.n	801a2d6 <_realloc_r+0x1e>
 801a2fa:	42bc      	cmp	r4, r7
 801a2fc:	4622      	mov	r2, r4
 801a2fe:	4631      	mov	r1, r6
 801a300:	bf28      	it	cs
 801a302:	463a      	movcs	r2, r7
 801a304:	f7ff f868 	bl	80193d8 <memcpy>
 801a308:	4631      	mov	r1, r6
 801a30a:	4640      	mov	r0, r8
 801a30c:	f7ff f8aa 	bl	8019464 <_free_r>
 801a310:	e7e1      	b.n	801a2d6 <_realloc_r+0x1e>
 801a312:	4635      	mov	r5, r6
 801a314:	e7df      	b.n	801a2d6 <_realloc_r+0x1e>

0801a316 <__ssputs_r>:
 801a316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a31a:	688e      	ldr	r6, [r1, #8]
 801a31c:	429e      	cmp	r6, r3
 801a31e:	4682      	mov	sl, r0
 801a320:	460c      	mov	r4, r1
 801a322:	4690      	mov	r8, r2
 801a324:	461f      	mov	r7, r3
 801a326:	d838      	bhi.n	801a39a <__ssputs_r+0x84>
 801a328:	898a      	ldrh	r2, [r1, #12]
 801a32a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a32e:	d032      	beq.n	801a396 <__ssputs_r+0x80>
 801a330:	6825      	ldr	r5, [r4, #0]
 801a332:	6909      	ldr	r1, [r1, #16]
 801a334:	eba5 0901 	sub.w	r9, r5, r1
 801a338:	6965      	ldr	r5, [r4, #20]
 801a33a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a33e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a342:	3301      	adds	r3, #1
 801a344:	444b      	add	r3, r9
 801a346:	106d      	asrs	r5, r5, #1
 801a348:	429d      	cmp	r5, r3
 801a34a:	bf38      	it	cc
 801a34c:	461d      	movcc	r5, r3
 801a34e:	0553      	lsls	r3, r2, #21
 801a350:	d531      	bpl.n	801a3b6 <__ssputs_r+0xa0>
 801a352:	4629      	mov	r1, r5
 801a354:	f7ff f8f2 	bl	801953c <_malloc_r>
 801a358:	4606      	mov	r6, r0
 801a35a:	b950      	cbnz	r0, 801a372 <__ssputs_r+0x5c>
 801a35c:	230c      	movs	r3, #12
 801a35e:	f8ca 3000 	str.w	r3, [sl]
 801a362:	89a3      	ldrh	r3, [r4, #12]
 801a364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a368:	81a3      	strh	r3, [r4, #12]
 801a36a:	f04f 30ff 	mov.w	r0, #4294967295
 801a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a372:	6921      	ldr	r1, [r4, #16]
 801a374:	464a      	mov	r2, r9
 801a376:	f7ff f82f 	bl	80193d8 <memcpy>
 801a37a:	89a3      	ldrh	r3, [r4, #12]
 801a37c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a384:	81a3      	strh	r3, [r4, #12]
 801a386:	6126      	str	r6, [r4, #16]
 801a388:	6165      	str	r5, [r4, #20]
 801a38a:	444e      	add	r6, r9
 801a38c:	eba5 0509 	sub.w	r5, r5, r9
 801a390:	6026      	str	r6, [r4, #0]
 801a392:	60a5      	str	r5, [r4, #8]
 801a394:	463e      	mov	r6, r7
 801a396:	42be      	cmp	r6, r7
 801a398:	d900      	bls.n	801a39c <__ssputs_r+0x86>
 801a39a:	463e      	mov	r6, r7
 801a39c:	6820      	ldr	r0, [r4, #0]
 801a39e:	4632      	mov	r2, r6
 801a3a0:	4641      	mov	r1, r8
 801a3a2:	f7ff f827 	bl	80193f4 <memmove>
 801a3a6:	68a3      	ldr	r3, [r4, #8]
 801a3a8:	1b9b      	subs	r3, r3, r6
 801a3aa:	60a3      	str	r3, [r4, #8]
 801a3ac:	6823      	ldr	r3, [r4, #0]
 801a3ae:	4433      	add	r3, r6
 801a3b0:	6023      	str	r3, [r4, #0]
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	e7db      	b.n	801a36e <__ssputs_r+0x58>
 801a3b6:	462a      	mov	r2, r5
 801a3b8:	f7ff ff7e 	bl	801a2b8 <_realloc_r>
 801a3bc:	4606      	mov	r6, r0
 801a3be:	2800      	cmp	r0, #0
 801a3c0:	d1e1      	bne.n	801a386 <__ssputs_r+0x70>
 801a3c2:	6921      	ldr	r1, [r4, #16]
 801a3c4:	4650      	mov	r0, sl
 801a3c6:	f7ff f84d 	bl	8019464 <_free_r>
 801a3ca:	e7c7      	b.n	801a35c <__ssputs_r+0x46>

0801a3cc <_svfiprintf_r>:
 801a3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d0:	4698      	mov	r8, r3
 801a3d2:	898b      	ldrh	r3, [r1, #12]
 801a3d4:	061b      	lsls	r3, r3, #24
 801a3d6:	b09d      	sub	sp, #116	; 0x74
 801a3d8:	4607      	mov	r7, r0
 801a3da:	460d      	mov	r5, r1
 801a3dc:	4614      	mov	r4, r2
 801a3de:	d50e      	bpl.n	801a3fe <_svfiprintf_r+0x32>
 801a3e0:	690b      	ldr	r3, [r1, #16]
 801a3e2:	b963      	cbnz	r3, 801a3fe <_svfiprintf_r+0x32>
 801a3e4:	2140      	movs	r1, #64	; 0x40
 801a3e6:	f7ff f8a9 	bl	801953c <_malloc_r>
 801a3ea:	6028      	str	r0, [r5, #0]
 801a3ec:	6128      	str	r0, [r5, #16]
 801a3ee:	b920      	cbnz	r0, 801a3fa <_svfiprintf_r+0x2e>
 801a3f0:	230c      	movs	r3, #12
 801a3f2:	603b      	str	r3, [r7, #0]
 801a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a3f8:	e0d1      	b.n	801a59e <_svfiprintf_r+0x1d2>
 801a3fa:	2340      	movs	r3, #64	; 0x40
 801a3fc:	616b      	str	r3, [r5, #20]
 801a3fe:	2300      	movs	r3, #0
 801a400:	9309      	str	r3, [sp, #36]	; 0x24
 801a402:	2320      	movs	r3, #32
 801a404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a408:	f8cd 800c 	str.w	r8, [sp, #12]
 801a40c:	2330      	movs	r3, #48	; 0x30
 801a40e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a5b8 <_svfiprintf_r+0x1ec>
 801a412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a416:	f04f 0901 	mov.w	r9, #1
 801a41a:	4623      	mov	r3, r4
 801a41c:	469a      	mov	sl, r3
 801a41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a422:	b10a      	cbz	r2, 801a428 <_svfiprintf_r+0x5c>
 801a424:	2a25      	cmp	r2, #37	; 0x25
 801a426:	d1f9      	bne.n	801a41c <_svfiprintf_r+0x50>
 801a428:	ebba 0b04 	subs.w	fp, sl, r4
 801a42c:	d00b      	beq.n	801a446 <_svfiprintf_r+0x7a>
 801a42e:	465b      	mov	r3, fp
 801a430:	4622      	mov	r2, r4
 801a432:	4629      	mov	r1, r5
 801a434:	4638      	mov	r0, r7
 801a436:	f7ff ff6e 	bl	801a316 <__ssputs_r>
 801a43a:	3001      	adds	r0, #1
 801a43c:	f000 80aa 	beq.w	801a594 <_svfiprintf_r+0x1c8>
 801a440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a442:	445a      	add	r2, fp
 801a444:	9209      	str	r2, [sp, #36]	; 0x24
 801a446:	f89a 3000 	ldrb.w	r3, [sl]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	f000 80a2 	beq.w	801a594 <_svfiprintf_r+0x1c8>
 801a450:	2300      	movs	r3, #0
 801a452:	f04f 32ff 	mov.w	r2, #4294967295
 801a456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a45a:	f10a 0a01 	add.w	sl, sl, #1
 801a45e:	9304      	str	r3, [sp, #16]
 801a460:	9307      	str	r3, [sp, #28]
 801a462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a466:	931a      	str	r3, [sp, #104]	; 0x68
 801a468:	4654      	mov	r4, sl
 801a46a:	2205      	movs	r2, #5
 801a46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a470:	4851      	ldr	r0, [pc, #324]	; (801a5b8 <_svfiprintf_r+0x1ec>)
 801a472:	f7e5 fead 	bl	80001d0 <memchr>
 801a476:	9a04      	ldr	r2, [sp, #16]
 801a478:	b9d8      	cbnz	r0, 801a4b2 <_svfiprintf_r+0xe6>
 801a47a:	06d0      	lsls	r0, r2, #27
 801a47c:	bf44      	itt	mi
 801a47e:	2320      	movmi	r3, #32
 801a480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a484:	0711      	lsls	r1, r2, #28
 801a486:	bf44      	itt	mi
 801a488:	232b      	movmi	r3, #43	; 0x2b
 801a48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a48e:	f89a 3000 	ldrb.w	r3, [sl]
 801a492:	2b2a      	cmp	r3, #42	; 0x2a
 801a494:	d015      	beq.n	801a4c2 <_svfiprintf_r+0xf6>
 801a496:	9a07      	ldr	r2, [sp, #28]
 801a498:	4654      	mov	r4, sl
 801a49a:	2000      	movs	r0, #0
 801a49c:	f04f 0c0a 	mov.w	ip, #10
 801a4a0:	4621      	mov	r1, r4
 801a4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a4a6:	3b30      	subs	r3, #48	; 0x30
 801a4a8:	2b09      	cmp	r3, #9
 801a4aa:	d94e      	bls.n	801a54a <_svfiprintf_r+0x17e>
 801a4ac:	b1b0      	cbz	r0, 801a4dc <_svfiprintf_r+0x110>
 801a4ae:	9207      	str	r2, [sp, #28]
 801a4b0:	e014      	b.n	801a4dc <_svfiprintf_r+0x110>
 801a4b2:	eba0 0308 	sub.w	r3, r0, r8
 801a4b6:	fa09 f303 	lsl.w	r3, r9, r3
 801a4ba:	4313      	orrs	r3, r2
 801a4bc:	9304      	str	r3, [sp, #16]
 801a4be:	46a2      	mov	sl, r4
 801a4c0:	e7d2      	b.n	801a468 <_svfiprintf_r+0x9c>
 801a4c2:	9b03      	ldr	r3, [sp, #12]
 801a4c4:	1d19      	adds	r1, r3, #4
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	9103      	str	r1, [sp, #12]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	bfbb      	ittet	lt
 801a4ce:	425b      	neglt	r3, r3
 801a4d0:	f042 0202 	orrlt.w	r2, r2, #2
 801a4d4:	9307      	strge	r3, [sp, #28]
 801a4d6:	9307      	strlt	r3, [sp, #28]
 801a4d8:	bfb8      	it	lt
 801a4da:	9204      	strlt	r2, [sp, #16]
 801a4dc:	7823      	ldrb	r3, [r4, #0]
 801a4de:	2b2e      	cmp	r3, #46	; 0x2e
 801a4e0:	d10c      	bne.n	801a4fc <_svfiprintf_r+0x130>
 801a4e2:	7863      	ldrb	r3, [r4, #1]
 801a4e4:	2b2a      	cmp	r3, #42	; 0x2a
 801a4e6:	d135      	bne.n	801a554 <_svfiprintf_r+0x188>
 801a4e8:	9b03      	ldr	r3, [sp, #12]
 801a4ea:	1d1a      	adds	r2, r3, #4
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	9203      	str	r2, [sp, #12]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	bfb8      	it	lt
 801a4f4:	f04f 33ff 	movlt.w	r3, #4294967295
 801a4f8:	3402      	adds	r4, #2
 801a4fa:	9305      	str	r3, [sp, #20]
 801a4fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a5c8 <_svfiprintf_r+0x1fc>
 801a500:	7821      	ldrb	r1, [r4, #0]
 801a502:	2203      	movs	r2, #3
 801a504:	4650      	mov	r0, sl
 801a506:	f7e5 fe63 	bl	80001d0 <memchr>
 801a50a:	b140      	cbz	r0, 801a51e <_svfiprintf_r+0x152>
 801a50c:	2340      	movs	r3, #64	; 0x40
 801a50e:	eba0 000a 	sub.w	r0, r0, sl
 801a512:	fa03 f000 	lsl.w	r0, r3, r0
 801a516:	9b04      	ldr	r3, [sp, #16]
 801a518:	4303      	orrs	r3, r0
 801a51a:	3401      	adds	r4, #1
 801a51c:	9304      	str	r3, [sp, #16]
 801a51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a522:	4826      	ldr	r0, [pc, #152]	; (801a5bc <_svfiprintf_r+0x1f0>)
 801a524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a528:	2206      	movs	r2, #6
 801a52a:	f7e5 fe51 	bl	80001d0 <memchr>
 801a52e:	2800      	cmp	r0, #0
 801a530:	d038      	beq.n	801a5a4 <_svfiprintf_r+0x1d8>
 801a532:	4b23      	ldr	r3, [pc, #140]	; (801a5c0 <_svfiprintf_r+0x1f4>)
 801a534:	bb1b      	cbnz	r3, 801a57e <_svfiprintf_r+0x1b2>
 801a536:	9b03      	ldr	r3, [sp, #12]
 801a538:	3307      	adds	r3, #7
 801a53a:	f023 0307 	bic.w	r3, r3, #7
 801a53e:	3308      	adds	r3, #8
 801a540:	9303      	str	r3, [sp, #12]
 801a542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a544:	4433      	add	r3, r6
 801a546:	9309      	str	r3, [sp, #36]	; 0x24
 801a548:	e767      	b.n	801a41a <_svfiprintf_r+0x4e>
 801a54a:	fb0c 3202 	mla	r2, ip, r2, r3
 801a54e:	460c      	mov	r4, r1
 801a550:	2001      	movs	r0, #1
 801a552:	e7a5      	b.n	801a4a0 <_svfiprintf_r+0xd4>
 801a554:	2300      	movs	r3, #0
 801a556:	3401      	adds	r4, #1
 801a558:	9305      	str	r3, [sp, #20]
 801a55a:	4619      	mov	r1, r3
 801a55c:	f04f 0c0a 	mov.w	ip, #10
 801a560:	4620      	mov	r0, r4
 801a562:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a566:	3a30      	subs	r2, #48	; 0x30
 801a568:	2a09      	cmp	r2, #9
 801a56a:	d903      	bls.n	801a574 <_svfiprintf_r+0x1a8>
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d0c5      	beq.n	801a4fc <_svfiprintf_r+0x130>
 801a570:	9105      	str	r1, [sp, #20]
 801a572:	e7c3      	b.n	801a4fc <_svfiprintf_r+0x130>
 801a574:	fb0c 2101 	mla	r1, ip, r1, r2
 801a578:	4604      	mov	r4, r0
 801a57a:	2301      	movs	r3, #1
 801a57c:	e7f0      	b.n	801a560 <_svfiprintf_r+0x194>
 801a57e:	ab03      	add	r3, sp, #12
 801a580:	9300      	str	r3, [sp, #0]
 801a582:	462a      	mov	r2, r5
 801a584:	4b0f      	ldr	r3, [pc, #60]	; (801a5c4 <_svfiprintf_r+0x1f8>)
 801a586:	a904      	add	r1, sp, #16
 801a588:	4638      	mov	r0, r7
 801a58a:	f3af 8000 	nop.w
 801a58e:	1c42      	adds	r2, r0, #1
 801a590:	4606      	mov	r6, r0
 801a592:	d1d6      	bne.n	801a542 <_svfiprintf_r+0x176>
 801a594:	89ab      	ldrh	r3, [r5, #12]
 801a596:	065b      	lsls	r3, r3, #25
 801a598:	f53f af2c 	bmi.w	801a3f4 <_svfiprintf_r+0x28>
 801a59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a59e:	b01d      	add	sp, #116	; 0x74
 801a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a4:	ab03      	add	r3, sp, #12
 801a5a6:	9300      	str	r3, [sp, #0]
 801a5a8:	462a      	mov	r2, r5
 801a5aa:	4b06      	ldr	r3, [pc, #24]	; (801a5c4 <_svfiprintf_r+0x1f8>)
 801a5ac:	a904      	add	r1, sp, #16
 801a5ae:	4638      	mov	r0, r7
 801a5b0:	f7ff fa00 	bl	80199b4 <_printf_i>
 801a5b4:	e7eb      	b.n	801a58e <_svfiprintf_r+0x1c2>
 801a5b6:	bf00      	nop
 801a5b8:	0801ca28 	.word	0x0801ca28
 801a5bc:	0801ca32 	.word	0x0801ca32
 801a5c0:	00000000 	.word	0x00000000
 801a5c4:	0801a317 	.word	0x0801a317
 801a5c8:	0801ca2e 	.word	0x0801ca2e

0801a5cc <__sread>:
 801a5cc:	b510      	push	{r4, lr}
 801a5ce:	460c      	mov	r4, r1
 801a5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5d4:	f000 f89c 	bl	801a710 <_read_r>
 801a5d8:	2800      	cmp	r0, #0
 801a5da:	bfab      	itete	ge
 801a5dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a5de:	89a3      	ldrhlt	r3, [r4, #12]
 801a5e0:	181b      	addge	r3, r3, r0
 801a5e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a5e6:	bfac      	ite	ge
 801a5e8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a5ea:	81a3      	strhlt	r3, [r4, #12]
 801a5ec:	bd10      	pop	{r4, pc}

0801a5ee <__swrite>:
 801a5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f2:	461f      	mov	r7, r3
 801a5f4:	898b      	ldrh	r3, [r1, #12]
 801a5f6:	05db      	lsls	r3, r3, #23
 801a5f8:	4605      	mov	r5, r0
 801a5fa:	460c      	mov	r4, r1
 801a5fc:	4616      	mov	r6, r2
 801a5fe:	d505      	bpl.n	801a60c <__swrite+0x1e>
 801a600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a604:	2302      	movs	r3, #2
 801a606:	2200      	movs	r2, #0
 801a608:	f000 f868 	bl	801a6dc <_lseek_r>
 801a60c:	89a3      	ldrh	r3, [r4, #12]
 801a60e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a616:	81a3      	strh	r3, [r4, #12]
 801a618:	4632      	mov	r2, r6
 801a61a:	463b      	mov	r3, r7
 801a61c:	4628      	mov	r0, r5
 801a61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a622:	f000 b817 	b.w	801a654 <_write_r>

0801a626 <__sseek>:
 801a626:	b510      	push	{r4, lr}
 801a628:	460c      	mov	r4, r1
 801a62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a62e:	f000 f855 	bl	801a6dc <_lseek_r>
 801a632:	1c43      	adds	r3, r0, #1
 801a634:	89a3      	ldrh	r3, [r4, #12]
 801a636:	bf15      	itete	ne
 801a638:	6560      	strne	r0, [r4, #84]	; 0x54
 801a63a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a63e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a642:	81a3      	strheq	r3, [r4, #12]
 801a644:	bf18      	it	ne
 801a646:	81a3      	strhne	r3, [r4, #12]
 801a648:	bd10      	pop	{r4, pc}

0801a64a <__sclose>:
 801a64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a64e:	f000 b813 	b.w	801a678 <_close_r>
	...

0801a654 <_write_r>:
 801a654:	b538      	push	{r3, r4, r5, lr}
 801a656:	4d07      	ldr	r5, [pc, #28]	; (801a674 <_write_r+0x20>)
 801a658:	4604      	mov	r4, r0
 801a65a:	4608      	mov	r0, r1
 801a65c:	4611      	mov	r1, r2
 801a65e:	2200      	movs	r2, #0
 801a660:	602a      	str	r2, [r5, #0]
 801a662:	461a      	mov	r2, r3
 801a664:	f7e9 fef9 	bl	800445a <_write>
 801a668:	1c43      	adds	r3, r0, #1
 801a66a:	d102      	bne.n	801a672 <_write_r+0x1e>
 801a66c:	682b      	ldr	r3, [r5, #0]
 801a66e:	b103      	cbz	r3, 801a672 <_write_r+0x1e>
 801a670:	6023      	str	r3, [r4, #0]
 801a672:	bd38      	pop	{r3, r4, r5, pc}
 801a674:	20002534 	.word	0x20002534

0801a678 <_close_r>:
 801a678:	b538      	push	{r3, r4, r5, lr}
 801a67a:	4d06      	ldr	r5, [pc, #24]	; (801a694 <_close_r+0x1c>)
 801a67c:	2300      	movs	r3, #0
 801a67e:	4604      	mov	r4, r0
 801a680:	4608      	mov	r0, r1
 801a682:	602b      	str	r3, [r5, #0]
 801a684:	f7e9 ff05 	bl	8004492 <_close>
 801a688:	1c43      	adds	r3, r0, #1
 801a68a:	d102      	bne.n	801a692 <_close_r+0x1a>
 801a68c:	682b      	ldr	r3, [r5, #0]
 801a68e:	b103      	cbz	r3, 801a692 <_close_r+0x1a>
 801a690:	6023      	str	r3, [r4, #0]
 801a692:	bd38      	pop	{r3, r4, r5, pc}
 801a694:	20002534 	.word	0x20002534

0801a698 <_fstat_r>:
 801a698:	b538      	push	{r3, r4, r5, lr}
 801a69a:	4d07      	ldr	r5, [pc, #28]	; (801a6b8 <_fstat_r+0x20>)
 801a69c:	2300      	movs	r3, #0
 801a69e:	4604      	mov	r4, r0
 801a6a0:	4608      	mov	r0, r1
 801a6a2:	4611      	mov	r1, r2
 801a6a4:	602b      	str	r3, [r5, #0]
 801a6a6:	f7e9 ff00 	bl	80044aa <_fstat>
 801a6aa:	1c43      	adds	r3, r0, #1
 801a6ac:	d102      	bne.n	801a6b4 <_fstat_r+0x1c>
 801a6ae:	682b      	ldr	r3, [r5, #0]
 801a6b0:	b103      	cbz	r3, 801a6b4 <_fstat_r+0x1c>
 801a6b2:	6023      	str	r3, [r4, #0]
 801a6b4:	bd38      	pop	{r3, r4, r5, pc}
 801a6b6:	bf00      	nop
 801a6b8:	20002534 	.word	0x20002534

0801a6bc <_isatty_r>:
 801a6bc:	b538      	push	{r3, r4, r5, lr}
 801a6be:	4d06      	ldr	r5, [pc, #24]	; (801a6d8 <_isatty_r+0x1c>)
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	4608      	mov	r0, r1
 801a6c6:	602b      	str	r3, [r5, #0]
 801a6c8:	f7e9 feff 	bl	80044ca <_isatty>
 801a6cc:	1c43      	adds	r3, r0, #1
 801a6ce:	d102      	bne.n	801a6d6 <_isatty_r+0x1a>
 801a6d0:	682b      	ldr	r3, [r5, #0]
 801a6d2:	b103      	cbz	r3, 801a6d6 <_isatty_r+0x1a>
 801a6d4:	6023      	str	r3, [r4, #0]
 801a6d6:	bd38      	pop	{r3, r4, r5, pc}
 801a6d8:	20002534 	.word	0x20002534

0801a6dc <_lseek_r>:
 801a6dc:	b538      	push	{r3, r4, r5, lr}
 801a6de:	4d07      	ldr	r5, [pc, #28]	; (801a6fc <_lseek_r+0x20>)
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	4608      	mov	r0, r1
 801a6e4:	4611      	mov	r1, r2
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	602a      	str	r2, [r5, #0]
 801a6ea:	461a      	mov	r2, r3
 801a6ec:	f7e9 fef8 	bl	80044e0 <_lseek>
 801a6f0:	1c43      	adds	r3, r0, #1
 801a6f2:	d102      	bne.n	801a6fa <_lseek_r+0x1e>
 801a6f4:	682b      	ldr	r3, [r5, #0]
 801a6f6:	b103      	cbz	r3, 801a6fa <_lseek_r+0x1e>
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	bd38      	pop	{r3, r4, r5, pc}
 801a6fc:	20002534 	.word	0x20002534

0801a700 <_malloc_usable_size_r>:
 801a700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a704:	1f18      	subs	r0, r3, #4
 801a706:	2b00      	cmp	r3, #0
 801a708:	bfbc      	itt	lt
 801a70a:	580b      	ldrlt	r3, [r1, r0]
 801a70c:	18c0      	addlt	r0, r0, r3
 801a70e:	4770      	bx	lr

0801a710 <_read_r>:
 801a710:	b538      	push	{r3, r4, r5, lr}
 801a712:	4d07      	ldr	r5, [pc, #28]	; (801a730 <_read_r+0x20>)
 801a714:	4604      	mov	r4, r0
 801a716:	4608      	mov	r0, r1
 801a718:	4611      	mov	r1, r2
 801a71a:	2200      	movs	r2, #0
 801a71c:	602a      	str	r2, [r5, #0]
 801a71e:	461a      	mov	r2, r3
 801a720:	f7e9 fe7e 	bl	8004420 <_read>
 801a724:	1c43      	adds	r3, r0, #1
 801a726:	d102      	bne.n	801a72e <_read_r+0x1e>
 801a728:	682b      	ldr	r3, [r5, #0]
 801a72a:	b103      	cbz	r3, 801a72e <_read_r+0x1e>
 801a72c:	6023      	str	r3, [r4, #0]
 801a72e:	bd38      	pop	{r3, r4, r5, pc}
 801a730:	20002534 	.word	0x20002534

0801a734 <_init>:
 801a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a736:	bf00      	nop
 801a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a73a:	bc08      	pop	{r3}
 801a73c:	469e      	mov	lr, r3
 801a73e:	4770      	bx	lr

0801a740 <_fini>:
 801a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a742:	bf00      	nop
 801a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a746:	bc08      	pop	{r3}
 801a748:	469e      	mov	lr, r3
 801a74a:	4770      	bx	lr
